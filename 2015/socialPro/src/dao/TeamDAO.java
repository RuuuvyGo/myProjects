package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import dto.EnrollTeamDTO;
import dto.MemberDTO;
import dto.TeamDTO;

import socialProExceptions.DAOException;
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : TeamDAO.java
//  @ Date : 2015-07-28
//  @ Author : 
//
//




public class TeamDAO extends BaseDAO{
	
	private static final String TEAM_SEQ = 
			"select team_seq.nextval from dual";
	private static final String INSERT_TEAM_SQL = 
			"insert into team_tb(TEAMCODE, LEADERCODE, NAME, DESCRIPTION) "+ "values(?, ?, ?,?)";
	
	private static final String UPDATE_TEAM_SQL21 = "update team_tb set LEADERCODE=? "+ "where TEAMCODE=?";
	private static final String UPDATE_TEAM_SQL31 = "update team_tb set NAME=? "+ "where TEAMCODE=?";
	private static final String UPDATE_TEAM_SQL41 = "update team_tb set DESCRIPTION=? "+ "where TEAMCODE=?";
	private static final String UPDATE_TEAM_SQL241 = "update team_tb set LEADERCODE=?,DESCRIPTION=? "+ "where TEAMCODE=?";
	private static final String UPDATE_TEAM_SQL = "update team_tb set LEADERCODE=?,NAME=?,DESCRIPTION=? where TEAMCODE=?";
	
	private static final String SELECT_TEAM_SQL1 = "select * FROM team_tb where TEAMCODE=?";
	private static final String SELECT_TEAM_SQL2 = "select * FROM team_tb where LEADERCODE=?";
	private static final String SELECT_TEAM_SQL3 = "select * FROM team_tb where NAME=?";
	private static final String SELECT_TEAM_SQL3_ = "select * FROM team_tb where NAME liek ?% ";
	private static final String SELECT_TEAM_SQL_3 = "select * FROM team_tb where NAME liek %? ";
	private static final String SELECT_TEAM_SQL4 = "select * FROM team_tb where DESCRIPTION like %?%";
	private static final String SELECT_TEAM_SQL34_ = "select * FROM team_tb where name like %?% and DESCRIPTION like %?% ";
	
	private static final String DELETE_TEAM_SQL1 = "DELETE FROM team_tb WHERE  TEAMCODE=?";
	private static final String DELETE_TEAM_SQL2 = "DELETE FROM team_tb WHERE  LEADERCODE=?";
	
	
	private String makeCode() throws DAOException {
		// TODO Auto-generated method stub
		Connection connection = null;
		PreparedStatement pStatement = null;
		String code=null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(TEAM_SEQ);
			ResultSet rs = pStatement.executeQuery();
			if(rs.next()){
				code=new String();
				code="team_"+rs.getString("nextval");
			}
			System.out.println(code);
		
		} catch (SQLException e) {
			throw new DAOException("Error makeCode teamDAO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
		return code;
	}
	
	
	public String insertTeam(TeamDTO dto) throws DAOException {
	
		System.out.println("insertTeam start");
		Connection connection = null;
		PreparedStatement pStatement = null;
		String code=this.makeCode();
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(INSERT_TEAM_SQL);
			pStatement.setString(1, code);
			pStatement.setString(2, dto.getManager());
			pStatement.setString(3, dto.getName());
			pStatement.setString(4, dto.getDescription());
			if(pStatement.executeUpdate()==1)return code;
		} catch (SQLException e) {
			throw new DAOException("Error adding Team. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
		return null;
	}
	
	/*public List<String> searchCooperators(String teamName) {
	
	}*/
	
	public TeamDTO searchTeamCode(String code) throws DAOException {
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		TeamDTO dto=new TeamDTO();
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_TEAM_SQL1);
			pStatement.setString(1,code);
			ResultSet rs = pStatement.executeQuery();
			while(rs.next())
			{
				dto.setCode(rs.getString("teamCode"));
				if(rs.wasNull())return null;
				dto.setManager(rs.getString("leaderCode"));
				dto.setName(rs.getString("name"));
				dto.setDescription(rs.getString("description"));
			}
			return dto;
		} catch (SQLException e) {
			throw new DAOException("Error search TeamDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
		
	}
	
	public TeamDTO searchTeamName(String name) throws DAOException {
	
		Connection connection = null;
		PreparedStatement pStatement = null;
		TeamDTO dto=new TeamDTO();
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_TEAM_SQL3);
			pStatement.setString(1,name);
			ResultSet rs = pStatement.executeQuery();
			while(rs.next())
			{
				dto.setCode(rs.getString("teamCode"));
				dto.setManager(rs.getString("leaderCode"));
				dto.setName(rs.getString("name"));
				dto.setDescription(rs.getString("description"));
			}
			if(dto.getCode()!=null)return dto;
			return null;
		} catch (SQLException e) {
			throw new DAOException("Error search TeamDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
		
	}
	
	
	public List<TeamDTO> searchTeamNameAll(String name) throws DAOException {
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		ResultSet rs=null;
		List<TeamDTO> dtoList= new ArrayList<TeamDTO>();
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_TEAM_SQL3);
			pStatement.setString(1,name);
			rs = pStatement.executeQuery();
			while(rs.next())
			{
				TeamDTO dto=new TeamDTO();
				dto.setCode(rs.getString("teamCode"));
				dto.setManager(rs.getString("leaderCode"));
				dto.setName(rs.getString("name"));
				dto.setDescription(rs.getString("description"));
				dtoList.add(dto);
			}
			pStatement = connection.prepareStatement(SELECT_TEAM_SQL_3);
			pStatement.setString(1,name);
			rs = pStatement.executeQuery();
			while(rs.next())
			{
				TeamDTO dto=new TeamDTO();
				dto.setCode(rs.getString("teamCode"));
				dto.setManager(rs.getString("leaderCode"));
				dto.setName(rs.getString("name"));
				dto.setDescription(rs.getString("description"));
				dtoList.add(dto);
			}
			pStatement = connection.prepareStatement(SELECT_TEAM_SQL3_);
			pStatement.setString(1,name);
			rs = pStatement.executeQuery();
			while(rs.next())
			{
				TeamDTO dto=new TeamDTO();
				dto.setCode(rs.getString("teamCode"));
				dto.setManager(rs.getString("leaderCode"));
				dto.setName(rs.getString("name"));
				dto.setDescription(rs.getString("description"));
				dtoList.add(dto);
			}
			return dtoList;
		} catch (SQLException e) {
			throw new DAOException("Error search TeamDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
		
	}
	
	public List<TeamDTO> searchTeamDes(String description) throws DAOException {
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		List<TeamDTO> dtoList=new ArrayList<TeamDTO>();
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_TEAM_SQL4);
			pStatement.setString(1,description);
			ResultSet rs = pStatement.executeQuery();
			while(rs.next())
			{
				TeamDTO dto = new TeamDTO();
				dto.setCode(rs.getString("teamCode"));
				dto.setManager(rs.getString("leaderCode"));
				dto.setName(rs.getString("name"));
				dto.setDescription(rs.getString("description"));
				dtoList.add(dto);
			}
			return dtoList;
		} catch (SQLException e) {
			throw new DAOException("Error search TeamDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}
	
	public List<TeamDTO> searchTeamName(String name, String description) throws DAOException {
	
		Connection connection = null;
		PreparedStatement pStatement = null;
		List<TeamDTO> dtoList=new ArrayList<TeamDTO>();
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_TEAM_SQL34_);
			pStatement.setString(1,name);
			pStatement.setString(2,description);
			ResultSet rs = pStatement.executeQuery();
			while(rs.next())
			{
				TeamDTO dto = new TeamDTO();
				dto.setCode(rs.getString("teamCode"));
				dto.setManager(rs.getString("leaderCode"));
				dto.setName(rs.getString("name"));
				dto.setDescription(rs.getString("description"));
				dtoList.add(dto);
			}
			return dtoList;
		} catch (SQLException e) {
			throw new DAOException("Error search TeamDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}
	
	public List<TeamDTO> searchTeamManager(String manager) throws DAOException {
	
		System.out.println("DB");
		Connection connection = null;
		PreparedStatement pStatement = null;
		List<TeamDTO> dtoList=new ArrayList<TeamDTO>();
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_TEAM_SQL2);
			pStatement.setString(1,manager);
			ResultSet rs = pStatement.executeQuery();
			while(rs.next())
			{
				TeamDTO dto = new TeamDTO();
				dto.setCode(rs.getString("teamCode"));
				dto.setManager(rs.getString("leaderCode"));
				dto.setName(rs.getString("name"));
				dto.setDescription(rs.getString("description"));
				dtoList.add(dto);
			}
			return dtoList;
		} catch (SQLException e) {
			throw new DAOException("Error search TeamDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}
	
	public boolean deleteTeamCode(String code) throws DAOException{
	
		Connection connection = null;
		PreparedStatement pStatement = null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(DELETE_TEAM_SQL1);
			pStatement.setString(1, code);
			if(pStatement.executeUpdate()==1)return true;
			return false;
		} catch (SQLException e) {
			throw new DAOException("Error Delete TEAMDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}
	
	public int deleteTeamManager(String managerCode) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(DELETE_TEAM_SQL2);
			pStatement.setString(1, managerCode);
			return pStatement.executeUpdate();
			
		} catch (SQLException e) {
			throw new DAOException("Error Delete TEAMDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}
	
	public boolean updateTeamManager(String teamCode, String newManager) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(UPDATE_TEAM_SQL21);
			pStatement.setString(1, newManager);
			pStatement.setString(2, teamCode);
			if(pStatement.executeUpdate()==0)return false;
			return true;
		} catch (SQLException e) {
			throw new DAOException("Error updating TEAM. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}
	
	public boolean updateTeamName(String teamCode, String newName) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(UPDATE_TEAM_SQL31);
			pStatement.setString(1, newName);
			pStatement.setString(2, teamCode);
			if(pStatement.executeUpdate()==0)return false;
			return true;
		} catch (SQLException e) {
			throw new DAOException("Error updating TEAM. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}
	
	public boolean updateTeamDes(String teamCode, String newDes) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(UPDATE_TEAM_SQL41);
			pStatement.setString(1, newDes);
			pStatement.setString(2, teamCode);
			if(pStatement.executeUpdate()==0)return false;
			return true;
		} catch (SQLException e) {
			throw new DAOException("Error updating TEAM. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}
	
	
	public boolean updateTeam(String teamCode, String newManager, String newDes) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(UPDATE_TEAM_SQL241);
			pStatement.setString(1, newManager);
			pStatement.setString(2, newDes);
			pStatement.setString(3, teamCode);
			if(pStatement.executeUpdate()==0)return false;
			return true;
		} catch (SQLException e) {
			throw new DAOException("Error updating TEAM. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}
	
	public boolean updateTeam(String teamCode, String newManager, String newName, String newDes) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(UPDATE_TEAM_SQL);
			pStatement.setString(1, newManager);
			pStatement.setString(2, newName);
			pStatement.setString(3, newDes);
			pStatement.setString(4, teamCode);
			if(pStatement.executeUpdate()==0)return false;
			return true;
		} catch (SQLException e) {
			throw new DAOException("Error updating TEAM. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}
	

}
