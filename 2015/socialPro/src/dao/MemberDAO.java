package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import dto.EnrollMemberDTO;
import dto.MemberDTO;

import socialProExceptions.DAOException;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : MemberDAO.java
//  @ Date : 2015-07-28
//  @ Author : 
//
//




public class MemberDAO extends BaseDAO{
	
	private static final String INSERT_MEMBER_SQL = 
			"insert into member_tb(MEMBERCODE, NICKNAME, EMAIL, PW, school, ENTRANCEYEAR) "+ "values(?, ?, ?,?,?,?)";
	private static final String MEMBER_SEQ = 
			"select member_seq.nextval from dual";
	
	private static final String UPDATE_MEMBER_SQL21 = "update member_tb set NICKNAME=? "+ "where MEMBERCODE=?";
	private static final String UPDATE_MEMBER_SQL241 = "update member_tb set NICKNAME=?,pw=? "+ "where MEMBERCODE=?";
	
	private static final String SELECT_MEMBER_SQL1 = "select * FROM member_tb where MEMBERCODE=?";
	private static final String SELECT_MEMBER_SQL2 = "select * FROM member_tb where NICKNAME=?";
	private static final String SELECT_MEMBER_SQL23 = "select * FROM member_tb where NICKNAME=? and EMAIL=?";
	private static final String SELECT_MEMBER_SQL3 = "select * FROM member_tb where EMAIL=?";
	private static final String SELECT_MEMBER_SQL34 = "select * FROM member_tb where EMAIL=? and pw=?";
	private static final String SELECT_MEMBER_SQL5 = "select * FROM member_tb where SHCOOL=?";
	private static final String SELECT_MEMBER_SQL56 = "select * FROM member_tb where SHCOOL=? and ENTRANCEYEAR=?";
	private static final String SELECT_MEMBER_SQL6 = "select * FROM member_tb where ENTRANCEYEAR=?";

	private static final String DELETE_MEMBER_SQL1 = "DELETE FROM member_tb WHERE  MEMBERCODE=?";
	private static final String DELETE_MEMBER_SQL34 = "DELETE FROM member_tb WHERE  EMAIL=? and pw=?";

	
	public String insertMember(EnrollMemberDTO dto) throws DAOException{
	
		System.out.println("insertMember start");
		Connection connection = null;
		PreparedStatement pStatement = null;
		String code=this.makeCode();
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(INSERT_MEMBER_SQL);
			pStatement.setString(1, code);
			pStatement.setString(2, dto.getNickName());
			pStatement.setString(3, dto.getEmail());
			pStatement.setString(4, dto.getPw());
			pStatement.setString(5, dto.getSchool());
			pStatement.setInt(6, dto.getEntranceYear());
			if(pStatement.executeUpdate()==1)return code;
		} catch (SQLException e) {
			throw new DAOException("Error adding member. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
		return null;
	}
	
	private String makeCode() throws DAOException {
		// TODO Auto-generated method stub
		Connection connection = null;
		PreparedStatement pStatement = null;
		String code=null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(MEMBER_SEQ);
			ResultSet rs = pStatement.executeQuery();
			if(rs.next()){
				code=new String();
				code="member_"+rs.getString("nextval");
			}
			System.out.println(code);
		
		} catch (SQLException e) {
			throw new DAOException("Error makeCode memberDAO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
		return code;
	}
	
	public MemberDTO searchMemberCode(String code) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		MemberDTO dto=new MemberDTO();
		ResultSet rs=null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_MEMBER_SQL1);
			pStatement.setString(1,code);
			rs = pStatement.executeQuery();
			while(rs.next())
			{
				dto.setCode(rs.getString("memberCode"));
				dto.setEmail(rs.getString("email"));
				dto.setNickName(rs.getString("nickName"));
				dto.setPw(rs.getString("pw"));
				dto.setSchool(rs.getString("school"));
				dto.setEntranceYear(rs.getInt("ENTRANCEYEAR"));
			}
		} catch (SQLException e) {
			throw new DAOException("Error search MemberDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
		return dto;
	}
	
	public MemberDTO searchMemberNickName(String nickName) throws DAOException{
	
		Connection connection = null;
		PreparedStatement pStatement = null;
		MemberDTO dto=null;
		ResultSet rs=null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_MEMBER_SQL2);
			pStatement.setString(1,nickName);
			rs = pStatement.executeQuery();
			while(rs.next())
			{
				dto = new MemberDTO();
				dto.setCode(rs.getString("memberCode"));
				dto.setEmail(rs.getString("email"));
				dto.setNickName(rs.getString("nickName"));
				dto.setPw(rs.getString("pw"));
				dto.setSchool(rs.getString("school"));
				dto.setEntranceYear(rs.getInt("ENTRANCEYEAR"));
			}
			return dto;
		} catch (SQLException e) {
			throw new DAOException("Error search MemberDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
		
	}
	
	public MemberDTO searchMemberEmail(String email) throws DAOException{
	
		System.out.println("here searchMemberEmail MemberDAO");
		Connection connection = null;
		PreparedStatement pStatement = null;
		MemberDTO dto=null;
		ResultSet rs = null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_MEMBER_SQL3);
			pStatement.setString(1,email);
			rs = pStatement.executeQuery();
			while(rs.next())
			{
				dto=new MemberDTO();
				dto.setCode(rs.getString("memberCode"));
				dto.setEmail(rs.getString("email"));
				dto.setNickName(rs.getString("nickName"));
				dto.setPw(rs.getString("pw"));
				dto.setSchool(rs.getString("school"));
				dto.setEntranceYear(rs.getInt("ENTRANCEYEAR"));
			}
		} catch (SQLException e) {
			throw new DAOException("Error search MemberDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
		return dto;
	}
	
	public MemberDTO searchMemberLoginInfo(String email,String pw) throws DAOException{
	
		Connection connection = null;
		PreparedStatement pStatement = null;
		MemberDTO dto=new MemberDTO();
		ResultSet rs=null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_MEMBER_SQL34);
			pStatement.setString(1,email);
			pStatement.setString(2,pw);
			 rs = pStatement.executeQuery();
			while(rs.next())
			{
				dto.setCode(rs.getString("memberCode"));
				dto.setEmail(rs.getString("email"));
				dto.setNickName(rs.getString("nickName"));
				dto.setPw(rs.getString("pw"));
				dto.setSchool(rs.getString("school"));
				dto.setEntranceYear(rs.getInt("ENTRANCEYEAR"));
			}
			System.out.println("db"+dto.getCode());
		} catch (SQLException e) {
			throw new DAOException("Error search MemberDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
		return dto;
	}
	
	public List<MemberDTO> searchMemberSchool(String school) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		List<MemberDTO> dtoList = new ArrayList<MemberDTO>();
		MemberDTO dto=new MemberDTO();
		ResultSet rs=null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_MEMBER_SQL5);
			pStatement.setString(1,school);
			 rs = pStatement.executeQuery();
			while(rs.next())
			{
				dto.setCode(rs.getString("memberCode"));
				dto.setEmail(rs.getString("email"));
				dto.setNickName(rs.getString("nickName"));
				dto.setPw(rs.getString("pw"));
				dto.setSchool(rs.getString("school"));
				dto.setEntranceYear(rs.getInt("ENTRANCEYEAR"));
				dtoList.add(dto);
			}
		} catch (SQLException e) {
			throw new DAOException("Error search MemberDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
		return dtoList;
	}
	
	public List<MemberDTO> searchMemberSchool(String school,int entranceYear) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		List<MemberDTO> dtoList = new ArrayList<MemberDTO>();
		MemberDTO dto=new MemberDTO();
		ResultSet rs=null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_MEMBER_SQL56);
			pStatement.setString(1,school);
			pStatement.setInt(2, entranceYear);
			 rs = pStatement.executeQuery();
			while(rs.next())
			{
				dto.setCode(rs.getString("memberCode"));
				dto.setEmail(rs.getString("email"));
				dto.setNickName(rs.getString("nickName"));
				dto.setPw(rs.getString("pw"));
				dto.setSchool(rs.getString("school"));
				dto.setEntranceYear(rs.getInt("ENTRANCEYEAR"));
				dtoList.add(dto);
			}
		} catch (SQLException e) {
			throw new DAOException("Error search MemberDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
		return dtoList;
	}
	
	public List<MemberDTO> searchMemberEntranceYear(int entranceYear) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		List<MemberDTO> dtoList = new ArrayList<MemberDTO>();
		MemberDTO dto=new MemberDTO();
		ResultSet rs=null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_MEMBER_SQL6);
			pStatement.setInt(1, entranceYear);
			 rs = pStatement.executeQuery();
			while(rs.next())
			{
				dto.setCode(rs.getString("memberCode"));
				dto.setEmail(rs.getString("email"));
				dto.setNickName(rs.getString("nickName"));
				dto.setPw(rs.getString("pw"));
				dto.setSchool(rs.getString("school"));
				dto.setEntranceYear(rs.getInt("ENTRANCEYEAR"));
				dtoList.add(dto);
			}
		} catch (SQLException e) {
			throw new DAOException("Error search MemberDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
		return dtoList;
	}
	
	public boolean deleteMember(String code) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(DELETE_MEMBER_SQL1);
			pStatement.setString(1, code);
			if(pStatement.executeUpdate()==1)return true;
			return false;
		} catch (SQLException e) {
			throw new DAOException("Error Delete Member. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	
	}
	
	public boolean deleteMember(String email,String pw) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(DELETE_MEMBER_SQL34);
			pStatement.setString(1, email);
			pStatement.setString(2, pw);
			if(pStatement.executeUpdate()==1)return true;
			return false;
		} catch (SQLException e) {
			throw new DAOException("Error Delete Member. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	
	}
	
	public boolean modifyMemberNickName(String code, String newNickName, String newPw) throws DAOException{
	
		Connection connection = null;
		PreparedStatement pStatement = null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(UPDATE_MEMBER_SQL241);
			pStatement.setString(1, newNickName);
			pStatement.setString(2, newPw);
			pStatement.setString(3, code);
			if(pStatement.executeUpdate()==0)return false;
			return true;
		} catch (SQLException e) {
			throw new DAOException("Error updating Member. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}
	
	public boolean modifyMemberNickName(String code, String newNickName) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(UPDATE_MEMBER_SQL21);
			pStatement.setString(1, newNickName);
			pStatement.setString(2, code);
			if(pStatement.executeUpdate()==0)return false;
			return true;
		} catch (SQLException e) {
			throw new DAOException("Error updating Member. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}
}
