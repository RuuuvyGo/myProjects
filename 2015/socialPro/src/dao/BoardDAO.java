package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import socialProExceptions.DAOException;


//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : BoardInfoDAO.java
//  @ Date : 2015-07-28
//  @ Author : 
//
//
import dto.BoardDTO;




public class BoardDAO extends BaseDAO{
	
	private static final String BOARD_SEQ = 
			"select BOARD_seq.nextval from dual";
	private static final String INSERT_BOARD_SQL = 
			"insert into BOARD_tb(BOARDCODE, TITLE, CONTENT, MEMBERCODE, INSERTDATE,RECOMMEND) values(?,?,?,?,to_timeStamp(?, 'YYYY-MM-DD HH24:MI:SS.ff3'),?)";
	
	private static final String UPDATE_BOARD_SQL1 = "update BOARD_tb set TITLE=?, CONTENT=?, alterDate=to_timeStamp(?, 'YYYY-MM-DD HH24:MI:SS.ff3'), recommend=? where BOARDCODE=?";
	
	private static final String SELECT_BOARD_SQL = "select BOARDCODE, TITLE, CONTENT, MEMBERCODE, TAGLIST, to_timeStamp(INSERTDATE, 'YYYY-MM-DD HH24:MI:SS.ff3') as INSERTDATE, to_timeStamp(ALTERDATE, 'YYYY-MM-DD HH24:MI:SS.ff3') as ALTERDATE,RECOMMEND FROM BOARD_tb where ";
	private static final String SELECT_BOARD_SQL1 = "select BOARDCODE, TITLE, CONTENT, MEMBERCODE, TAGLIST, to_timeStamp(INSERTDATE, 'YYYY-MM-DD HH24:MI:SS.ff3') as INSERTDATE, to_timeStamp(ALTERDATE, 'YYYY-MM-DD HH24:MI:SS.ff3') as ALTERDATE,RECOMMEND FROM BOARD_tb where BOARDCODE=?";
	private static final String SELECT_BOARD_SQL4 = "select BOARDCODE, TITLE, CONTENT, MEMBERCODE, TAGLIST, to_timeStamp(INSERTDATE, 'YYYY-MM-DD HH24:MI:SS.ff3') as INSERTDATE, to_timeStamp(ALTERDATE, 'YYYY-MM-DD HH24:MI:SS.ff3') as ALTERDATE,RECOMMEND FROM BOARD_tb where MEMBERCODE=?";
	
	private static final String DELETE_BOARD_SQL1 = "DELETE FROM BOARD_tb WHERE  BOARDCODE=?";
	private static final String DELETE_BOARD_SQL4 = "DELETE FROM BOARD_tb WHERE  MEMBERCODE=?";
	
	private String makeCode() throws DAOException {
		// TODO Auto-generated method stub
		Connection connection = null;
		PreparedStatement pStatement = null;
		ResultSet rs=null;
		String code=null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(BOARD_SEQ);
			rs = pStatement.executeQuery();
			if(rs.next()){
				code=new String();
				code="board_"+rs.getString("nextval");
			}
			System.out.println(code);
		
		} catch (SQLException e) {
			throw new DAOException("Error makeCode BoardDAO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
		return code;
	}
	
	
	public String insertBoard(BoardDTO dto) throws DAOException {
	
		System.out.println("insertTeam start");
		Connection connection = null;
		PreparedStatement pStatement = null;
		String code=this.makeCode();
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(INSERT_BOARD_SQL);
			pStatement.setString(1, code);
			pStatement.setString(2, dto.getTitle());
			pStatement.setString(3, dto.getContent());
			pStatement.setString(4, dto.getMemberCode());
			pStatement.setString(5, dto.getInsertDate());
			pStatement.setInt(6, dto.getRecommend());
			if(pStatement.executeUpdate()==1)return code;
		} catch (SQLException e) {
			throw new DAOException("Error adding BoardDAO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
		return null;
	}
	
	public BoardDTO searchBoardCode(String boardCode) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		ResultSet rs=null;
		BoardDTO dto = new BoardDTO();
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_BOARD_SQL1);
			pStatement.setString(1,boardCode);
			rs = pStatement.executeQuery();
			while(rs.next())
			{
				dto.setBoardCode(rs.getString("BOARDCODE"));
				dto.setTitle(rs.getString("TITLE"));
				dto.setContent(rs.getString("CONTENT"));
				dto.setMemberCode(rs.getString("MEMBERCODE"));
				dto.setAlterDate(rs.getString("INSERTDATE"));
				dto.setRecommend(rs.getInt("RECOMMEND"));
			}
			if(dto.getBoardCode()==null)return null;
			return dto;
		} catch (SQLException e) {
			throw new DAOException("Error search BoardDAO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
	}
	
	public List<BoardDTO> searchBoardCode(List<String> boardCodeList) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		ResultSet rs=null;
		List<BoardDTO> dtoList = new ArrayList<BoardDTO>();
		
		try {
			connection = getConnection();
			String sql = SELECT_BOARD_SQL;
			int cnt = boardCodeList.size();
			for(int i=0;i<cnt-1;i++){
				sql+="boardCode = ? or";
			}sql+="boardCode = ?";
			pStatement = connection.prepareStatement(sql);
			for(int i=1;i<=cnt;i++){
				pStatement.setString(i,boardCodeList.get(i));
			}
			
			rs = pStatement.executeQuery();
			while(rs.next())
			{
				BoardDTO dto = new BoardDTO();
				dto.setBoardCode(rs.getString("BOARDCODE"));
				dto.setTitle(rs.getString("TITLE"));
				dto.setContent(rs.getString("CONTENT"));
				dto.setMemberCode(rs.getString("MEMBERCODE"));
				dto.setAlterDate(rs.getString("INSERTDATE"));
				dto.setRecommend(rs.getInt("RECOMMEND"));
				dtoList.add(dto);
			}
			
			return dtoList;
		} catch (SQLException e) {
			throw new DAOException("Error search BoardDAO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
	}
	
	public List<BoardDTO> searchBoardCode(List<String> boardCodeList,String title) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		ResultSet rs=null;
		List<BoardDTO> dtoList = new ArrayList<BoardDTO>();
		
		try {
			connection = getConnection();
			String sql = SELECT_BOARD_SQL+"(";
			int cnt = boardCodeList.size();
			for(int i=0;i<cnt-1;i++){
				sql+="boardCode = ? or";
			}sql+="boardCode = ?) and title liek %?%";
			pStatement = connection.prepareStatement(sql);
			for(int i=1;i<=cnt;i++){
				pStatement.setString(i,boardCodeList.get(i));
			}pStatement.setString(cnt+1,title);
			
			rs = pStatement.executeQuery();
			while(rs.next())
			{
				BoardDTO dto = new BoardDTO();
				dto.setBoardCode(rs.getString("BOARDCODE"));
				dto.setTitle(rs.getString("TITLE"));
				dto.setContent(rs.getString("CONTENT"));
				dto.setMemberCode(rs.getString("MEMBERCODE"));
				dto.setAlterDate(rs.getString("INSERTDATE"));
				dto.setRecommend(rs.getInt("RECOMMEND"));
				dtoList.add(dto);
			}
			
			return dtoList;
		} catch (SQLException e) {
			throw new DAOException("Error search BoardDAO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
	}
	
    public List<BoardDTO> searchMemberCode(String memberCode) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		ResultSet rs=null;
		List<BoardDTO> dtoList = new ArrayList<BoardDTO>();
		
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_BOARD_SQL4);
			pStatement.setString(1,memberCode);
			rs = pStatement.executeQuery();
			while(rs.next())
			{
				BoardDTO dto = new BoardDTO();
				dto.setBoardCode(rs.getString("BOARDCODE"));
				dto.setTitle(rs.getString("TITLE"));
				dto.setContent(rs.getString("CONTENT"));
				dto.setMemberCode(rs.getString("MEMBERCODE"));
				dto.setAlterDate(rs.getString("INSERTDATE"));
				dto.setRecommend(rs.getInt("RECOMMEND"));
				dtoList.add(dto);
			}

			return dtoList;
		} catch (SQLException e) {
			throw new DAOException("Error search BoardDAO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
	}
    
    public boolean deleteBoardCode(String boardCode)throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(DELETE_BOARD_SQL1);
			pStatement.setString(1, boardCode);
			if(pStatement.executeUpdate()==1)return true;
			return false;
		} catch (SQLException e) {
			throw new DAOException("Error Delete BoardDAO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}
    
    public int deleteMemberCode(String memberCode)throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(DELETE_BOARD_SQL4);
			pStatement.setString(1, memberCode);
			return pStatement.executeUpdate();
		} catch (SQLException e) {
			throw new DAOException("Error Delete BoardDAO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}
    
    public boolean updateChecks(String alarmCode, BoardDTO newDTO)throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(UPDATE_BOARD_SQL1);
			pStatement.setString(1, newDTO.getTitle());
			pStatement.setString(2, newDTO.getContent());
			pStatement.setString(3, newDTO.getAlterDate());
			pStatement.setInt(4, newDTO.getRecommend());
			pStatement.setString(5, alarmCode);
			if(pStatement.executeUpdate()==0)return false;
			return true;
		} catch (SQLException e) {
			throw new DAOException("Error updating BoardDAO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}
}
