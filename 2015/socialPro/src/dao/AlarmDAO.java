package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import dto.AlarmDTO;
import socialProExceptions.DAOException;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : AlarmDAO.java
//  @ Date : 2015-07-28
//  @ Author : 
//
//




public class AlarmDAO extends BaseDAO{
	
	private static final String ALARM_SEQ = 
			"select ALARM_seq.nextval from dual";
	private static final String INSERT_ALARM_SQL = 
			"insert into ALARM_tb(ALARMCODE,TARGETCODE) values(?,?)";
	
	private static final String UPDATE_ALARM_SQL31 = "update ALARM_tb set checkDate=to_timeStamp(?,'yyyy-mm-dd hh24:mi:ss.ff3') where ALARMCODE=?";
	
	private static final String SELECT_ALARM_SQL1 = "select ALARMCODE,TARGETCODE, to_char(CHECKDATE,'yyyy-mm-dd hh24:mi:ss.ff3') as checkDate FROM ALARM_tb where ALARMCODE=?";
	private static final String SELECT_ALARM_SQL2 = "select ALARMCODE,TARGETCODE, to_char(CHECKDATE,'yyyy-mm-dd hh24:mi:ss.ff3') as checkDate FROM ALARM_tb where TARGETCODE=?";
	private static final String SELECT_ALARM_SQL3 = "select ALARMCODE,TARGETCODE, to_char(CHECKDATE,'yyyy-mm-dd hh24:mi:ss.ff3') as checkDate FROM ALARM_tb where CHECKDATE=to_timeStamp(?,'yyyy-mm-dd hh24:mi:ss.ff3')";
	
	
	private static final String DELETE_ALARM_SQL1 = "DELETE FROM ALARM_tb WHERE  ALARMCODE=?";
	private static final String DELETE_ALARM_SQL46 = "DELETE FROM ALARM_tb WHERE  SOURCECODE=? and CHECKDATE < to_timeStamp(?, 'YYYY-MM-DD HH24:MI:SS.ff3')";
	private static final String DELETE_ALARM_SQL6 = "DELETE FROM ALARM_tb WHERE  SOURCECODE=?";


///////////////////////////////////////  insert   ////////////////////////////////////////////////////////	
	
	private String makeCode() throws DAOException {
		// TODO Auto-generated method stub
		Connection connection = null;
		PreparedStatement pStatement = null;
		String code=null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(ALARM_SEQ);
			ResultSet rs = pStatement.executeQuery();
			if(rs.next()){
				code=new String();
				code="alarm_"+rs.getString("nextval");
			}
			System.out.println(code);
		
		} catch (SQLException e) {
			throw new DAOException("Error makeCode AlarmDAO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
		return code;
	}
	
	
	public String insertAlarm(AlarmDTO dto) throws DAOException {
	
		//ALARMCODE,SENDERCODE,RECEIVERCODE,TYPE, TITLE, CONTENT, SENDDATE, SOURCECODE
		
		System.out.println("insertTeam start");
		Connection connection = null;
		PreparedStatement pStatement = null;
		String code=this.makeCode();
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(INSERT_ALARM_SQL);
			pStatement.setString(1, code);
			pStatement.setString(2, dto.getTargetCode());
			if(pStatement.executeUpdate()==1)return code;
		} catch (SQLException e) {
			throw new DAOException("Error adding AlarmDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
		return null;
	}

///////////////////////////////////////  search   ////////////////////////////////////////////////////////
	
	public AlarmDTO searchAlarmCode(String alarmCode) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		ResultSet rs=null;
		AlarmDTO dto = new AlarmDTO();
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_ALARM_SQL1);
			pStatement.setString(1,alarmCode);
			rs = pStatement.executeQuery();
			return this.makeDTO(rs, dto);
		} catch (SQLException e) {
			throw new DAOException("Error search AlarmDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
	}
	

	public List<AlarmDTO> searchTargetCode(String targetCode) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		List<AlarmDTO> dtoList = new ArrayList<AlarmDTO>();
		ResultSet rs=null;		
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_ALARM_SQL2);
			pStatement.setString(1,targetCode);
			rs = pStatement.executeQuery();
			return this.makeDTOList(rs, dtoList);
		} catch (SQLException e) {
			throw new DAOException("Error search AlarmDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
	}

	
	public List<AlarmDTO> searchCheckDate(String checkDate) throws DAOException{
			
		Connection connection = null;
		PreparedStatement pStatement = null;
		List<AlarmDTO> dtoList = new ArrayList<AlarmDTO>();
		ResultSet rs=null;		
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_ALARM_SQL3);
			pStatement.setString(1,checkDate);
			rs = pStatement.executeQuery();
			return this.makeDTOList(rs, dtoList);
		} catch (SQLException e) {
			throw new DAOException("Error search AlarmDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
	}
	

///////////////////////////////////////  delete   ////////////////////////////////////////////////////////	
	
	public boolean deleteAlarmCode(String alarmCode)throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(DELETE_ALARM_SQL1);
			pStatement.setString(1, alarmCode);
			if(pStatement.executeUpdate()==1)return true;
			return false;
		} catch (SQLException e) {
			throw new DAOException("Error Delete AlarmDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}
	

	public int deleteSourceCode(String sourceCode,String checkDate)throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(DELETE_ALARM_SQL46);
			pStatement.setString(1, sourceCode);
			pStatement.setString(2, checkDate);
			return pStatement.executeUpdate();
		} catch (SQLException e) {
			throw new DAOException("Error Delete AlarmDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}
	
	public int deleteSourceCode(String sourceCode)throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(DELETE_ALARM_SQL6);
			pStatement.setString(1, sourceCode);
			return pStatement.executeUpdate();
		} catch (SQLException e) {
			throw new DAOException("Error Delete AlarmDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}


///////////////////////////////////////  update   ////////////////////////////////////////////////////////	
	
	public boolean updateChecks(String alarmCode, String checkDate)throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(UPDATE_ALARM_SQL31);
			pStatement.setString(1, checkDate);
			pStatement.setString(2, alarmCode);
			if(pStatement.executeUpdate()==0)return false;
			return true;
		} catch (SQLException e) {
			throw new DAOException("Error updating Alarm. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}
	
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	private List<AlarmDTO> makeDTOList(ResultSet rs, List<AlarmDTO> dtoList) throws SQLException{
		
		if(dtoList==null){dtoList = new ArrayList<AlarmDTO>();}
		while(rs.next())
		{
			String alarmCode = rs.getString("ALARMCODE");
			if(rs.wasNull()){
				return null;
			}
			dtoList.add(new AlarmDTO(alarmCode, rs.getString("TARGETCODE"), rs.getString("CHECKDATE")));
		}
		return dtoList;
	}
	
	private AlarmDTO makeDTO(ResultSet rs, AlarmDTO dto) throws SQLException{
		
		System.out.println("makeDTO...");
		dto=null;
		while(rs.next())
		{
			String alarmCode = rs.getString("ALARMCODE");
			if(rs.wasNull()){
				return null;
			}
			dto = new AlarmDTO(alarmCode, rs.getString("TARGETCODE"), rs.getString("CHECKDATE"));
		}
		return dto;
	}
}
