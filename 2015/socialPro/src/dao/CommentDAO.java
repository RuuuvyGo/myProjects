package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import socialProExceptions.DAOException;
import dto.CommentDTO;
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : CommentInfoDAO.java
//  @ Date : 2015-07-28
//  @ Author : 
//
//




public class CommentDAO extends BaseDAO{
	private static final String COMMENT_SEQ = 
			"select comment_seq.nextval from dual";
	private static final String INSERT_COMMENT_SQL = 
			"insert into comment_tb(COMMENTCODE	,TITLE, CONTENT, TARGETCODE, WRITERCODE, WRITEDATE) values(?,?,?,?,?, to_timestamp('?','yyyy-mm-dd hh24:mi:ss.ff3'))";
	
	private static final String UPDATE_COMMENT_SQL2481 = "update comment_tb set TITLE=?, DESCRIPTION=?, MERGE=? where COMMITCODE=?";
	
	private static final String SELECT_COMMENT_SQL1 = "select COMMENTCODE ,TITLE, CONTENT, TARGETCODE, WRITERCODE, to_timestamp(WRITEDATE,'yyyy-mm-dd hh24:mi:ss.ff3') as WRITEDATE FROM comment_tb where COMMENTCODE=?";
	private static final String SELECT_COMMENT_SQL2 = "select COMMENTCODE ,TITLE, CONTENT, TARGETCODE, WRITERCODE, to_timestamp(WRITEDATE,'yyyy-mm-dd hh24:mi:ss.ff3') as WRITEDATE FROM comment_tb where TARGETCODE=? order by WRITEDATE desc";
	private static final String SELECT_COMMENT_SQL3 = "select COMMENTCODE ,TITLE, CONTENT, TARGETCODE, WRITERCODE, to_timestamp(WRITEDATE,'yyyy-mm-dd hh24:mi:ss.ff3') as WRITEDATE FROM comment_tb where WRITERCODE=? order by WRITEDATE desc";
	private static final String SELECT_COMMENT_SQL4 = "select COMMENTCODE ,TITLE, CONTENT, TARGETCODE, WRITERCODE, to_timestamp(WRITEDATE,'yyyy-mm-dd hh24:mi:ss.ff3') as WRITEDATE FROM comment_tb where WRITEDATE=to_timeStamp(?,'yyyy-mm-dd hh24:mi:ss.ff3') order by WRITEDATE desc";
	
	private static final String DELETE_COMMENT_SQL1 = "DELETE FROM comment_tb WHERE  COMMITCODE=?";

///////////////////////////////////////  insert   ////////////////////////////////////////////////////////	
	
	private String makeCode() throws DAOException {
		// TODO Auto-generated method stub
		Connection connection = null;
		PreparedStatement pStatement = null;
		String code=null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(COMMENT_SEQ);
			ResultSet rs = pStatement.executeQuery();
			if(rs.next()){
				code=new String();
				code="comment_"+rs.getString("nextval");
			}
			System.out.println(code);
		
		} catch (SQLException e) {
			throw new DAOException("Error makeCode CommentDAO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
		return code;
	}
	
	
	public String insertAlarm(CommentDTO dto) throws DAOException {
	
		//ALARMCODE,SENDERCODE,RECEIVERCODE,TYPE, TITLE, CONTENT, SENDDATE, SOURCECODE
		
		System.out.println("insertTeam start");
		Connection connection = null;
		PreparedStatement pStatement = null;
		String code=this.makeCode();
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(INSERT_COMMENT_SQL);
			pStatement.setString(1, code);
			pStatement.setString(2, dto.getTitle());
			pStatement.setString(3, dto.getContent());
			pStatement.setString(4, dto.getTargetCode());
			pStatement.setString(5, dto.getWriterCode());
			pStatement.setString(6, dto.getWriteDate());
			if(pStatement.executeUpdate()==1)return code;
		} catch (SQLException e) {
			throw new DAOException("Error adding commentDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
		return null;
	}
	
/////////////////////////////////////  search   ////////////////////////////////////////////////////////	

	public CommentDTO searchCommentCode(String commentCode) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		ResultSet rs=null;
		CommentDTO dto = new CommentDTO();
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_COMMENT_SQL1);
			pStatement.setString(1,commentCode);
			rs = pStatement.executeQuery();
			return this.makeDTO(rs, dto);
		} catch (SQLException e) {
			throw new DAOException("Error search commentDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
	}
	

	public List<CommentDTO> searchTargetCode(String targetCode) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		List<CommentDTO> dtoList = new ArrayList<CommentDTO>();
		ResultSet rs=null;		
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_COMMENT_SQL2);
			pStatement.setString(1,targetCode);
			rs = pStatement.executeQuery();
			return this.makeDTOList(rs, dtoList);
		} catch (SQLException e) {
			throw new DAOException("Error search commentDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
	}

	
	public List<CommentDTO> searchWriterCode(String writerCode) throws DAOException{
			
		Connection connection = null;
		PreparedStatement pStatement = null;
		List<CommentDTO> dtoList = new ArrayList<CommentDTO>();
		ResultSet rs=null;		
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_COMMENT_SQL3);
			pStatement.setString(1,writerCode);
			rs = pStatement.executeQuery();
			return this.makeDTOList(rs, dtoList);
		} catch (SQLException e) {
			throw new DAOException("Error search commentDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
	}
	
	public List<CommentDTO> searchWriteDate(String writeDate) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		List<CommentDTO> dtoList = new ArrayList<CommentDTO>();
		ResultSet rs=null;		
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_COMMENT_SQL4);
			pStatement.setString(1,writeDate);
			rs = pStatement.executeQuery();
			return this.makeDTOList(rs, dtoList);
		} catch (SQLException e) {
			throw new DAOException("Error search commentDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
	}
	
	private List<CommentDTO> makeDTOList(ResultSet rs, List<CommentDTO> dtoList) throws SQLException{
		
		if(dtoList==null){dtoList = new ArrayList<CommentDTO>();}
		while(rs.next())
		{
			String alarmCode = rs.getString("COMMENTCODE");
			if(rs.wasNull()){
				return null;
			}
			dtoList.add(new CommentDTO(alarmCode, rs.getString("TITLE"), rs.getString("CONTENT"), rs.getString("TARGETCODE"), rs.getString("WRITERCODE"), rs.getString("WRITEDATE")));
		}
		return dtoList;
	}
	
	private CommentDTO makeDTO(ResultSet rs, CommentDTO dto) throws SQLException{
		
		System.out.println("makeDTO...");
		dto=null;
		while(rs.next())
		{
			String alarmCode = rs.getString("COMMENTCODE");
			if(rs.wasNull()){
				return null;
			}
			dto = new CommentDTO(alarmCode, rs.getString("TITLE"), rs.getString("CONTENT"), rs.getString("TARGETCODE"), rs.getString("WRITERCODE"), rs.getString("WRITEDATE"));
		}
		return dto;
	}
}
