package manager;

import java.io.File;
import java.text.ParseException;
import java.util.List;

import model.CopiedFolder;
import model.CopiedFolderList;
import model.OriginFolder;
import model.OriginFolderList;
import socialProExceptions.DAOException;
import socialProExceptions.FolderException;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : FolderSearchable.java
//  @ Date : 2015-07-28
//  @ Author : 
//
//




public interface FolderSearchable {
	
	//just search
	public OriginFolder justSearchFolderPath(String folderPath) throws DAOException, ParseException, FolderException;
	public OriginFolder justSearchFolderCode(String folderCode) throws DAOException, ParseException, FolderException;
	
	//search Only OriginFolder or Null
	public OriginFolder searchOnlyOriFoByOriFoPath(String oriFolderPath) throws DAOException, ParseException, FolderException;
	public OriginFolder searchOnlyOriFoByOriFoCode(String oriFolderCode) throws DAOException, ParseException, FolderException;
	public OriginFolderList searchOnlyOriFoByOriFoPath(List<String> oriFolderPathList) throws DAOException, ParseException, FolderException;
	public OriginFolderList searchOnlyOriFoByOriFoCode(List<String> oriFolderCodeList) throws DAOException, ParseException, FolderException;
	public OriginFolderList searchOnlySiblingOriFoByOriFoPath(String oriFolderPath) throws DAOException, ParseException, FolderException;
	public OriginFolderList searchOnlySiblingOriFoByOriFoCode(String oriFolderCode) throws DAOException, ParseException, FolderException;
	public OriginFolderList searchOnlyChOriFoByPFoOriPath(String oriParentFolderPath) throws DAOException, ParseException, FolderException;
	public OriginFolderList searchOnlyChOriFoByPFoOriCode(String oriParentFolderCode) throws DAOException, ParseException, FolderException;
	public OriginFolderList searchOnlyAllOriFoByPFoOriPath(String oriParentFolderPath) throws DAOException, ParseException, FolderException;
	public OriginFolderList searchOnlyAllOriFoByPFoOriCode(String oriParentFolderCode) throws DAOException, ParseException, FolderException;
	
////////return only CopiedFolder or null
	public CopiedFolder searchOnlyCopiedFolderPath(String folderPath)throws DAOException, ParseException, FolderException;
	public CopiedFolder searchOnlyCopiedFolderCode(String folderCode)throws DAOException, ParseException, FolderException;
	public CopiedFolderList searchOnlyCopiedFolderPath(List<String> folderPathList)throws DAOException, ParseException, FolderException;
	public CopiedFolderList searchOnlyCopiedFolderCode(List<String> folderCodeList)throws DAOException, ParseException, FolderException;

	
	//search exactlly
	public File searchFolderByFolderPath(String folderPath) throws DAOException, ParseException, FolderException;
	public File searchFolderByFolderCode(String folderCode) throws DAOException, ParseException, FolderException;
	//childs
	public List<File> searchFolderByPFolderPath(String parentFolderPath) throws DAOException, ParseException, FolderException;
	public List<File> searchFolderByPFolderCode(String parentFolderCode) throws DAOException, ParseException, FolderException;
	//siblings
	public List<File> searchSiblingFolderByPFolderPath(String folderPath) throws DAOException, ParseException, FolderException;
	public List<File> searchSiblingFolderByPFolderCode(String folderCode) throws DAOException, ParseException, FolderException;
	//all children
	public List<File> searchAllFoldersByPFCode(String parentFolderCode)throws DAOException, ParseException, FolderException;
	public List<File> searchAllFoldersByPFPath(String parentFolderPath)throws DAOException, ParseException, FolderException;
	
	
	//
	
}
