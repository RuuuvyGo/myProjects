package manager;

import java.io.File;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;

import model.CommitInfo;
import model.CopiedFolder;
import model.CopiedFolderList;
import model.OriginFolder;
import model.OriginFolderList;
import model.OriginProject;
import socialProExceptions.CommitExcetion;
import socialProExceptions.DAOException;
import socialProExceptions.FolderException;
import socialProExceptions.ProjectException;
import socialProExceptions.TeamException;

import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.SftpException;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : FolderManager.java
//  @ Date : 2015-07-28
//  @ Author : 
//
//




public class FolderManager implements FolderSearchable, FolderDeletable, FolderCreatable, FolderModifiable {

	private static FolderManager INSTANCE;
	private Map<String,File> folderMap;
	
	static{
		INSTANCE = new FolderManager();
	}
	
	private FolderManager(){
		this.folderMap = new HashMap<String, File>();
	}
		
	
	public static FolderManager getINSTANCE() {
		if(INSTANCE==null)INSTANCE=new FolderManager();
		return INSTANCE;
	}

	@Override
	public String insertOriginFolder(OriginFolder folder)throws DAOException, ParseException, SftpException, JSchException, CommitExcetion, FolderException{
		
		String folderPath = folder.getPath();
		if(this.folderMap.containsKey(folderPath))this.folderMap.remove(folderPath);
		this.folderMap.put(folderPath, folder);
		return folderPath;
	}
	
	@Override
	public List<String> insertOriginFolderList(OriginFolderList folderList)throws DAOException, ParseException, SftpException, JSchException, CommitExcetion, FolderException{
		String folderPath;
		List<String> resList = new ArrayList<String>();
		for(OriginFolder folder : folderList.getList()){
			folderPath = folder.getPath();
			if(this.folderMap.containsKey(folderPath))this.folderMap.remove(folderPath);
			this.folderMap.put(folderPath, folder);
			resList.add(folderPath);
		}
		return resList;
	}
	
	@Override
	public String insertCopiedFolder(CopiedFolder folder)throws DAOException, ParseException, SftpException, JSchException, CommitExcetion, FolderException{

		String folderPath = folder.getPath();
		if(this.folderMap.containsKey(folderPath))this.folderMap.remove(folderPath);
		this.folderMap.put(folderPath, folder);
		return folderPath;
	}
	
	@Override
	public List<String> insertCopiedFolderList(CopiedFolderList folderList)throws DAOException, ParseException, SftpException, JSchException, CommitExcetion, FolderException{
		
		String folderPath;
		List<String> resList = new ArrayList<String>();
		for(OriginFolder folder : folderList.getList()){
			folderPath = folder.getPath();
			if(this.folderMap.containsKey(folderPath))this.folderMap.remove(folderPath);
			this.folderMap.put(folderPath, folder);
			resList.add(folderPath);
		}
		return resList;
	}
	
	
	@Override
	public OriginFolder createOriginFolderByPFCode(String ownerCode,String ownerName, String name, String description,String parentFolderCode) throws DAOException, ParseException, SftpException, JSchException, FolderException {
		// TODO Auto-generated method stub
		
		StringTokenizer tokens = new StringTokenizer(parentFolderCode,"_");
		if(tokens.nextElement().equals("project")){
			OriginProject project=ProjectDBManager.getINSTANCE().justSearchProjectFolderCode(parentFolderCode);
			if(project!=null){
				//manager.searchFolderPath(project.getPath())
				parentFolderCode = project.getParentFolder();
				System.out.println(parentFolderCode);
			}
		}
		
		if(FolderDBManager.getINSTANCE().checkFolderNameByPCode(name, parentFolderCode))return null;
		
		OriginFolder folder=FolderDBManager.getINSTANCE().insertOriginFolderByPFCode(ownerCode, ownerName, name, description, parentFolderCode);
		if(folder!=null)this.folderMap.put(folder.getPath(), folder);
		
		return folder;
	}
	
	@Override
	public Map<String,CopiedFolder> createCopiedFolderByPFCode(String parentFolderPath,String ownerCode,String ownerName, String name, String description)throws DAOException, ParseException, SftpException, JSchException, FolderException, TeamException, ProjectException{
		
		Map<String,Object[]> resMap = new HashMap<String, Object[]>();
		
		//get parentFolder (type: originFolder)
		OriginFolder parentInfo = FolderManager.getINSTANCE().searchOnlyOriFoByOriFoPath(parentFolderPath);
		if(parentInfo==null){
			CopiedFolder tmpInfo = FolderManager.getINSTANCE().searchOnlyCopiedFolderPath(parentFolderPath);
			parentInfo = FolderManager.getINSTANCE().searchOnlyOriFoByOriFoCode(tmpInfo.getOriginCode());
			System.out.println("originFolder Code ???  "+parentInfo.getCode()+"    originOwner  ::    "+parentInfo.getPath());
		}
		
		Map<String,CopiedFolder> resFolderList = FolderDBManager.getINSTANCE().insertTeamFolder(parentInfo, ownerCode, ownerName, name, description, parentInfo.getPath()+"\\"+name);
		if(resFolderList.isEmpty())throw new FolderException("Error insert folder...");
		for(CopiedFolder cpFolder : resFolderList.values()){
			if(cpFolder instanceof CopiedFolder)this.folderMap.put(cpFolder.getPath(), cpFolder);
			else this.folderMap.put(cpFolder.getPath(), ((OriginFolder)cpFolder));
		}
		return resFolderList;
	}
	
	@Override
	public OriginFolder createOriginTeamCooperFolder(String parentFolderPath,String ownerCode,String ownerName, String name, String description)throws DAOException, ParseException, SftpException, JSchException, FolderException, TeamException, ProjectException{
		
		//get parentFolder (type: originFolder)
		OriginFolder parentInfo = FolderManager.getINSTANCE().searchOnlyOriFoByOriFoPath(parentFolderPath);
		if(parentInfo==null){
			CopiedFolder tmpInfo = FolderManager.getINSTANCE().searchOnlyCopiedFolderPath(parentFolderPath);
			parentInfo = FolderManager.getINSTANCE().searchOnlyOriFoByOriFoCode(tmpInfo.getOriginCode());
			System.out.println("originFolder Code ???  "+parentInfo.getCode()+"    originOwner  ::    "+parentInfo.getPath());
		}
		OriginFolder oriFolder = FolderDBManager.getINSTANCE().insertOriginTeamFolderByPFCode(parentInfo, ownerCode, ownerName, name, description, parentInfo+"\\"+name);
		if(!this.folderMap.containsKey(oriFolder.getPath()))this.folderMap.put(oriFolder.getPath(), oriFolder);
		return oriFolder;
	}
	
	@Override
	public String createOriginFolder(String ownerCode, String ownerName,String name, String description, String path) throws DAOException,
			ParseException, SftpException, JSchException, FolderException {
		// TODO Auto-generated method stub
		
		if(FolderDBManager.getINSTANCE().checkFolderPath(path))return null;		

		OriginFolder folder=FolderDBManager.getINSTANCE().insertOriginFolder(ownerCode, ownerName, name, description, path);
		this.folderMap.put(folder.getPath(), folder);
		return folder.getCode();
	}

	@Override
	public String createFolder(String memberCode, String nickName, String name,
			String description, String path) throws DAOException,ParseException, SftpException, JSchException, FolderException {
		// TODO Auto-generated method stub
		
		if(FolderDBManager.getINSTANCE().checkFolderPath(path))return null;
		
		OriginFolder folder = FolderDBManager.getINSTANCE().insertOriginFolder(memberCode, nickName, name, description, path);
		this.folderMap.put(folder.getPath(), folder);
		return folder.getCode();
	}

	@Override
	public String createFolder(String memberCode, String nickName, String name,String path) throws DAOException, ParseException, SftpException, JSchException, FolderException {
		// TODO Auto-generated method stub
		return this.createOriginFolder(memberCode, nickName, name, "", path);
	}
	
	@Override
	public boolean insertCopiedFolder(List<CopiedFolder> cfList){
		
		for(CopiedFolder cf : cfList){
			if(!this.folderMap.containsKey(cf.getCode()))this.folderMap.put(cf.getCode(), cf);
		}
		return true;
	}
	
	@Override
	public Map<OriginFolder,CommitInfo> copyFolder(String copyFolderCode, String commitCode, String commitorCode, String pFolderPath, String memberCode) throws DAOException, ParseException, FolderException, CommitExcetion, SftpException, JSchException{
		
		System.out.println("\n           FolderManager      copyFolder     line      206");
		File folder = this.searchFolderByFolderCode(copyFolderCode);
		
		Map<OriginFolder,CommitInfo> resMaps = FolderDBManager.getINSTANCE().copyFolder(copyFolderCode, commitCode, pFolderPath, memberCode);
		if(resMaps.isEmpty())return resMaps;
		OriginFolder resOriFolder = resMaps.keySet().iterator().next();
		OriginFolder oriFolder = (OriginFolder)folder;
		
		CopiedFolder cpFolder = new CopiedFolder(oriFolder,resOriFolder.getCode(),resOriFolder.getParentFolder());
		
		if(this.folderMap.containsKey(copyFolderCode))this.folderMap.remove(copyFolderCode);
		this.folderMap.put(copyFolderCode, cpFolder);
		this.folderMap.put(resOriFolder.getCode(), resOriFolder);
		
		return resMaps;
	}
	

////////////////////////////////////////////////////////    search
	
//////////////just search
	@Override
	public OriginFolder justSearchFolderPath(String folderPath) throws DAOException, ParseException, FolderException{
		
		return FolderDBManager.getINSTANCE().justSearchOriginFolderPath(folderPath);
	}
	@Override
	public OriginFolder justSearchFolderCode(String folderCode) throws DAOException, ParseException, FolderException{
		
		return FolderDBManager.getINSTANCE().justSearchOriginFolderCode(folderCode);
	}
	
////////////////search Only OriginFolder or Null
	@Override
	public OriginFolder searchOnlyOriFoByOriFoPath(String oriFolderPath) throws DAOException, ParseException, FolderException{
		
		if(this.folderMap.containsKey(oriFolderPath)){
			File file = this.folderMap.get(oriFolderPath);
			if(file instanceof CopiedFolder)return null;
			else return (OriginFolder)file;
		}else{
			OriginFolder oriFolder = FolderDBManager.getINSTANCE().searchOnlyOriginFolderPath(oriFolderPath);
			if(oriFolder!=null){
				this.folderMap.put(oriFolderPath, oriFolder);
			}
			return oriFolder;
		}
	}
	@Override
	public OriginFolder searchOnlyOriFoByOriFoCode(String oriFolderCode) throws DAOException, ParseException, FolderException{

		OriginFolder oriFolder = FolderDBManager.getINSTANCE().searchOnlyOriginFolderCode(oriFolderCode);
		if(oriFolder!=null){
			if(this.folderMap.containsKey(oriFolder.getPath()))this.folderMap.remove(oriFolder.getPath());
			this.folderMap.put(oriFolder.getPath(), oriFolder);
		}
		return oriFolder;
	}
	@Override
	public OriginFolderList searchOnlyOriFoByOriFoPath(List<String> oriFolderPathList) throws DAOException, ParseException, FolderException{
		
		OriginFolderList resList = new OriginFolderList();
		
		for(String oriFolderPath : oriFolderPathList){

			if(this.folderMap.containsKey(oriFolderPath)){
				File file = this.folderMap.get(oriFolderPath);
				if(file instanceof CopiedFolder)return null;
				resList.addOriginFolder((OriginFolder)file);
			}else{
				OriginFolder oriFolder = FolderDBManager.getINSTANCE().searchOnlyOriginFolderPath(oriFolderPath);
				if(oriFolder!=null){
					this.folderMap.put(oriFolderPath, oriFolder);
				}
				resList.addOriginFolder(oriFolder);
			}
		}
		
		return resList;
	}
	@Override
	public OriginFolderList searchOnlyOriFoByOriFoCode(List<String> oriFolderCodeList) throws DAOException, ParseException, FolderException{

		OriginFolderList resList = new OriginFolderList();
		
		for(String oriFolderCode : oriFolderCodeList){
			OriginFolder oriFolder = FolderDBManager.getINSTANCE().searchOnlyOriginFolderCode(oriFolderCode);
			if(oriFolder!=null){
				if(this.folderMap.containsKey(oriFolder.getPath()))this.folderMap.remove(oriFolder.getPath());
				this.folderMap.put(oriFolder.getPath(), oriFolder);
			}
			resList.addOriginFolder(oriFolder);
		}
		
		return resList;
	}
	@Override
	public OriginFolderList searchOnlySiblingOriFoByOriFoPath(String oriFolderPath) throws DAOException, ParseException, FolderException{
		
		OriginFolderList oriFolderList = FolderDBManager.getINSTANCE().searchSiblingOnlyOriginFolderPath(oriFolderPath);
		if(!oriFolderList.getList().isEmpty()){
			for(OriginFolder oriFolder : oriFolderList.getList()){
				if(this.folderMap.containsKey(oriFolder.getPath()))this.folderMap.remove(oriFolder.getPath());
				this.folderMap.put(oriFolder.getPath(), oriFolder);
			}
		}
		return oriFolderList;
	}
	@Override
	public OriginFolderList searchOnlySiblingOriFoByOriFoCode(String oriFolderCode) throws DAOException, ParseException, FolderException{
		
		OriginFolderList oriFolderList = FolderDBManager.getINSTANCE().searchSiblingOnlyOriginFolderCode(oriFolderCode);
		if(!oriFolderList.getList().isEmpty()){
			for(OriginFolder oriFolder : oriFolderList.getList()){
				if(this.folderMap.containsKey(oriFolder.getPath()))this.folderMap.remove(oriFolder.getPath());
				this.folderMap.put(oriFolder.getPath(), oriFolder);
			}
		}
		return oriFolderList;
	}
	@Override
	public OriginFolderList searchOnlyChOriFoByPFoOriPath(String oriParentFolderPath) throws DAOException, ParseException, FolderException{
		
		OriginFolderList oriFolderList = FolderDBManager.getINSTANCE().searchOriginChFoldersByOriPFPath(oriParentFolderPath);
		if(!oriFolderList.getList().isEmpty()){
			for(OriginFolder oriFolder : oriFolderList.getList()){
				if(this.folderMap.containsKey(oriFolder.getPath()))this.folderMap.remove(oriFolder.getPath());
				this.folderMap.put(oriFolder.getPath(), oriFolder);
			}
		}
		return oriFolderList;
	}
	@Override
	public OriginFolderList searchOnlyChOriFoByPFoOriCode(String oriParentFolderCode) throws DAOException, ParseException, FolderException{

		OriginFolderList oriFolderList = FolderDBManager.getINSTANCE().searchOriginChFoldersByOriPFCode(oriParentFolderCode);
		if(!oriFolderList.getList().isEmpty()){
			for(OriginFolder oriFolder : oriFolderList.getList()){
				if(this.folderMap.containsKey(oriFolder.getPath()))this.folderMap.remove(oriFolder.getPath());
				this.folderMap.put(oriFolder.getPath(), oriFolder);
			}
		}
		return oriFolderList;
	}
	@Override
	public OriginFolderList searchOnlyAllOriFoByPFoOriPath(String oriParentFolderPath) throws DAOException, ParseException, FolderException{

		OriginFolderList oriFolderList = FolderDBManager.getINSTANCE().searchAllOriginFoldersByOriPFPath(oriParentFolderPath);
		if(!oriFolderList.getList().isEmpty()){
			for(OriginFolder oriFolder : oriFolderList.getList()){
				if(this.folderMap.containsKey(oriFolder.getPath()))this.folderMap.remove(oriFolder.getPath());
				this.folderMap.put(oriFolder.getPath(), oriFolder);
			}
		}
		return oriFolderList;
	}
	@Override
	public OriginFolderList searchOnlyAllOriFoByPFoOriCode(String oriParentFolderCode) throws DAOException, ParseException, FolderException{

		OriginFolderList oriFolderList = FolderDBManager.getINSTANCE().searchAllOriginFoldersByOriPFCode(oriParentFolderCode);
		if(!oriFolderList.getList().isEmpty()){
			for(OriginFolder oriFolder : oriFolderList.getList()){
				if(this.folderMap.containsKey(oriFolder.getPath()))this.folderMap.remove(oriFolder.getPath());
				this.folderMap.put(oriFolder.getPath(), oriFolder);
			}
		}
		return oriFolderList;
	}

	

	@Override
	public CopiedFolder searchOnlyCopiedFolderPath(String folderPath)throws DAOException, ParseException, FolderException {
		// TODO Auto-generated method stub
		
		if(this.folderMap.containsKey(folderPath)){
			File folder = this.folderMap.get(folderPath);
			if(folder instanceof CopiedFolder)return (CopiedFolder)folder;
			else return null;
		}else{
			CopiedFolder cpFolder = FolderDBManager.getINSTANCE().searchOnlyCopiedFolderPath(folderPath);
			if(cpFolder!=null)this.folderMap.put(folderPath, cpFolder);
			return cpFolder;
		}
	}


	@Override
	public CopiedFolder searchOnlyCopiedFolderCode(String folderCode)
			throws DAOException, ParseException, FolderException {
		// TODO Auto-generated method stub
		CopiedFolder cpFolder = FolderDBManager.getINSTANCE().searchOnlyCopiedFolderCode(folderCode);
		if(cpFolder!=null){
			String folderPath = cpFolder.getPath();
			if(this.folderMap.containsKey(folderPath))this.folderMap.remove(folderPath);
			this.folderMap.put(folderPath, cpFolder);
		}
		return cpFolder;
	}


	@Override
	public CopiedFolderList searchOnlyCopiedFolderPath(List<String> folderPathList) throws DAOException, ParseException,FolderException {
		// TODO Auto-generated method stub
		CopiedFolderList resList = new CopiedFolderList();
		
		for(String folderPath : folderPathList){
			if(this.folderMap.containsKey(folderPath)){
				File folder = this.folderMap.get(folderPath);
				if(folder instanceof CopiedFolder)resList.addCopiedFolder((CopiedFolder)folder);
			}else{
				CopiedFolder cpFolder = FolderDBManager.getINSTANCE().searchOnlyCopiedFolderPath(folderPath);
				if(cpFolder!=null){
					resList.addCopiedFolder(cpFolder);
					this.folderMap.put(folderPath, cpFolder);
				}
			}
		}
		return resList;
	}
	@Override
	public CopiedFolderList searchOnlyCopiedFolderCode(List<String> folderCodeList) throws DAOException, ParseException,FolderException {
		// TODO Auto-generated method stub
		CopiedFolderList resList = new CopiedFolderList();
		
		for(String folderCode : folderCodeList){
			CopiedFolder cpFolder = FolderDBManager.getINSTANCE().searchOnlyCopiedFolderCode(folderCode);
			if(cpFolder!=null){
				String folderPath = cpFolder.getPath();
				if(this.folderMap.containsKey(folderPath))this.folderMap.remove(folderPath);
				this.folderMap.put(folderPath, cpFolder);
				resList.addCopiedFolder(cpFolder);
			}
		}
		return resList;
	}


	@Override
	public File searchFolderByFolderPath(String folderPath)throws DAOException, ParseException, FolderException {
		// TODO Auto-generated method stub
		
		if(this.folderMap.containsKey(folderPath)){
			File folder = this.folderMap.get(folderPath);
			if(folder instanceof CopiedFolder)return (CopiedFolder)folder;
			else return (OriginFolder)folder;
		}else {
			File folder = FolderDBManager.getINSTANCE().searchFolderByFolderPath(folderPath);
			if(folder instanceof CopiedFolder){
				this.folderMap.put(folderPath, (CopiedFolder)folder);
				return (CopiedFolder)folder;
			}
			else {
				this.folderMap.put(folderPath, (OriginFolder)folder);
				return (OriginFolder)folder;
			}
		}
	}
	@Override
	public File searchFolderByFolderCode(String folderCode)throws DAOException, ParseException, FolderException {
		// TODO Auto-generated method stub
		File folder = FolderDBManager.getINSTANCE().searchFolderByFolderCode(folderCode);
		String folderPath = folder.getPath();
		if(folder instanceof CopiedFolder){
			this.folderMap.put(folderPath, (CopiedFolder)folder);
			return (CopiedFolder)folder;
		}
		else {
			this.folderMap.put(folderPath, (OriginFolder)folder);
			return (OriginFolder)folder;
		}
	}
	@Override
	public List<File> searchFolderByPFolderPath(String parentFolderPath)throws DAOException, ParseException, FolderException {
		// TODO Auto-generated method stub
		
		List<File> folderList = FolderDBManager.getINSTANCE().searchFolderByPFolderPath(parentFolderPath);
		
		if(!folderList.isEmpty()){
			for(File folder : folderList){
				String folderPath = folder.getPath();
				if(folder instanceof CopiedFolder){
					this.folderMap.put(folderPath, (CopiedFolder)folder);
				}
				else {
					this.folderMap.put(folderPath, (OriginFolder)folder);
				}
			}
		}
		return folderList;
	}
	@Override
	public List<File> searchFolderByPFolderCode(String parentFolderCode)throws DAOException, ParseException, FolderException {
		// TODO Auto-generated method stub

		List<File> folderList = FolderDBManager.getINSTANCE().searchFolderByPFolderCode(parentFolderCode);
		
		if(!folderList.isEmpty()){
			for(File folder : folderList){
				String folderPath = folder.getPath();
				if(folder instanceof CopiedFolder){
					this.folderMap.put(folderPath, (CopiedFolder)folder);
				}
				else {
					this.folderMap.put(folderPath, (OriginFolder)folder);
				}
			}
		}
		return folderList;
	}
	@Override
	public List<File> searchSiblingFolderByPFolderPath(String folderPath)throws DAOException, ParseException, FolderException {
		// TODO Auto-generated method stub

		List<File> folderList = FolderDBManager.getINSTANCE().searchSiblingFolderByPFolderPath(folderPath);
		
		if(!folderList.isEmpty()){
			for(File folder : folderList){
				String folderPath1 = folder.getPath();
				if(folder instanceof CopiedFolder){
					this.folderMap.put(folderPath1, (CopiedFolder)folder);
				}
				else {
					this.folderMap.put(folderPath1, (OriginFolder)folder);
				}
			}
		}
		return folderList;
	}
	@Override
	public List<File> searchSiblingFolderByPFolderCode(String folderCode)throws DAOException, ParseException, FolderException {
		// TODO Auto-generated method stub

		List<File> folderList = FolderDBManager.getINSTANCE().searchSiblingFolderByPFolderCode(folderCode);
		
		if(!folderList.isEmpty()){
			for(File folder : folderList){
				String folderPath1 = folder.getPath();
				if(folder instanceof CopiedFolder){
					this.folderMap.put(folderPath1, (CopiedFolder)folder);
				}
				else {
					this.folderMap.put(folderPath1, (OriginFolder)folder);
				}
			}
		}
		return folderList;
	}
	@Override
	public List<File> searchAllFoldersByPFCode(String parentFolderCode)throws DAOException, ParseException, FolderException {
		// TODO Auto-generated method stub

		List<File> folderList = FolderDBManager.getINSTANCE().searchAllFoldersByPFCode(parentFolderCode);
		
		if(!folderList.isEmpty()){
			for(File folder : folderList){
				String folderPath1 = folder.getPath();
				if(folder instanceof CopiedFolder){
					this.folderMap.put(folderPath1, (CopiedFolder)folder);
				}
				else {
					this.folderMap.put(folderPath1, (OriginFolder)folder);
				}
			}
		}
		return folderList;
	}
	@Override
	public List<File> searchAllFoldersByPFPath(String parentFolderPath)throws DAOException, ParseException, FolderException {
		// TODO Auto-generated method stub

		List<File> folderList = FolderDBManager.getINSTANCE().searchAllFoldersByPFPath(parentFolderPath);
		
		if(!folderList.isEmpty()){
			for(File folder : folderList){
				String folderPath1 = folder.getPath();
				if(folder instanceof CopiedFolder){
					this.folderMap.put(folderPath1, (CopiedFolder)folder);
				}
				else {
					this.folderMap.put(folderPath1, (OriginFolder)folder);
				}
			}
		}
		return folderList;
	}

	

///////////////////////////////////////////////////////////////////////////
	
	
	@Override
	public boolean modifyFolderPath(String nickName, String code, String newPath) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean modifyFolderName(String nickName, String code, String newName) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean modifyFolderDes(String nickName, String code,
			String newDescription) {
		// TODO Auto-generated method stub
		return false;
	}

	

	@Override
	public boolean deleteFolderPath(String nickName, String path) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean deleteFolderCode(String nickName, String code) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean deleteFolderAll(String nickName, String parentFolderCode) {
		// TODO Auto-generated method stub
		return false;
	}


}
