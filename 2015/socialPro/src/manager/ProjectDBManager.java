package manager;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.ParseException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;

import model.CopiedFile;
import model.CopiedFileList;
import model.CopiedFolder;
import model.CopiedFolderList;
import model.CopiedProject;
import model.CopiedProjectList;
import model.FileNode;
import model.Member;
import model.OriginFile;
import model.OriginFolder;
import model.OriginProject;
import model.OriginProjectList;
import model.Team;
import socialProExceptions.CommitExcetion;
import socialProExceptions.DAOException;
import socialProExceptions.FileException;
import socialProExceptions.FolderException;
import socialProExceptions.MemberException;
import socialProExceptions.ProjectException;
import socialProExceptions.RemoteFileException;
import socialProExceptions.TagException;
import socialProExceptions.TeamException;
import action.FolderSearchAction;
import action.MemberSearchAction;
import action.ProjectInsertAction;
import action.ProjectSearchAction;
import action.TeamSearchAction;

import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.SftpException;

import factory.ActionFactory;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : ProjectDBManager.java
//  @ Date : 2015-07-28
//  @ Author : 
//
//




public class ProjectDBManager {
	
	private static ProjectDBManager INSTANCE;
	
	static{
		INSTANCE = new ProjectDBManager();
	}
	
	private ProjectDBManager(){	}
	
	
	public static ProjectDBManager getINSTANCE() {
		if(INSTANCE==null)INSTANCE=new ProjectDBManager();
		return INSTANCE;
	}

	/*public OriginProject insertOriginProject(String memberCode,String nickName, String name, String description, String path,  List<String> tagList) throws DAOException, SftpException, JSchException, FolderException, ProjectException, TagException {
		
		System.out.println("This is ProjectDBManger insert");
		return ((ProjectInsertAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).insertOriginProject(memberCode, nickName, name, description, path, tagList);
	}*/
	
	public OriginProject insertOriginProject(String memberCode,String nickName, String name, String description, String path,  List<String> tagList) throws DAOException, SftpException, JSchException, FolderException, ProjectException, TagException {

		
		System.out.println("This is ProjectDBManger insert");
		return ((ProjectInsertAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).insertOriginProject(memberCode, nickName, name, description, path, tagList);
	}
	
	public OriginProject insertOriginProject(String memberCode,String nickName, String name, String path, List<String> tagList) throws DAOException, SftpException, JSchException, FolderException, ProjectException, TagException {
	
		return this.insertOriginProject(memberCode,nickName, nickName, "", path, tagList);
	}
	
	/*public List<File> insertCopiedTeamProject(String teamCode, String teamName,String projectName, String proDes, String path,List<String> tagList) throws DAOException, SftpException, JSchException, FolderException, ProjectException, CommitExcetion, TagException {
		
		System.out.println("This is ProjectDBManger insertOriTeamProject!");
		return ((ProjectInsertAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).insertCopiedTeamProject(teamCode, teamName, projectName, proDes, path, tagList);
	}*/
	
	public List<File> insertCopiedTeamProject(String teamCode, String teamName,String projectName, String proDes, String path,List<String> tagList) throws DAOException, SftpException, JSchException, FolderException, ProjectException, CommitExcetion, TagException {
		
		System.out.println("This is ProjectDBManger insertOriTeamProject!");
		return ((ProjectInsertAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).insertCopiedTeamProject(teamCode, teamName, projectName, proDes, path, tagList);
	}
	
	public List<File> insertCopiedTeamProject(Team teamInfo,String projectName, String proDes, String path,List<String> tagList) throws DAOException, SftpException, JSchException, FolderException, ProjectException, CommitExcetion, TagException {
		
		System.out.println("This is ProjectDBManger insertOriTeamProject!");
		return ((ProjectInsertAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).insertCopiedTeamProject(teamInfo, projectName, proDes, path, tagList);
	}
	
	public Map<String,Map<String,File>> copyTeamProjects(List<FileNode> projectList,String memberCode, String teamCode) throws DAOException, MemberException, TeamException, FileNotFoundException, SftpException, JSchException, FolderException, ProjectException, ParseException, IOException, FileException, RemoteFileException, CommitExcetion{
		
		Map<String,Map<String,File>> resMap = new HashMap<String,Map<String,File>>();
		
		Member memInfo = MemberManager.getINSTANCE().searchMemberCode(memberCode);
		Team teamInfo = TeamManager.getINSTANCE().searchTeamCode(teamCode);
		Map<String,CopiedProject> cProjectMaps = ((ProjectInsertAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).insertCopiedProjectList(projectList, memberCode, memInfo.getNickName(), teamCode, teamInfo.getName());
		
		for(CopiedProject cp : cProjectMaps.values()){
			Map<String,File> mapVal = new HashMap<String, File>();
			
			List<File> allChilds = FolderManager.getINSTANCE().searchAllFoldersByPFCode(cp.getParentFolder());
			if(!allChilds.isEmpty()){
				for(File cf : allChilds){
					if(cf instanceof CopiedFolder){
						CopiedFolder cpFolder = (CopiedFolder)cf;
						mapVal.put(cpFolder.getCode(), cpFolder);
					}else{
						OriginFolder oriFolder = (OriginFolder)cf;
						mapVal.put(oriFolder.getCode(), oriFolder);
					}
				}
			}
			
			List<File> fileList = FileManager.getINSTANCE().searchAllFileByFCode(cp.getParentFolder());
			if(!fileList.isEmpty()){
				for(File cf : fileList){
					if(cf instanceof CopiedFile){
						CopiedFile cpFile = (CopiedFile)cf;
						mapVal.put(cpFile.getCode(), cpFile);
					}else{
						OriginFile oriFile = (OriginFile)cf;
						mapVal.put(oriFile.getCode(), oriFile);
					}
				}
			}
			
			if(mapVal.containsKey(cp.getParentFolder()))mapVal.remove(cp.getParentFolder());
			mapVal.put(cp.getCode(), cp);
			resMap.put(cp.getCode(), mapVal);
		}
		return resMap;
	}
	
	public Map<String,File> copyOriginProject(FileNode project,String memberCode, String ownerCode) throws DAOException, MemberException, TeamException, FileNotFoundException, SftpException, JSchException, FolderException, ProjectException, ParseException, IOException, FileException, RemoteFileException, CommitExcetion{
		
		Member memInfo = MemberManager.getINSTANCE().searchMemberCode(memberCode);
		Member ownerInfo = MemberManager.getINSTANCE().searchMemberCode(ownerCode);
		//1. copy all folder and file
		CopiedProject cp = ((ProjectInsertAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).insertCopiedProject(project, memberCode, memInfo.getNickName(), ownerInfo.getCode(), ownerInfo.getNickName());
		
		Map<String,File> mapVal = new HashMap<String, File>();
		System.out.println(cp.getCode());
		mapVal.put(cp.getCode(), cp);
		//2. search copied folder all to make map!
		List<File> allChilds = FolderManager.getINSTANCE().searchAllFoldersByPFCode(cp.getParentFolder());
		if(!allChilds.isEmpty()){
			for(File cf : allChilds){
				if(cf instanceof CopiedFolder){
					CopiedFolder cpFolder = (CopiedFolder)cf;
					mapVal.put(cpFolder.getCode(), cpFolder);
				}else{
					OriginFolder oriFolder = (OriginFolder)cf;
					mapVal.put(oriFolder.getCode(), oriFolder);
				}
			}
		}
		
		List<File> fileList = FileManager.getINSTANCE().searchAllFileByFCode(cp.getParentFolder());
		if(!fileList.isEmpty()){
			for(File cf : fileList){
				if(cf instanceof CopiedFile){
					CopiedFile cpFile = (CopiedFile)cf;
					mapVal.put(cpFile.getCode(), cpFile);
				}else{
					OriginFile oriFile = (OriginFile)cf;
					mapVal.put(oriFile.getCode(), oriFile);
				}
			}
		}
		
		if(mapVal.containsKey(cp.getParentFolder()))mapVal.remove(cp.getParentFolder());
		mapVal.put(cp.getCode(), cp);
		
		return mapVal;
	}
	
	/*public String insertCopiedProject(String memberCode,String nickName, String name, String descriptioin, String path, List<String> tagList, String originCode, String copyDate) {
	
	}
	
	public String insertCopiedProject(String memberCode,String nickName, String name, String path, List<String> tagList, String originCode, String copyDate) {
	
	}
	
	public int insertCopiedProject(Map<String , String> pathMap, String projectName, String descriptioin, List<String> tagList, String originCode, String copyDate) {
	
	}*/
	
////////////////////////////////////////////////////////////////////////  search
	
////search Exactlly return originProject or copiedProject or null
	public List<File> searchPersonalProjectByOwnerCode(String owner) throws DAOException, ParseException, FolderException {
		
		List<File> project=((ProjectSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).searchPersonalProjectOwner(owner);
		return project;
	}
	public File searchProjectByProjectCode(String projectCode) throws DAOException, ParseException, FolderException{
		File project=((ProjectSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).searchProjectCode(projectCode);
		return project;
	}
	public File searchProjectByProjectPath(String path) throws DAOException, ParseException, FolderException{
		
		return ((ProjectSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).searchProjectPath(path);
	}
	
	
//// just search originProject doesn't matter what is real
	public OriginProject justSearchProjectCode(String projectCode) throws DAOException, ParseException, FolderException{
		return ((ProjectSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).justSearchOriProjectCode(projectCode);
	}
	public OriginProject justSearchProjectPath(String projectPath) throws DAOException, ParseException, FolderException{
		return ((ProjectSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).justSearchOriProjectPath(projectPath);
	}
	public OriginProject justSearchProjectFolderCode(String folderCode) throws DAOException, ParseException, FolderException{
		return ((ProjectSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).justSearchOriginProjectFCode(folderCode);
	}
	
	
	
////  search only real OriginProject
	public OriginProjectList searchOnlyOriginProjectByOwnerCode(String ownerCode) throws DAOException, ParseException, FolderException{
		return ((ProjectSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).searchOnlyOriginProjectOwner(ownerCode);
	}
	public OriginProject searchOnlyOriginProjectByProjectCode(String projectCode) throws DAOException, ParseException, FolderException{
		return ((ProjectSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).searchOnlyOriginProjectCode(projectCode);
	}
	public OriginProject searchOnlyOriginProjectByProjectPath(String projectPath) throws DAOException, ParseException, FolderException{
		return ((ProjectSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).searchOnlyOriginProjectPath(projectPath);
	}
	public OriginProject searchOnlyOriginProjectByFolderCode(String folderCode) throws DAOException, ParseException, FolderException{
		return ((ProjectSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).searchOnlyOriginProjectFCode(folderCode);
	}
	public OriginProjectList searchOnlyOriginProjectByTagNameList(List<String> tagNameList) throws DAOException, ParseException, FolderException{
		return ((ProjectSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).searchOnlyOriginProjectTags(tagNameList);
	}
	 
	

//// return only real CopiedProject
	public CopiedProjectList searchOnlyPersonalCpProjectByOwnerCode(String ownerCode) throws DAOException, ParseException, FolderException, ProjectException{
		return ((ProjectSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).searchOnlyCpProByCpOwnerCode(ownerCode);
	}
	public CopiedProjectList searchOnlyTeamCpProjectByOwnerCode(String teamCode, String cooper) throws DAOException, ParseException, FolderException, ProjectException{
		return ((ProjectSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).searchOnlyCpProByOriOwnerCodeCpOwner(teamCode, cooper);
	}
	public CopiedProject searchOnlyCpProjectByOriProCode(String oriProCode, String cooper) throws DAOException, ParseException, FolderException, ProjectException{
		return ((ProjectSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).searchOnlyCpProByCpOwnerCodeOriProCode(oriProCode, cooper);
	}
	public CopiedProjectList searchOnlyCpProjectByOriProCode(String oriProCode) throws DAOException, ParseException, FolderException, ProjectException{
		return ((ProjectSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).searchOnlyCpProByOriProCode(oriProCode);
	}
	public CopiedProject searchOnlyCpProjectByProjectPath(String projectPath) throws DAOException, ParseException{
		return ((ProjectSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).searchOnlyCpProByCpProPath(projectPath);
	}
	public CopiedProject searchOnlyCpProjectByProjectCode(String projectCode) throws DAOException, ParseException{
		return ((ProjectSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).searchOnlyCpProByCpProCode(projectCode);
	}
	
	
	
	public boolean checkProjectNameByNickName(String nickName, String projectName) throws DAOException, ParseException, FolderException {
		
		Member mem=((MemberSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("MemberActionImpl")).searchMemberNickName(nickName);
		return this.checkProjectNameByMCode(mem.getCode(), projectName);
	}
	
	public boolean checkProjectNameByMCode(String ownerCode, String projectName) throws DAOException, ParseException, FolderException {
	
		System.out.println("This is ProjectDBManager");
		OriginProject project=((ProjectSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).justSearchOriProjectName(projectName, ownerCode);
		if(project==null)return false;
		else return true;
	}
	
	public boolean justSearchOriProjectPath(String projectPath) throws DAOException, ParseException, FolderException {
	
		OriginProject project=((ProjectSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).justSearchOriProjectPath(projectPath);
		if(project==null)return false;
		return true;
	}
	
public boolean checkProjectName(String name,String owner) throws DAOException, ParseException, FolderException {
		
		OriginProject project=((ProjectSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).justSearchOriProjectName(name, owner);
		if(project==null)return false;
		return true;
	}
	
	public boolean checkProjectDeletePowerByPath(String memberCode,String path) throws DAOException, ParseException, FolderException, TeamException {
	
		OriginProject project=((ProjectSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).justSearchOriProjectPath(path);
		if(project==null)return false;
		
		Team team=((TeamSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("teamActionImpl")).searchTeamCode(project.getOwner());
		if(team==null){
			if(memberCode.equals(project.getOwner()))return true;
		}
		if(memberCode.equals(team.getManager()))return true;
		return false;
	}
	
	public boolean checkProjectDeletePowerByCode(String memberCode, String code) throws DAOException, ParseException, FolderException, TeamException {
	
		OriginProject project=((ProjectSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("projectActionImpl")).justSearchOriProjectCode(code);
		if(project==null)return false;
		System.out.println("  "+memberCode+"   "+code+"  "+project.getOwner());
		if(memberCode.equals(project.getOwner()))return true;
		return false;
	}
}
