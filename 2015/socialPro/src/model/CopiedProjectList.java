package model;

import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : CopiedProjectList.java
//  @ Date : 2015-07-28
//  @ Author : 
//
//




public class CopiedProjectList {
	private List<CopiedProject> list;
	
	public CopiedProjectList() {
		this.list = new ArrayList<CopiedProject>();
	}
	
	
	public boolean addCopiedProject(CopiedProject copiedProject) {
	
		return this.list.add(copiedProject);
	}
	
	public void deleteCopiedProjectsByName(String name) {
	
	}
	
	public void deleteCopiedProjectsByOwner(String owner, String name) {
	
	}
	
	public void deleteCopiedProjectsByOwner(String owner) {
	
	}
	
	public void deleteCopiedProjectsByPath(String path) {
	
	}
	
	public void deleteCopiedProjectByCode(String code) {
	
	}
	
	public void deleteCopiedProjectByPCode(String parentFolder) {
	
	}
	
	public void modifyCopiedProjectByCodeName(String code, String newName) {
	
	}
	
	public void modifyCopiedProjectByCodeDes(String code, String newDescription) {
	
	}
	
	public void modifyCopiedProjectByCodePath(String code, String newPath, String newParentFolder) {
	
	}
	
	public void modifyCopiedProjectByCodePath(String code, String newPath) {
	
	}
	
	public void modifyCopiedProjectByCodeAlter(String code, String newAlterDate) {
	
	}
	
	public void modifyCopiedProjectByCodeSize(String code, double newSize) {
	
	}
	
	public void modifyCopiedProjectByCodeChFolders(String code, List<String> newChildFolderList) {
	
	}
	
	public void modifyCopiedProjectByCodeTags(String code, List<String> newTagList) {
	
	}
	
	public void modifyCopiedProjectByCodeSharedMem(String code, List<String> newSharedMemberList) {
	
	}
	
	public void modifyCopiedProjectByPFolderPath(String parentFolder, String newPath) {
	
	}
	
	public void modifyCopiedProjectByPFolderName(String parentFolder, String newName) {
	
	}
	
	public void modifyCopiedProjectByPFolderChFolders(String parentFolder, List<String> newChildFolderList) {
	
	}
	
	public CopiedProject searchCopiedProjectCode(String code) {
	
		for(CopiedProject pro:this.list){
			
			if(pro.getCode().equals(code))return pro;
		}return null;
	}
	
	public CopiedProjectList searchCopiedProjectOriCode(String orginCode) {
	
		CopiedProjectList proList = new CopiedProjectList();
		for(CopiedProject pro:this.list){
			
			if(pro.getOriginCode().equals(orginCode))proList.addCopiedProject(pro);
		}return proList;
	}
	
	public CopiedProject searchCopiedProjectOriCode(String orginCode, String owner) {
	
		for(CopiedProject pro:this.list){
			
			if(pro.getOriginCode().equals(orginCode))
				if(pro.getOwner().equals(owner))return pro;
		}return null;
	}
	
	public CopiedProjectList searchCopiedProjectName(String name) {
	
		CopiedProjectList proList = new CopiedProjectList();
		for(CopiedProject pro:this.list){
			
			if(pro.getName().equals(name))proList.addCopiedProject(pro);
		}return proList;
	}
	
	public CopiedProject searchCopiedProjectName(String name, String owner) {
	
		for(CopiedProject pro:this.list){
					
			if(pro.getName().equals(name))
				if(pro.getOwner().equals(owner))return pro;
		}return null;
	}
	
	public CopiedProjectList searchCopiedProjectOwner(String owner) {
	
		CopiedProjectList proList = new CopiedProjectList();
		for(CopiedProject pro:this.list){
			
			if(pro.getOwner().equals(owner))proList.addCopiedProject(pro);
		}return proList;
	}
	
	public CopiedProject searchCopiedProjectOwner(String name, String parentFolder) {
	
		for(CopiedProject pro:this.list){
			
			if(pro.getName().equals(name))
				if(pro.getParentFolder().equals(parentFolder))return pro;
		}return null;
	}
	
	public CopiedProjectList searchCopiedProjectDes(String description) {
	
		CopiedProjectList proList = new CopiedProjectList();
		for(CopiedProject pro:this.list){
			
			if(pro.getDescription().equals(description))proList.addCopiedProject(pro);
		}return proList;
	}
	
	public CopiedProject searchCopiedProjectPath(String path) {
	
		for(CopiedProject pro:this.list){
			
			if(pro.getPath().equals(path))return pro;
		}return null;
	}
	
	public CopiedProjectList searchCopiedProjectPFolder(String parentFolder) {
	
		CopiedProjectList proList = new CopiedProjectList();
		for(CopiedProject pro:this.list){
			
			if(pro.getParentFolder().equals(parentFolder))proList.addCopiedProject(pro);
		}return proList;
	}
	
	public CopiedProjectList searchCopiedProjectSMem(String sharedMember) {
	
		CopiedProjectList proList = new CopiedProjectList();
		for(CopiedProject pro:this.list){
			for(String str:pro.getSharedMemberList()){
				if(str.equals(sharedMember)){
					proList.addCopiedProject(pro);
					break;}
			}
		}return proList;
	}
	
	public CopiedProjectList searchCopiedProjectTags(List<String> tagList) {
	
		CopiedProjectList proList = new CopiedProjectList();
		for(CopiedProject pro:this.list){
			for(String str:pro.getTagList()){
				for(String l:tagList){
					if(str.equals(l)){
						proList.addCopiedProject(pro);
						break;}
				}
			}
		}return proList;
	}
	
	public CopiedProjectList searchCopiedProjectTags(List<String> tagList, String name, String description, String path) {
	
		CopiedProjectList proList = new CopiedProjectList();
		for(CopiedProject pro:this.list){
			if(pro.getName().equals(name)){
				if(pro.getDescription().equals(description)){
					StringTokenizer tokens = new StringTokenizer(pro.getPath(),"\\");
					while(tokens.hasMoreElements()){
						if(tokens.nextToken().equals(path)){
							for(String str:pro.getTagList()){
								for(String l:tagList){
									if(str.equals(l)){
										proList.addCopiedProject(pro);
										break;}
								}
							}
						}
					}
				}
			}
		}return proList;
	}
	public List<CopiedProject> getList() {
		return list;
	}
	public void setList(List<CopiedProject> list) {
		this.list = list;
	}
	
}
