package model;

import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : OriginProjectList.java
//  @ Date : 2015-07-28
//  @ Author : 
//
//




public class OriginProjectList {
	private List<OriginProject> list;
	
	public OriginProjectList() {
		this.list = new ArrayList<OriginProject>();
	}
	public OriginProjectList(String path) {
		this.list = new ArrayList<OriginProject>();
		this.list.add(new OriginProject(path));
	}
	/*public OriginProjectList(String name, String description, String path,
			String makeDate, String parentFolder,
			List<String> childFolderList,List<String> tagList,String owner) {
		this.list = new ArrayList<OriginProject>();
		this.list.add(new OriginProject(name,description,path,makeDate,parentFolder,childFolderList,tagList,owner));
	}
	public OriginProjectList(String code,String name, String description, String path,
			String makeDate, String parentFolder,
			List<String> childFolderList,List<String> tagList,String owner) {
		this.list = new ArrayList<OriginProject>();
		this.list.add(new OriginProject(code,name,description,path,makeDate,parentFolder,childFolderList,tagList,owner));
	}
	public OriginProjectList(String name, String description, String path,
			String makeDate,
			List<String> childFolderList,List<String> tagList,String owner) {
		this.list = new ArrayList<OriginProject>();
		this.list.add(new OriginProject(name,description,path,makeDate,childFolderList,tagList,owner));
	}
	public OriginProjectList(String code,String name, String description, String path,
			String makeDate,
			List<String> childFolderList,List<String> tagList,String owner) {
		this.list = new ArrayList<OriginProject>();
		this.list.add(new OriginProject(code,name,description,path,makeDate,childFolderList,tagList,owner));
	}
	public OriginProjectList(String name, String description, String path,
			String makeDate, String parentFolder,List<String> tagList,String owner) {
		this.list = new ArrayList<OriginProject>();
		this.list.add(new OriginProject(name,description,path,makeDate,parentFolder,tagList,owner));
	
	}
	public OriginProjectList(String code,String name, String description, String path,
			String makeDate, String parentFolder,List<String> tagList,String owner) {
		this.list = new ArrayList<OriginProject>();
		this.list.add(new OriginProject(code,name,description,path,makeDate,parentFolder,tagList,owner));
	}
	
	public OriginProjectList(String name, String description, String path,
			String makeDate,List<String> tagList,String owner) {
		this.list = new ArrayList<OriginProject>();
		this.list.add(new OriginProject(name,description,path,makeDate,tagList,owner));
	}
	public OriginProjectList(String code,String name, String description, String path,
			String makeDate,List<String> tagList,String owner) {
		this.list = new ArrayList<OriginProject>();
		this.list.add(new OriginProject(code,name,description,path,makeDate,tagList,owner));
	}
	
	////////////////
	
	public OriginProjectList(String name, String path,
			String makeDate, String parentFolder,
			List<String> childFolderList,List<String> tagList,String owner) {
		this.list = new ArrayList<OriginProject>();
		this.list.add(new OriginProject(name,path,makeDate,parentFolder,childFolderList,tagList,owner));
	}
	public OriginProjectList(String code,String name, String path,
			List<String> childFolderList,String makeDate, String parentFolder,List<String> tagList,String owner) {
		this.list = new ArrayList<OriginProject>();
		this.list.add(new OriginProject(code,name,path,makeDate,parentFolder,childFolderList,tagList,owner));
	}
	public OriginProjectList(String name, String path,
			String makeDate,
			List<String> childFolderList,List<String> tagList,String owner) {
		this.list = new ArrayList<OriginProject>();
		this.list.add(new OriginProject(name,path,makeDate,childFolderList,tagList,owner));
	}
	public OriginProjectList(String code,String name,String path,
			List<String> childFolderList,String makeDate,List<String> tagList,String owner) {
		this.list = new ArrayList<OriginProject>();
		this.list.add(new OriginProject(code,name,path,childFolderList,makeDate,tagList,owner));
	}
	public OriginProjectList(String name,String path,
			String makeDate, String parentFolder,List<String> tagList,String owner) {
		this.list = new ArrayList<OriginProject>();
		this.list.add(new OriginProject(name,path,makeDate,parentFolder,tagList,owner));
	}
	public OriginProjectList(String makeDate,String code,String name,String path,
			String parentFolder,List<String> tagList,String owner) {
		this.list = new ArrayList<OriginProject>();
		this.list.add(new OriginProject(makeDate,code,name,path,parentFolder,tagList,owner));
	}
	
	public OriginProjectList(String name,String path,
			String makeDate,List<String> tagList,String owner) {
		this.list = new ArrayList<OriginProject>();
		this.list.add(new OriginProject(name,path,makeDate,tagList,owner));
	}
	public OriginProjectList(String makeDate,String code,String name,String path,List<String> tagList,String owner) {
		this.list = new ArrayList<OriginProject>();
		this.list.add(new OriginProject(makeDate,code,name,path,tagList,owner));
	}*/
	
	public boolean addOriginPorject(OriginProject originProject) {
	
		return this.list.add(originProject);
	}
	
	
	public boolean deleteOriginProjectsByName(String name) {
	
		OriginProjectList proList = this.searchOriginProjectName(name);
		if(proList.getList().isEmpty())return false;
		for(OriginProject pro:proList.getList()){
			if(!this.list.remove(pro))return false;
		}
		return true;
	}
	
	public boolean deleteOriginProjectsByOwner(String owner, String name) {
	
		OriginProjectList proList = this.searchOriginProjectNameOwner(name, owner);
		if(proList.getList().isEmpty())return false;
		for(OriginProject pro:proList.getList()){
			if(!this.list.remove(pro))return false;
		}
		return true;
	}
	
	public boolean deleteOriginProjectsByOwner(String owner) {
	
		OriginProjectList proList = this.searchOriginProjectOwner(owner);
		if(proList.getList().isEmpty())return false;
		for(OriginProject pro:proList.getList()){
			if(!this.list.remove(pro))return false;
		}
		return true;
	}
	
	public boolean deleteOriginProjectsByPath(String path) {
	
		OriginProject pro = this.searchOriginProjectPath(path);
		if(pro==null)return false;
		return this.list.remove(pro);
	}
	
	public boolean deleteOriginProjectByCode(String code) {
	
		OriginProject pro = this.searchOriginProjectCode(code);
		if(pro==null)return false;
		return this.list.remove(pro);
	}
	
	public boolean deleteOriginProjectByPCode(String parentFolder) {
	
		OriginProjectList proList = this.searchOriginProjectPFolder(parentFolder);
		if(proList.getList().isEmpty())return false;
		for(OriginProject pro:proList.getList()){
			if(!this.list.remove(pro))return false;
		}return true;
	}
	
	public boolean modifyOriginProjectByCodeName(String code, String newName) {
	
		OriginProject pro = this.searchOriginProjectCode(code);
		pro.setName(newName);
		return true;
	}
	
	public boolean modifyOriginProjectByCodeDes(String code, String newDescription) {
	
		OriginProject pro = this.searchOriginProjectCode(code);
		pro.setDescription(newDescription);
		return true;
	}
	
	public boolean modifyOriginProjectByCodePath(String code, String newParentPath, String newParentFolder) {
	
		OriginProject pro = this.searchOriginProjectCode(code);
		pro.setPath(newParentPath+"\\"+pro.getName());
		pro.setParentFolder(newParentFolder);
		return true;
	}
	
	public boolean modifyOriginProjectByCodePath(String code, String newPath) {
	
		OriginProject pro = this.searchOriginProjectCode(code);
		pro.setPath(newPath);
		return true;
	}
	
	public boolean modifyOriginProjectByCodeAlter(String code, String newAlterDate) {
	
		OriginProject pro = this.searchOriginProjectCode(code);
		pro.setAlterDate(newAlterDate);
		return true;
	}
	
	public boolean modifyOriginProjectByCodeSize(String code, double newSize) {
	
		OriginProject pro = this.searchOriginProjectCode(code);
		pro.setSize(newSize);
		return true;
	}
	
	public boolean modifyOriginProjectByCodeChFolders(String code, List<String> newChildFolderList) {
	
		OriginProject pro = this.searchOriginProjectCode(code);
		pro.setChildFolderList(newChildFolderList);
		return true;
	}
	
	public boolean modifyOriginProjectByCodeTags(String code, List<String> newTagList) {
	
		OriginProject pro = this.searchOriginProjectCode(code);
		pro.setTagList(newTagList);
		return true;
	}
	
	public boolean modifyOriginProjectByCodeSMems(String code, List<String> newSharedMemberList) {
	
		OriginProject pro = this.searchOriginProjectCode(code);
		pro.setSharedMemberList(newSharedMemberList);
		return true;
	}
	
	public boolean modifyOriginProjectByPFolderPath(String parentFolder, String newPath) {
	
		OriginProjectList proList = this.searchOriginProjectPFolder(parentFolder);
		if(proList.getList().isEmpty())return false;
		for(OriginProject pro:proList.getList()){
			pro.setPath(newPath+"\\"+pro.getName());
		}
		return true;
	}
	
	public boolean modifyOriginProjectByPFolderName(String parentFolder, String newName) {
	
		OriginProjectList proList = this.searchOriginProjectPFolder(parentFolder);
		if(proList.getList().isEmpty())return false;
		for(OriginProject pro:proList.getList()){
			pro.setName(newName);
		}
		return true;
	}
	
	public boolean modifyOriginProjectByPFolderChFolders(String parentFolder, List<String> newChildFolderList) {
	
		OriginProjectList proList = this.searchOriginProjectPFolder(parentFolder);
		if(proList.getList().isEmpty())return false;
		for(OriginProject pro:proList.getList()){
			pro.setChildFolderList(newChildFolderList);
		}
		return true;
	}
	
	public OriginProject searchOriginProjectCode(String code) {
	
		for(OriginProject pro:this.list){
			if(pro.getCode().equals(code))return pro;
		}
		return null;
	}
	
	public OriginProjectList searchOriginProjectName(String name) {
	
		OriginProjectList proList =  new OriginProjectList();
		for(OriginProject pro:this.list){
			if(pro.getName().equals(name))proList.addOriginPorject(pro);
		}
		return proList;
	}
	
	public OriginProjectList searchOriginProjectNameOwner(String name, String owner) {
	
		OriginProjectList proList =  new OriginProjectList();
		for(OriginProject pro:this.list){
			if(pro.getName().equals(name))
				if(pro.getOwner().equals(owner))proList.addOriginPorject(pro);
		}
		return proList;
	}
	
	public OriginProjectList searchOriginProjectOwner(String owner) {
	
		OriginProjectList proList =  new OriginProjectList();
		for(OriginProject pro:this.list){
			if(pro.getOwner().equals(owner))proList.addOriginPorject(pro);
		}
		return proList;
	}
	
	public OriginProject searchOriginProjectNamePFolder(String name, String parentFolder) {
	
		for(OriginProject pro:this.list){
			if(pro.getName().equals(name))
				if(pro.getParentFolder().equals(parentFolder))return pro;
		}
		return null;
	}
	
	public OriginProjectList searchOriginProjectDes(String description) {
	
		OriginProjectList proList =  new OriginProjectList();
		for(OriginProject pro:this.list){
			if(pro.getDescription().equals(description))proList.addOriginPorject(pro);
		}
		return proList;
	}
	
	public OriginProject searchOriginProjectPath(String path) {
	
		for(OriginProject pro:this.list){
			if(pro.getPath().equals(path))return pro;
		}
		return null;
	}
	
	public OriginProjectList searchOriginProjectPFolder(String parentFolder) {
	
		OriginProjectList proList =  new OriginProjectList();
		for(OriginProject pro:this.list){
			if(pro.getParentFolder().equals(parentFolder))proList.addOriginPorject(pro);
		}
		return proList;
	}
	
	public OriginProjectList searchOriginProjectSMem(String sharedMember) {
	
		OriginProjectList proList =  new OriginProjectList();
		for(OriginProject pro:this.list){
			for(String str:pro.getSharedMemberList()){
				if(str.equals(sharedMember))proList.addOriginPorject(pro);
			}
		}
		return proList;
	}
	
	public OriginProjectList searchOriginProjectTags(List<String> tagList) {
	
		OriginProjectList proList =  new OriginProjectList();
		for(OriginProject pro:this.list){
			for(String str:pro.getTagList()){
				for(String str2:tagList){
					if(str2.equals(str))proList.addOriginPorject(pro);
				}
			}
		}
		return proList;
	}
	
	public OriginProjectList searchOriginProjectTags(List<String> tagList, String name, String description, String path) {
	
		OriginProjectList proList =  new OriginProjectList();
		for(OriginProject pro:this.list){
			if(pro.getName().equals(name)){
				if(pro.getDescription().equals(description)){
					StringTokenizer tokens = new StringTokenizer(pro.getPath(),"\\");
					while(tokens.hasMoreElements()){
						if(tokens.nextToken().equals(path)){
							for(String str:pro.getTagList()){
								for(String str2:tagList){
									if(str2.equals(str))proList.addOriginPorject(pro);
								}
							}
							
						}
					}
				}
			}
			
		}
		return proList;
	}
	public List<OriginProject> getList() {
		return list;
	}
	public void setList(List<OriginProject> list) {
		this.list = list;
	}
	
}
