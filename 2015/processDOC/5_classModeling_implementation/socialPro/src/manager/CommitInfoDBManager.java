package manager;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import model.CommitInfo;
import model.Team;
import model.TeamList;
import socialProExceptions.CommitExcetion;
import socialProExceptions.DAOException;
import socialProExceptions.FileException;
import socialProExceptions.FolderException;
import socialProExceptions.ProjectException;
import socialProExceptions.RemoteFileException;
import socialProExceptions.TeamException;
import action.CommitInsertAction;
import action.CommitSearchAction;
import action.CommitUpdateAction;

import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.SftpException;

import factory.ActionFactory;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : CommitInfoDBManager.java
//  @ Date : 2015-07-28
//  @ Author : 
//
//




public class CommitInfoDBManager {
	
	private static CommitInfoDBManager INSTANCE;
	
	static{INSTANCE = new CommitInfoDBManager();}
	
	private CommitInfoDBManager(){}
	
	public static CommitInfoDBManager getINSTANCE() {
		return INSTANCE;
	}

//////////////////////    insert
	
	public String insertCommitInfo(CommitInfo commitInfo) throws DAOException, CommitExcetion {
	
		return ((CommitInsertAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitActionImpl")).insertCommit(commitInfo);
	}
	
	
///////////////////////////  search
	
	public List<CommitInfo> searchCommitCode(String commitCode) throws FileNotFoundException, DAOException, FileException, SftpException, IOException, JSchException, RemoteFileException, ParseException{
		
		return ((CommitSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitActionImpl")).searchCommitCode(commitCode);
	}

	public CommitInfo searchOnlyCommitCode(String commitCode) throws FileNotFoundException, DAOException, FileException, SftpException, IOException, JSchException, RemoteFileException, ParseException{
		
		return ((CommitSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitActionImpl")).searchOnlyCommitCode(commitCode);
	}

	public Map<String,CommitInfo> searchCommitCode(List<String> commitCodeList) throws FileNotFoundException, DAOException, FileException, SftpException, IOException, JSchException, RemoteFileException, ParseException{
		
		return ((CommitSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitActionImpl")).searchCommitCodeList(commitCodeList);
	}
	
	public Map<String,Map<String,List<CommitInfo>>> searchMemberCommit(String memberCode) throws DAOException, ParseException, FolderException, ProjectException, IOException, TeamException, FileException, SftpException, JSchException, RemoteFileException, CommitExcetion{
		
		Map<String,Map<String,List<CommitInfo>>> resMap = new HashMap<String,Map<String,List<CommitInfo>>>();
		
		Map<String,Map<String,List<String>>> projectChildern = FileNodeManager.getINSTANCE().searchMemProjectChilds(memberCode);
		if(!projectChildern.isEmpty()){
			
			Map<String, List<CommitInfo>> projectMap= ((CommitSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitActionImpl")).searchProjectCommitList(projectChildern);
			if(!projectMap.isEmpty()){
				resMap.put(memberCode, projectMap);
			}
		}
		
		TeamList teamList = TeamManager.getINSTANCE().searchTeamMCode(memberCode);
		if(!teamList.getList().isEmpty()){
			for(Team team : teamList.getList()){
				Map<String, Map<String, List<String>>> teamProjectChildern = TeamFileNodeManager.getINSTANCE().searchTeamCopiedProjectChilds(team.getCode(), memberCode);
				if(!teamProjectChildern.isEmpty()){
					Map<String, List<CommitInfo>> projectMap= ((CommitSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitActionImpl")).searchTeamProjectCommitList(teamProjectChildern);
					if(!projectMap.isEmpty()){
						resMap.put(team.getCode(), projectMap);
					}
				}
			}
		}
		
		return resMap;
	}

	public List<CommitInfo> searchMemberProjectCommit(String memberCode,String projectCode) throws DAOException, ParseException, FolderException, ProjectException, IOException, TeamException, FileException, SftpException, JSchException, RemoteFileException{
		
		Map<String, List<String>> projectChildern = FileNodeManager.getINSTANCE().searchMemProjectChilds(memberCode, projectCode);
		if(!projectChildern.isEmpty()){
			
			return ((CommitSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitActionImpl")).searchMemberProjectCommitList(memberCode, projectChildern);
		}
		
		return new ArrayList<CommitInfo>();
	}

	public List<CommitInfo> searchTeamProjectCommit(String memberCode,String teamCode,String projectCode) throws DAOException, ParseException, FolderException, ProjectException, IOException, TeamException, FileException, SftpException, JSchException, RemoteFileException, CommitExcetion{
		
		Map<String, List<String>> projectChildern;
		if(memberCode.equals(teamCode)){
			projectChildern = TeamFileNodeManager.getINSTANCE().searchTeamSharedProjectChilds(teamCode, projectCode);
		}else projectChildern = TeamFileNodeManager.getINSTANCE().searchTeamCopiedProjectChilds(teamCode, memberCode, projectCode);
		if(!projectChildern.isEmpty()){
			return ((CommitSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitActionImpl")).searchMemberProjectCommitList(memberCode, projectChildern);
		}
		
		return new ArrayList<CommitInfo>();
	}
	
	public List<CommitInfo> searchCommitInfoContentDetails(String fileCode, List<CommitInfo> commitInfoList) throws FileNotFoundException, ParseException, DAOException, FileException, SftpException, IOException, JSchException, RemoteFileException{
		
		return ((CommitSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitActionImpl")).searchCommitInfoContentDetails(fileCode, commitInfoList);
	}
	public List<CommitInfo> searchCommitInfoByDate(String objCode, String date) throws FileNotFoundException, DAOException, ParseException, FileException, SftpException, IOException, JSchException, RemoteFileException{
		
		return ((CommitSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitActionImpl")).searchCommitInfoByDate(objCode, date);
	}
	public List<CommitInfo> searchCommitInfoContentByDate(String objCode, String date) throws FileNotFoundException, DAOException, ParseException, FileException, SftpException, IOException, JSchException, RemoteFileException{
		
		return ((CommitSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitActionImpl")).searchCommitInfoByDate(objCode, date);
	}
///////////////////////  modify
	
	public boolean sendMergeCommitList(List<String> commitCodeList) throws DAOException{
		
		return ((CommitUpdateAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitActionImpl")).sendMergeCommitList(commitCodeList);
	}

	public boolean mergeCommitCode(String commitCode) throws DAOException{
		
		return ((CommitUpdateAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitActionImpl")).sendMergeCommit(commitCode);
	}
	
}
