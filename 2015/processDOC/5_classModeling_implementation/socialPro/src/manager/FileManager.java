package manager;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.ParseException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.security.auth.login.LoginException;

import model.CommitInfo;
import model.CommitMessage;
import model.CopiedFile;
import model.CopiedFileList;
import model.OriginFile;
import model.OriginFileList;
import model.OriginFolder;
import socialProExceptions.CommitExcetion;
import socialProExceptions.DAOException;
import socialProExceptions.FileException;
import socialProExceptions.FolderException;
import socialProExceptions.MemberException;
import socialProExceptions.ProjectException;
import socialProExceptions.RemoteFileException;
import socialProExceptions.TeamException;
import action.FileSearchAction;

import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.SftpException;

import factory.ActionFactory;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : FileManger.java
//  @ Date : 2015-07-28
//  @ Author : 
//
//




public class FileManager implements FileModifyable, FileSearchable, FileCreatable, FileDetelable {

	private static FileManager INSTANCE;
	private Map<String,File>  fileMap;
	
	static{
		INSTANCE = new FileManager();	}
	
	private FileManager(){
		this.fileMap = new HashMap<String, File>();
	}
	
	
	
	public static FileManager getINSTANCE() {
		if(INSTANCE==null)INSTANCE = new FileManager();
		return INSTANCE;
	}

	@Override
	public String createFile(String memberCode, String name, String folderPath) throws DAOException, ParseException, FileNotFoundException, SftpException, IOException, JSchException, FileException, RemoteFileException, FolderException {
		// TODO Auto-generated method stub

		if(FileDBManager.getINSTANCE().checkOriginFilePath(folderPath+"\\"+name))return null;
		OriginFile file =FileDBManager.getINSTANCE().insertOriginFile(memberCode, name, folderPath);
		if(this.fileMap.containsKey(file.getPath())) this.fileMap.remove(file.getPath());
		this.fileMap.put(file.getPath(), file);
		return file.getCode();
	}

	@Override
	public String createFile(String memberCode, String name, String folderPath,String content) throws DAOException, ParseException, FileNotFoundException, SftpException, IOException, JSchException, FileException, RemoteFileException, FolderException{
		// TODO Auto-generated method stub
		if(FileDBManager.getINSTANCE().checkOriginFilePath(folderPath+"\\"+name))return null;
		OriginFile file =  FileDBManager.getINSTANCE().insertOriginFile(memberCode, name, folderPath, content);
		if(this.fileMap.containsKey(file.getPath())) this.fileMap.remove(file.getPath());
		this.fileMap.put(file.getPath(), file);
		return file.getCode();
	}

	@Override
	public String createFileCode(String memberCode, String name,String folderCode) throws DAOException, ParseException, FileNotFoundException, SftpException, IOException, JSchException, FileException, RemoteFileException, FolderException{
		// TODO Auto-generated method stub

		if(FileDBManager.getINSTANCE().checkOriginFileName(folderCode, name))return null;
		OriginFile file = FileDBManager.getINSTANCE().insertOriginFileByFCode(memberCode, name, folderCode);
		if(this.fileMap.containsKey(file.getPath())) this.fileMap.remove(file.getPath());
		this.fileMap.put(file.getPath(), file);
		return file.getCode();
	}

	@Override
	public OriginFile createFileCode(String memberCode, String name,String folderCode, String content) throws DAOException, ParseException, FileNotFoundException, SftpException, IOException, JSchException, FileException, RemoteFileException, FolderException, ProjectException{
		// TODO Auto-generated method stub
		System.out.println("createFileCode");
		
		OriginFile file = FileDBManager.getINSTANCE().insertOriginFileByFCode(memberCode, name, folderCode,content);
		if(this.fileMap.containsKey(file.getPath())) this.fileMap.remove(file.getPath());
		this.fileMap.put(file.getPath(), file);
		return file;
	}

	@Override
	public OriginFile createCommitFileCode(String storageCode, String name,String folderCode, String content) throws DAOException, ParseException,FileNotFoundException, SftpException, IOException, JSchException,
			FileException, RemoteFileException, CommitExcetion, FolderException, ProjectException {
		// TODO Auto-generated method stub
		
		System.out.println("createFileCode..with commit\n"+storageCode);
		if(FileDBManager.getINSTANCE().checkOriginFileName(folderCode, name)){
			System.out.println("??");
			return null;
		}
		OriginFile file = FileDBManager.getINSTANCE().insertCommitFile(storageCode, name, folderCode, content);
		if(this.fileMap.containsKey(file.getPath())) this.fileMap.remove(file.getPath());
		this.fileMap.put(file.getPath(), file);
		return file;
	}

	@Override
	public Map<String,CopiedFile> createCommitTeamFile(String storageCode,String storageName, String name, String folderPath, String content)
			throws DAOException, ParseException, FileNotFoundException, SftpException, IOException, JSchException, FileException, RemoteFileException,FolderException, ProjectException, CommitExcetion{
		
		//get parentFolder (type: originFolder)
		OriginFolder parentInfo = FolderManager.getINSTANCE().justSearchFolderPath(folderPath);
		
		Map<String,CopiedFile> resFileMap = FileDBManager.getINSTANCE().insertCommitTeamFile(parentInfo, storageCode, name, content); 
		if(!resFileMap.isEmpty()){
			for(CopiedFile cp : resFileMap.values()){
				if(this.fileMap.containsKey(cp.getCode()))this.fileMap.remove(cp.getCode());
				if(cp instanceof CopiedFile) this.fileMap.put(cp.getCode(), cp);
				else this.fileMap.put(cp.getCode(), (OriginFile)cp);
			}
		}
		return resFileMap;
	}
	
	@Override
	public boolean insertCopiedFile(List<CopiedFile> cfList){
		for(CopiedFile cf : cfList){
			if(!this.fileMap.containsKey(cf.getCode()))this.fileMap.put(cf.getCode(), cf);
		}
		return true;
	}
	
	public boolean insertCopiedFile(CopiedFile cf){
		if(this.fileMap.containsKey(cf.getCode()))this.fileMap.remove(cf.getCode());
		this.fileMap.put(cf.getCode(), cf);
		return true;
	}
	
	@Override
	public boolean insertOriginFile(OriginFile oriFile){
		if(!(oriFile instanceof CopiedFile)){
			if(this.fileMap.containsKey(oriFile.getCode()))this.fileMap.remove(oriFile.getCode());
			this.fileMap.put(oriFile.getCode(), oriFile);
			return true;
		}
		return false;
	}

/////////////////////////////////////////////////////////////   search
	
	@Override
	public OriginFile justSearchOriginFileCode(String fileCode) throws DAOException, ParseException, FolderException, JSchException, IOException, SftpException{
		
		return FileDBManager.getINSTANCE().justSearchOriginFileCode(fileCode); 
	}
	@Override
	public OriginFile justSearchOriginFilePath(String filePath) throws DAOException, ParseException, FolderException, JSchException, IOException, SftpException{
		
		return FileDBManager.getINSTANCE().justSearchOriginFilePath(filePath); 
	}
	
	@Override
	public File searchFileCode(String fileCode) throws DAOException, ParseException, FolderException{
		
		File file = FileDBManager.getINSTANCE().searchFileCode(fileCode);
		if(file!=null){
			String filePath = file.getPath();
			if(this.fileMap.containsKey(filePath))this.fileMap.remove(filePath);
			if(file instanceof CopiedFile)this.fileMap.put(filePath, (CopiedFile)file);
			else this.fileMap.put(filePath, (OriginFile)file);
		}
		
		return file;
	}
	@Override
	public File searchFilePath(String filePath) throws DAOException, ParseException, FolderException{
		if(!this.fileMap.containsKey(filePath)){
			File file = FileDBManager.getINSTANCE().searchFilePath(filePath);
			if(file!=null){
				if(this.fileMap.containsKey(filePath))this.fileMap.remove(filePath);
				if(file instanceof CopiedFile)this.fileMap.put(filePath, (CopiedFile)file);
				else this.fileMap.put(filePath, (OriginFile)file);
			}
			return file;
		}else{
			return this.fileMap.get(filePath); 
		}
	}
	@Override
	public File searchFileContentPath(String filePath) throws DAOException, ParseException, FolderException, FileNotFoundException, SftpException, IOException, JSchException{
		
		System.out.println("\n          FileManager         searchFileContentPath       line     212");
		if(this.fileMap.containsKey(filePath)){
			boolean hasContent=false;
			File file = this.fileMap.get(filePath);
			if(file instanceof CopiedFile){
				CopiedFile cpFile = (CopiedFile)file;
				if(cpFile.getContent()!=null)return cpFile;
			}else{
				OriginFile oriFile = (OriginFile)file;
				if(oriFile.getContent()!=null)return oriFile;
			}
			this.fileMap.remove(filePath);
		}
		System.out.println("go get content...");
		File file = FileDBManager.getINSTANCE().searchFileContentPath(filePath);
		this.fileMap.put(filePath, file);
		return file;
	}
	@Override
	public File searchFileContentCode(String fileCode) throws DAOException, ParseException, FolderException, FileNotFoundException, SftpException, IOException, JSchException{

		System.out.println("\n          FileManager         searchFileContentPath       line     212");
		File file = FileDBManager.getINSTANCE().searchFileContentCode(fileCode);
		if(file!=null){
			String filePath = file.getPath();
			if(file instanceof CopiedFile){
				CopiedFile cpFile = (CopiedFile)file;
				if(this.fileMap.containsKey(filePath))this.fileMap.remove(filePath);
				this.fileMap.put(filePath, cpFile);
				if(cpFile.getContent()!=null)return cpFile;
			}else{
				OriginFile oriFile = (OriginFile)file;
				if(this.fileMap.containsKey(filePath))this.fileMap.remove(filePath);
				this.fileMap.put(filePath, oriFile);
				if(oriFile.getContent()!=null)return oriFile;
			}
			System.out.println("go get content...");
		}
	
		return null;
	}
	
	@Override
	public List<File> searchSiblingFileByPath(String filePath)throws DAOException, ParseException, FolderException{

		List<File> fileList = FileDBManager.getINSTANCE().searchSiblingFileByPath(filePath);
		if(!fileList.isEmpty()){
			for(File file : fileList){
				String filePath1 = file.getPath();
				if(this.fileMap.containsKey(filePath1))this.fileMap.remove(filePath1);
				if(file instanceof CopiedFile)this.fileMap.put(filePath1, (CopiedFile)file);
				else this.fileMap.put(filePath1, (OriginFile)file);
			}
		}
		return fileList;
	}
	@Override
	public List<File> searchSiblingFileByCode(String fileCode)throws DAOException, ParseException, FolderException{

		List<File> fileList = FileDBManager.getINSTANCE().searchSiblingFileByCode(fileCode);
		if(!fileList.isEmpty()){
			for(File file : fileList){
				String filePath = file.getPath();
				if(this.fileMap.containsKey(filePath))this.fileMap.remove(filePath);
				if(file instanceof CopiedFile)this.fileMap.put(filePath, (CopiedFile)file);
				else this.fileMap.put(filePath, (OriginFile)file);
			}
		}
		return fileList;
	}
	@Override
	public List<File> searchFileByFolderPath(String folderPath)throws DAOException, ParseException, FolderException{
		
		List<File> fileList = FileDBManager.getINSTANCE().searchFileByFolderPath(folderPath);
		if(!fileList.isEmpty()){
			for(File file : fileList){
				String filePath1 = file.getPath();
				if(this.fileMap.containsKey(filePath1))this.fileMap.remove(filePath1);
				if(file instanceof CopiedFile)this.fileMap.put(filePath1, (CopiedFile)file);
				else this.fileMap.put(filePath1, (OriginFile)file);
			}
		}
		return fileList;
	}
	@Override
	public List<File> searchFileByFolderCode(String folderCode)throws DAOException, ParseException, FolderException{

		List<File> fileList = FileDBManager.getINSTANCE().searchFileByFolderCode(folderCode);
		if(!fileList.isEmpty()){
			for(File file : fileList){
				String filePath = file.getPath();
				if(this.fileMap.containsKey(filePath))this.fileMap.remove(filePath);
				if(file instanceof CopiedFile)this.fileMap.put(filePath, (CopiedFile)file);
				else this.fileMap.put(filePath, (OriginFile)file);
			}
		}
		return fileList;
	}
	@Override
	public List<File> searchAllFileByFPath(String folderPath) throws DAOException, ParseException, FolderException{
		
		List<File> fileList = FileDBManager.getINSTANCE().searchAllFileByFolderPath(folderPath);
		if(!fileList.isEmpty()){
			for(File file : fileList){
				String filePath = file.getPath();
				if(this.fileMap.containsKey(filePath))this.fileMap.remove(filePath);
				if(file instanceof CopiedFile)this.fileMap.put(filePath, (CopiedFile)file);
				else this.fileMap.put(filePath, (OriginFile)file);
			}
		}
		return fileList;
	}
	@Override
	public List<File> searchAllFileByFCode(String folderCode) throws DAOException, ParseException, FolderException{

		List<File> fileList = FileDBManager.getINSTANCE().searchAllFileByFolderCode(folderCode);
		if(!fileList.isEmpty()){
			for(File file : fileList){
				String filePath = file.getPath();
				if(this.fileMap.containsKey(filePath))this.fileMap.remove(filePath);
				if(file instanceof CopiedFile)this.fileMap.put(filePath, (CopiedFile)file);
				else this.fileMap.put(filePath, (OriginFile)file);
			}
		}
		return fileList;
	}
	
	
	@Override
	public List<File> searchFileAllByCpFolderCode(String cpFolderCode) throws DAOException, ParseException, FolderException{
		
		List<File> fileList = FileDBManager.getINSTANCE().searchFileAllByCpFolderCode(cpFolderCode);
		if(!fileList.isEmpty()){
			for(File file : fileList){
				String filePath = file.getPath();
				if(this.fileMap.containsKey(filePath))this.fileMap.remove(filePath);
				if(file instanceof CopiedFile)this.fileMap.put(filePath, (CopiedFile)file);
				else this.fileMap.put(filePath, (OriginFile)file);
			}
		}
		return fileList;
	}
	@Override
	public List<File> searchFileAllByCpFolderPath(String cpFolderPath) throws DAOException, ParseException, FolderException{
		
		List<File> fileList = FileDBManager.getINSTANCE().searchFileAllByCpFolderPath(cpFolderPath);
		if(!fileList.isEmpty()){
			for(File file : fileList){
				String filePath = file.getPath();
				if(this.fileMap.containsKey(filePath))this.fileMap.remove(filePath);
				if(file instanceof CopiedFile)this.fileMap.put(filePath, (CopiedFile)file);
				else this.fileMap.put(filePath, (OriginFile)file);
			}
		}
		return fileList;
	}
	@Override
	public OriginFileList searchAllFilesByOnlyOriginFCode(String oriFolderCode) throws DAOException, ParseException, FolderException{

		OriginFileList fileList = FileDBManager.getINSTANCE().searchAllFilesByOnlyOriginFCode(oriFolderCode);
		if(!fileList.getList().isEmpty()){
			for(OriginFile file : fileList.getList()){
				String filePath = file.getPath();
				if(this.fileMap.containsKey(filePath))this.fileMap.remove(filePath);
				this.fileMap.put(filePath, file); 
			}
		}
		return fileList;
	}
	@Override
	public OriginFileList searchAllFilesByOnlyOriginFPath(String oriFolderPath) throws DAOException, ParseException, FolderException{

		OriginFileList fileList = FileDBManager.getINSTANCE().searchAllFilesByOnlyOriginFPath(oriFolderPath);
		if(!fileList.getList().isEmpty()){
			for(OriginFile file : fileList.getList()){
				String filePath = file.getPath();
				if(this.fileMap.containsKey(filePath))this.fileMap.remove(filePath);
				this.fileMap.put(filePath, file); 
			}
		}
		return fileList;
	}
	
	@Override
	public OriginFile searchOnlyOriginFileCode(String fileCode)throws DAOException, ParseException, FileNotFoundException, SftpException, IOException, JSchException, FolderException{
		
		OriginFile oriFile = FileDBManager.getINSTANCE().searchOnlyOriginFileCode(fileCode);
		if(oriFile!=null){
			String filePath = oriFile.getPath();
			if(this.fileMap.containsKey(filePath))this.fileMap.remove(filePath);
			this.fileMap.put(filePath, oriFile);
		}
		return oriFile;
	}
	@Override
	public OriginFile searchOnlyOriginFilePath(String filePath) throws DAOException, ParseException, FileNotFoundException, SftpException, IOException, JSchException, FolderException{
		if(this.fileMap.containsKey(filePath)){
			if(this.fileMap.get(filePath) instanceof CopiedFile)return null;
			else return (OriginFile)this.fileMap.get(filePath);
		}else{
			OriginFile oriFile = FileDBManager.getINSTANCE().searchOnlyOriginFilePath(filePath);
			if(oriFile!=null){
				this.fileMap.put(filePath, oriFile);
			}
			return oriFile;
		}
	}
	@Override
	public OriginFile searchOnlyOriginFilePathContent(String filePath) throws DAOException, ParseException, FileNotFoundException, SftpException, IOException, JSchException, FolderException{
		System.out.println("\n          FileManager     searchOnlyOriginFilePathContent        line    397");
		if(this.fileMap.containsKey(filePath)){
			if(this.fileMap.get(filePath) instanceof CopiedFile)return null;
			else {
				OriginFile oriFile = (OriginFile)this.fileMap.get(filePath);
				if(oriFile.getContent()==null){
					oriFile = FileDBManager.getINSTANCE().searchOnlyOriginFilePathContent(filePath);
					this.fileMap.remove(filePath);
					this.fileMap.put(filePath, oriFile);
				}
				String str = oriFile.getContent();
				if(str==null)System.out.println("content is null........wha.....");
				else System.out.println("cont   :  \n"+oriFile.getContent());
				return oriFile;
			}
		}else{
			OriginFile oriFile = FileDBManager.getINSTANCE().searchOnlyOriginFilePathContent(filePath);
			if(oriFile!=null){
				this.fileMap.put(filePath, oriFile);
			}
			String str = oriFile.getContent();
			if(str==null)System.out.println("content is null........wha.....");
			else System.out.println("cont   :  \n"+oriFile.getContent());
			return oriFile;
		}
	}		
	
	//return only CopiedFile or Null
	@Override
	public CopiedFile searchOnlyCpFileCode(String fileCode) throws DAOException, ParseException, FileNotFoundException, SftpException, IOException, JSchException{

		CopiedFile cpFile = FileDBManager.getINSTANCE().searchOnlyCpFileCode(fileCode);
		if(cpFile!=null){
			String filePath = cpFile.getPath();
			if(this.fileMap.containsKey(filePath))this.fileMap.remove(filePath);
			this.fileMap.put(filePath, cpFile);
		}
		return cpFile;
	}
	@Override
	public CopiedFile searchOnlyCpFilePath(String filePath) throws DAOException, ParseException, FileNotFoundException, SftpException, IOException, JSchException{
		if(this.fileMap.containsKey(filePath)){
			if(this.fileMap.get(filePath) instanceof CopiedFile)return (CopiedFile)this.fileMap.get(filePath);
			else return null;
		}else{
			CopiedFile cpFile = FileDBManager.getINSTANCE().searchOnlyCpFilePath(filePath);
			if(cpFile!=null){
				this.fileMap.put(filePath, cpFile);
			}
			return cpFile;
		}
	}
	@Override
	public CopiedFile searchOnlyCpFileContent(String filePath) throws DAOException, ParseException, FileNotFoundException, SftpException, IOException, JSchException{
		if(this.fileMap.containsKey(filePath)){
			File file = this.fileMap.get(filePath);
			if(!(file instanceof CopiedFile)){
				System.out.println("ohno is originFile....");
				return null;
			}
			else {
				CopiedFile cpFile = (CopiedFile)file;
				if(cpFile.getContent()==null){
					System.out.println("go get content...");
					cpFile = FileDBManager.getINSTANCE().searchOnlyCpFileContent(filePath);
					this.fileMap.remove(filePath);
					this.fileMap.put(filePath, cpFile);
				}
				return cpFile;
			}
		}else{
			System.out.println("go get content...!!!!");
			CopiedFile cpFile = FileDBManager.getINSTANCE().searchOnlyCpFileContent(filePath);
			if(cpFile!=null){
				this.fileMap.put(filePath, cpFile);
			}
			return cpFile;
		}
	}
	
	@Override
	public OriginFileList searchOnlyOriginFileByFolderPath(String oriFolderPath)throws DAOException, ParseException, FolderException{
		
		OriginFileList oriFileList = FileDBManager.getINSTANCE().searchOnlyOriginFileByFolderPath(oriFolderPath);
		if(!oriFileList.getList().isEmpty()){
			for(OriginFile oriFile : oriFileList.getList()){
				String filePath = oriFile.getPath();
				if(this.fileMap.containsKey(filePath))this.fileMap.remove(filePath);
				this.fileMap.put(filePath, oriFile);
			}
		}
		return oriFileList;
	}
	@Override
	public OriginFileList searchOnlyOriginFileByFolderCode(String oriFolderCode)throws DAOException, ParseException, FolderException{

		OriginFileList oriFileList = FileDBManager.getINSTANCE().searchOnlyOriginFileByFolderCode(oriFolderCode);
		if(!oriFileList.getList().isEmpty()){
			for(OriginFile oriFile : oriFileList.getList()){
				String filePath = oriFile.getPath();
				if(this.fileMap.containsKey(filePath))this.fileMap.remove(filePath);
				this.fileMap.put(filePath, oriFile);
			}
		}
		return oriFileList;
	}	
	//return FileList for copiedFolder
	@Override
	public List<File> searchOnlyCpFileByFolderPath(String cpFolderPath)throws DAOException, ParseException, FolderException{
		
		List<File> fileList = FileDBManager.getINSTANCE().searchOnlyCpFileByFolderPath(cpFolderPath);
		if(!fileList.isEmpty()){
			for(File file : fileList){
				if(file!=null){
					String filePath = file.getPath();
					if(this.fileMap.containsKey(filePath))this.fileMap.remove(filePath);
					if(file instanceof CopiedFile) this.fileMap.put(filePath, (CopiedFile)file);
					else this.fileMap.put(filePath, (OriginFile)file);
				}
			}
		}
		return fileList;
	}
	@Override
	public List<File> searchOnlyCpFileByFolderCode(String cpFolderCode)throws DAOException, ParseException, FolderException{

		List<File> fileList = FileDBManager.getINSTANCE().searchOnlyCpFileByFolderCode(cpFolderCode);
		if(!fileList.isEmpty()){
			for(File file : fileList){
				if(file!=null){
					String filePath = file.getPath();
					if(this.fileMap.containsKey(filePath))this.fileMap.remove(filePath);
					if(file instanceof CopiedFile) this.fileMap.put(filePath, (CopiedFile)file);
					else this.fileMap.put(filePath, (OriginFile)file);
				}
			}
		}
		return fileList;
	}
	
	@Override
	public boolean isCopiedFile(String filePath) throws DAOException,ParseException, FolderException, ProjectException, FileNotFoundException, SftpException, IOException, JSchException{
		if(this.fileMap.containsKey(filePath)){
			File file = this.fileMap.get(filePath);
			if(file instanceof CopiedFile) return true;
			else return false;
		}else{
			File file = FileDBManager.getINSTANCE().searchFilePath(filePath);
			if(file!=null){
				if(file instanceof CopiedFile) {
					this.fileMap.put(filePath, (CopiedFile)file);
					return true;
				}
				else {
					this.fileMap.put(filePath, (OriginFile)file);
					return false;
				}
			}return false;
		}
	}
	@Override
	public boolean isOriginFile(String filePath) throws DAOException,ParseException, FolderException, ProjectException,FileNotFoundException, SftpException, IOException, JSchException{
		if(this.fileMap.containsKey(filePath)){
			File file = this.fileMap.get(filePath);
			if(file instanceof CopiedFile) return false;
			else return true;
		}else{
			File file = FileDBManager.getINSTANCE().searchFilePath(filePath);
			if(file!=null){
				if(file instanceof CopiedFile) {
					this.fileMap.put(filePath, (CopiedFile)file);
					return false;
				}
				else {
					this.fileMap.put(filePath, (OriginFile)file);
					return true;
				}
			}return false;
		}
	}

	@Override
	public boolean checkFilePath(String filePath) throws DAOException, ParseException, FolderException{
		//exist return true;
		if(this.fileMap.containsKey(filePath))return true;
		else{
			File file = FileDBManager.getINSTANCE().searchFilePath(filePath);
			if(file!=null){
				if(file instanceof CopiedFile) {this.fileMap.put(filePath, (CopiedFile)file);}
				else {this.fileMap.put(filePath, (OriginFile)file);}
				return true;
			}
			return false;
		}
	}
	
	@Override
	public boolean checkFileDiff(String fileCode, List<CommitInfo> commitInfoList) throws FileNotFoundException, DAOException, FileException, SftpException, IOException, JSchException, RemoteFileException, ParseException{
		System.out.println("\n                FileManager        checkFileDiff    line 595");
		return FileDBManager.getINSTANCE().checkFileDiff(fileCode, commitInfoList);
	}
////////////////////////////////////////////////////////////     modify	
	
	@Override
	public boolean modifyFileContent(String ownerCode, String storageCode,String projectCode, String folderCode, String fileCode,String newContent) throws FileNotFoundException, LoginException, DAOException, SftpException, IOException, JSchException, FileException, ParseException, RemoteFileException, FolderException, CommitExcetion, TeamException {
		// TODO Auto-generated method stub
		
		if(!ProjectDBManager.getINSTANCE().checkProjectDeletePowerByCode(ownerCode, projectCode))throw new FileException("This User can't update file information.");
		return FileDBManager.getINSTANCE().updateFileContent(ownerCode, storageCode, projectCode, folderCode, fileCode, newContent);
	}
	
	@Override
	public boolean modifyFileContent(String ownerCode, String storageCode,String projectCode, String folderCode, String fileCode,String filePath,
		String newContent) throws FileNotFoundException, LoginException, DAOException, SftpException, IOException, JSchException, FileException, ParseException, RemoteFileException, FolderException, CommitExcetion, TeamException {
		// TODO Auto-generated method stub
		System.out.println("FileManager   -   modifyFileContent ");
		if(this.fileMap.containsKey(filePath)){
			OriginFile file = (OriginFile) this.fileMap.get(filePath);
			if(file.getContent()!=null){
				file.setContent(newContent);
			}
		}
		if(!ProjectDBManager.getINSTANCE().checkProjectDeletePowerByCode(ownerCode, projectCode))throw new FileException("This User can't update file information.");
		return FileDBManager.getINSTANCE().updateFileContent(ownerCode, storageCode, projectCode, folderCode, fileCode, newContent);
	}
	
	@Override
	public CommitInfo mergeFileContent(String ownerCode, String filePath, String newFileContent, String commitFileCode, String commiter, String commitCode, List<String> commitCodeList) throws FileNotFoundException, LoginException,DAOException, SftpException, IOException, JSchException,FileException, ParseException, RemoteFileException, CommitExcetion, TeamException, FolderException, MemberException, ProjectException{
		
		System.out.println("\n      FileManager   mergeFileContent() start!    line     648");
		File oriFile = this.searchFilePath(filePath);
		String fileCode ;
		if(oriFile instanceof CopiedFile){
			CopiedFile cpFile = (CopiedFile)oriFile;
			fileCode = cpFile.getCode();
			cpFile.setContent(newFileContent);
		}else{
			OriginFile cpFile = (OriginFile)oriFile;
			fileCode = cpFile.getCode();
			cpFile.setContent(newFileContent);
		}
		
		return FileDBManager.getINSTANCE().mergeFileContent(ownerCode, fileCode, newFileContent, commitFileCode, commiter, commitCode, commitCodeList);
		
	}
	
	@Override
	public Map<OriginFile, CommitInfo> mergeNewFileContent(String ownerCode, String folderPath, String newContent, String commitFileCode, String commiter, String commitCode, List<String> commitCodeList) throws FileNotFoundException, LoginException,DAOException, SftpException, IOException, JSchException,FileException, ParseException, RemoteFileException, CommitExcetion, TeamException, FolderException, MemberException, ProjectException{

		System.out.println("\n    FileManager   mergeNewFileContent() start!   line   669");
		//get Commint obj
		File commitFile = this.searchFileCode(commitFileCode);
		
		Map<OriginFile, CommitInfo> resMap = FileDBManager.getINSTANCE().mergeNewFileContent(ownerCode, folderPath, newContent, commitFileCode, commiter, commitCode, commitCodeList);
		if(!resMap.isEmpty()){
			OriginFile oriFile = resMap.keySet().iterator().next();
			OriginFile tmp = (OriginFile)commitFile;
			
			System.out.println("tmpCode  ::  "+tmp.getCode());
			System.out.println("tmpPath  ::  "+tmp.getPath());
			CopiedFile cpFile = new CopiedFile(tmp.getCode(), tmp.getName(), tmp.getPath(), tmp.getMakeDate(), tmp.getFolderCode(), tmp.getContent(), 0, oriFile.getCode(), oriFile.getFolderCode());

			if(tmp.getAlterDate()!=null)cpFile.setAlterDate(tmp.getAlterDate());
			this.fileMap.remove(commitFileCode);
			this.fileMap.put(commitFileCode, cpFile);
			this.fileMap.put(oriFile.getCode(), oriFile);
		}
		
		return resMap;
		
	}
	
	@Override
	public CommitInfo modifyFileContent(String ownerCode, String storageCode,String projectCode, String folderCode, String fileCode,
			String newContent, String commitTitle, String commitContent)throws FileNotFoundException, LoginException, DAOException,
			SftpException, IOException, JSchException, FileException,ParseException, RemoteFileException, CommitExcetion, FolderException, TeamException {
		// TODO Auto-generated method stub
		System.out.println("FileManager   -   modifyFileContent ");
		if(!ProjectDBManager.getINSTANCE().checkProjectDeletePowerByCode(ownerCode, projectCode))throw new FileException("This User can't update file information.");
		return FileDBManager.getINSTANCE().updateFileContent(ownerCode, storageCode, projectCode, folderCode, fileCode, newContent,commitTitle,commitContent);
	}
	
	@Override
	public CommitInfo modifyFileContent(String ownerCode, String storageCode,String projectCode, String folderCode, String fileCode,String filePath,String newContent, String commitTitle, String commitContent)
					throws FileNotFoundException, LoginException, DAOException,SftpException, IOException, JSchException, FileException,ParseException, RemoteFileException, CommitExcetion, FolderException, TeamException {
		
		// TODO Auto-generated method stub
		System.out.println("\nFileManager   -   modifyFileContent start @ "+ownerCode+" .... "+projectCode);
		if(this.fileMap.containsKey(filePath)){
			OriginFile file = (OriginFile) this.fileMap.get(filePath);
			if(file.getContent()!=null){
				file.setContent(newContent);
			}
		}
		if(!ProjectDBManager.getINSTANCE().checkProjectDeletePowerByCode(ownerCode, projectCode))throw new FileException("This User can't update file information.");
		return FileDBManager.getINSTANCE().updateFileContent(ownerCode, storageCode, projectCode, folderCode, fileCode, newContent,commitTitle,commitContent);
	}

	public String searchDiffFile(String ownerCode, String storageCode,String projectCode, String folderCode, String fileCode,
			String newContent,String commitTitle,String commitContent) throws FileNotFoundException, LoginException, DAOException, SftpException, IOException, JSchException, FileException, ParseException, RemoteFileException, CommitExcetion{
		
		return FileDBManager.getINSTANCE().searchDiffFile(fileCode);
	}
	public String searchDiffFile(String ownerCode, String storageCode,String projectCode, String folderCode, String fileCode,String newContent) throws FileNotFoundException, LoginException, DAOException, SftpException, IOException, JSchException, FileException, ParseException, RemoteFileException, CommitExcetion{
		
		return FileDBManager.getINSTANCE().searchDiffFile(fileCode);
	}

}
