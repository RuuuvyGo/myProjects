package manager;

import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.SftpException;

import model.Member;
import action.MemberDropAction;
import action.MemberInsertAction;
import action.MemberSearchAction;
import action.MemberUpdateAction;
import socialProExceptions.DAOException;
import socialProExceptions.MemberException;
import factory.ActionFactory;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : MemberDBManager.java
//  @ Date : 2015-07-28
//  @ Author : 
//
//




public class MemberDBManager {
	
	private static MemberDBManager INSTANCE;
	
	static{
		INSTANCE = new MemberDBManager();
	}
	
	private MemberDBManager(){}
		
	
	public static MemberDBManager getINSTANCE() {
		if(INSTANCE==null)INSTANCE = new MemberDBManager();
		return INSTANCE;
	}


	public Member joinMember(String nickName, String email, String pw, String school, int entranceYear) throws DAOException, SftpException, JSchException, MemberException {
	
		return ((MemberInsertAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("MemberActionImpl")).insertMember(new Member(nickName, email, pw, school, entranceYear));
	}
	
	public boolean checkMemberNickName(String nickName) throws DAOException{
	
		Member res=((MemberSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("MemberActionImpl")).searchMemberNickName(nickName);
		if(res==null) return false;
		return true;
	}
	
	public boolean checkMemberEmail(String email) throws DAOException{
	
		System.out.println("This is MemberDBManager checkMEmberEmail");
		Member model=((MemberSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("MemberActionImpl")).searchMemberEmail(email);
		if(model==null) return false;
		return true;
	}
	
	public Member checkLoginInfo(String email, String pw) throws DAOException, MemberException{
	
		System.out.println("dbManagerStrat");
		Member model=((MemberSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("MemberActionImpl")).searchMemberLoginInfo(email, pw);
		System.out.println("dbManagerend");
		if(model==null)throw new MemberException("Error retry login");
		return model;
	}
	
	public boolean deleteMember(String email, String pw) throws DAOException{
	
		return ((MemberDropAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("MemberActionImpl")).deleteMember(email, pw);
	}
	
	public boolean modifyMember(String code, String newNickName) throws DAOException{
		return ((MemberUpdateAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("MemberActionImpl")).modifyMemberNickName(code, newNickName);
	}
	
	public boolean modifyMember(String code,String nickName, String pw) throws DAOException{
		// TODO Auto-generated method stub
		return ((MemberUpdateAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("MemberActionImpl")).modifyMemberNickName(code, nickName,pw);
	}

	public boolean dropMember(String code) throws DAOException{
		// TODO Auto-generated method stub
		return ((MemberDropAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("MemberActionImpl")).deleteMember(code);
	}

	public Member searchMemberNickName(String nickName) throws DAOException{
		// TODO Auto-generated method stub
		return ((MemberSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("MemberActionImpl")).searchMemberNickName(nickName);
	}

	public Member searchMemberEmail(String email) throws DAOException{
		// TODO Auto-generated method stub
		System.out.println("MemberDBManager searchMemberEmail....");
		return ((MemberSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("MemberActionImpl")).searchMemberEmail(email);
	}
	
	public Member searchMemberCode(String code) throws DAOException{
		// TODO Auto-generated method stub
		System.out.println("MemberDBManager searchMemberCOde....");
		return ((MemberSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("MemberActionImpl")).searchMemberCode(code);
	}

	public Member searchMemberEmail(String email, String pw) throws DAOException{
		// TODO Auto-generated method stub
		return ((MemberSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("MemberActionImpl")).searchMemberLoginInfo(email, pw);
	}
}
