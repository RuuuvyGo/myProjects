package manager;

import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import model.Member;
import model.Team;
import model.TeamList;
import socialProExceptions.DAOException;
import socialProExceptions.FolderException;
import socialProExceptions.MemberException;
import socialProExceptions.ProjectException;
import socialProExceptions.TeamException;

import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.SftpException;

import form.SimpleMemberForm;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : TeamManger.java
//  @ Date : 2015-07-28
//  @ Author : 
//
//




public class TeamManager {
	
	private static TeamManager INSTANCE;
	private Map<String,Team> teamMap;
	
	static{
		INSTANCE = new TeamManager();
	}
	private TeamManager(){
		this.teamMap = new HashMap<String, Team>();
	}	
	
	public static TeamManager getINSTANCE() {
		if(INSTANCE==null)INSTANCE = new TeamManager();
		return INSTANCE;
	}

	public String createTeam(String teamName, String description, String manager,  List<String> tagList) throws DAOException, SftpException, JSchException, TeamException {
		
		if(TeamDBManager.getINSTANCE().checkTeamName(teamName))throw new TeamException("This team name has alreay used");
		String teamCode=TeamDBManager.getINSTANCE().insertTeam(teamName, description, manager, tagList);
		if(teamCode==null)throw new TeamException("Error Insert TeamInfo");
		Team t = new Team(teamCode, teamName, description, manager, tagList);
		this.teamMap.put(teamCode, t);
		
		//send alarm to all members
		
		
		return teamCode;
	}
	
	public String createTeam(String teamName, String manager ,List<String> tagList) throws DAOException, SftpException, JSchException, TeamException {
		
		if(TeamDBManager.getINSTANCE().checkTeamName(teamName))throw new TeamException("This team name has alreay used");
		String teamCode=TeamDBManager.getINSTANCE().insertTeam(teamName, manager,  tagList);
		if(teamCode==null)throw new TeamException("Error Insert TeamInfo");
		Team t = new Team(teamCode, teamName, manager, tagList);
		this.teamMap.put(teamCode, t);
		return teamCode;
	}
	
	public boolean addTeamMember(String teamCode, List<String> memberList) throws DAOException, SftpException, JSchException{
		
		if(this.teamMap.containsKey(teamCode)){
			this.teamMap.get(teamCode).setCooperatorList(memberList);
		}
		return TeamDBManager.getINSTANCE().addTeamMember(teamCode, memberList);
	}
	
	public boolean addTeamMember(String teamCode, String cooperatorCode) throws DAOException, SftpException, JSchException, ParseException, FolderException, ProjectException, IOException{
		
		if(TeamDBManager.getINSTANCE().addTeamMember(teamCode, cooperatorCode)){
			if(this.teamMap.containsKey(teamCode)){
				this.teamMap.get(teamCode).addCooperator(cooperatorCode);
			}
			return true;
		}
		return false;
	}
	
	/*public boolean deleteTeamCode(String nickName, String code) {
	
		TeamDBManager dbManager = new TeamDBManager();
		return dbManager.deleteTeamCode(nickName, code);
	}
	
	public boolean deleteTeamName(String nickName, String name) {
		
		TeamDBManager dbManager = new TeamDBManager();
		return dbManager.deleteTeamCode(nickName, name);
	
	}
	
	public boolean modifyTeamName(String nickName, String code, String newName) {
	
		TeamDBManager dbManager = new TeamDBManager();
		if(dbManager.checkTeamName(newName))return false;
		if(!dbManager.checkTeamCodeManagerNickName(code,nickName))return false;
		return dbManager.modifyTeamName(nickName, code, newName);
	}
	
	public boolean modifyTeamDes(String nickName, String code, String newDescription) {
	
		TeamDBManager dbManager = new TeamDBManager();
		if(!dbManager.checkTeamCodeManagerNickName(code,nickName))return false;
		return dbManager.modifyTeamDes(nickName, code, newDescription);
	}
	
	public boolean modifyTeamManager(String nickName, String code, String newManager) {
	
		TeamDBManager dbManager = new TeamDBManager();
		if(!dbManager.checkTeamCodeManagerNickName(code,nickName))return false;
		return dbManager.modifyTeamManager(nickName, code, newManager);
	}
	
	public boolean modifyTeamCooperators(String nickName,String code, List<String> newCooperators) {
	
		TeamDBManager dbManager = new TeamDBManager();
		if(!dbManager.checkTeamCodeManagerNickName(code,nickName))return false;
		return dbManager.modifyTeamCooperators(nickName, code, newCooperators);
	}*/
	
	public Team searchTeamCode(String teamCode) throws DAOException, TeamException {
		
		if(this.teamMap.containsKey(teamCode))return this.teamMap.get(teamCode);
		else{
			Team t = TeamDBManager.getINSTANCE().searchTeamCode(teamCode);
			if(t==null) throw new TeamException("Error search Team.");
			this.teamMap.put(t.getCode(), t);
			System.out.println(t.getManager());
			return t;
		}
	}
	
	public List<SimpleMemberForm> searchTeamCodeForMember(String teamCode) throws DAOException, TeamException, MemberException {
		
		Team t;
		if(this.teamMap.containsKey(teamCode))t = this.teamMap.get(teamCode);
		else{
			t = TeamDBManager.getINSTANCE().searchTeamCode(teamCode);
			if(t==null) throw new TeamException("Error search Team.");
			this.teamMap.put(t.getCode(), t);
		}
		
		List<SimpleMemberForm> resList = new ArrayList<SimpleMemberForm>();
		for(String memCode : t.getCooperatorList()){
			Member m = MemberManager.getINSTANCE().searchMemberCode(memCode);
			resList.add(new SimpleMemberForm(m.getCode(), m.getNickName()));
		}
		return resList;
	}
	
	public List<SimpleMemberForm> searchTeamCodeForMember(String teamCode,String memberCode) throws DAOException, TeamException, MemberException {
		
		Team t;
		if(this.teamMap.containsKey(teamCode))t = this.teamMap.get(teamCode);
		else{
			t = TeamDBManager.getINSTANCE().searchTeamCode(teamCode);
			if(t==null) throw new TeamException("Error search Team.");
			this.teamMap.put(t.getCode(), t);
		}
		
		List<SimpleMemberForm> resList = new ArrayList<SimpleMemberForm>();
		
		if(!t.getManager().equals(memberCode)){
			Member m = MemberManager.getINSTANCE().searchMemberCode(t.getManager());
			System.out.println("mem managet: "+m.getCode());
			resList.add(new SimpleMemberForm(m.getCode(), m.getNickName()));
		}
		
		for(String memCode : t.getCooperatorList()){
			if(!memCode.equals(memberCode)){
				Member m = MemberManager.getINSTANCE().searchMemberCode(memCode);
				System.out.println("mem : "+m.getCode());
				resList.add(new SimpleMemberForm(m.getCode(), m.getNickName()));
			}
		}
		
		return resList;
	}
	
	public List<String> searchCooperators(String teamName) throws DAOException {
	
		for(Team t : this.teamMap.values()){
			if(t.getName().equals(teamName))return t.getCooperatorList();
		}
		return TeamDBManager.getINSTANCE().searchCooperators(teamName);
	}
	
	public List<String> searchCooperators(String teamName, List<String> cooperatorList) throws DAOException {
	
		return TeamDBManager.getINSTANCE().searchCooperators(teamName);
	}
	
	public TeamList searchTeamTags(List<String> tagList) throws DAOException {
	
		TeamList list=TeamDBManager.getINSTANCE().searchTeamTags(tagList);
		if(!list.getList().isEmpty()){
			for(Team t : list.getList()){
				if(!this.teamMap.containsKey(t.getCode()))this.teamMap.put(t.getCode(), t);
			}
		}
		return list;
	}
	
	public TeamList searchTeamTags(List<String> tagList, String name, String description) throws DAOException {
	
		TeamList list=TeamDBManager.getINSTANCE().searchTeamTags(tagList, name, description);
		if(!list.getList().isEmpty()){
			for(Team t : list.getList()){
				if(!this.teamMap.containsKey(t.getCode()))this.teamMap.put(t.getCode(), t);
			}
		}
		return list;
	}
	
	public TeamList searchTeamManager(String manager) throws DAOException {
	
		TeamList resList = TeamDBManager.getINSTANCE().searchTeamManager(manager);
		if(resList.getList().isEmpty())return resList;
		for(Team team : resList.getList()){
			String teamCode = team.getCode();
			if(!this.teamMap.containsKey(teamCode))this.teamMap.put(teamCode, team);
		}
		return resList;
	}
	
	public List<String> searchTeamCodeListManager(String manager) throws DAOException {
		
		List<String> resList = new ArrayList<String>();
		TeamList teamList = TeamDBManager.getINSTANCE().searchTeamManager(manager);
		if(teamList.getList().isEmpty())return resList;
		for(Team team : teamList.getList()){
			String teamCode = team.getCode();
			if(!this.teamMap.containsKey(teamCode))this.teamMap.put(teamCode, team);
			resList.add(teamCode);
		}
		return resList;
	}
	
	
	public TeamList searchTeamCooper(String cooperCode) throws DAOException {
		
		TeamList resList = TeamDBManager.getINSTANCE().searchTeamCooper(cooperCode);
		if(resList.getList().isEmpty())return resList;
		for(Team team : resList.getList()){
			String teamCode = team.getCode();
			if(!this.teamMap.containsKey(teamCode))this.teamMap.put(teamCode, team);
		}
		return resList;
	}
	
	public List<String> searchTeamCodeListCooper(String cooperCode) throws DAOException {
		
		List<String> resList = new ArrayList<String>();
		TeamList teamList = TeamDBManager.getINSTANCE().searchTeamCooper(cooperCode);
		if(teamList.getList().isEmpty())return resList;
		for(Team team : teamList.getList()){
			String teamCode = team.getCode();
			if(!this.teamMap.containsKey(teamCode))this.teamMap.put(teamCode, team);
			resList.add(teamCode);
		}
		return resList;
	}
	
	public TeamList searchTeamMCode(String memberCode) throws DAOException {
		
		TeamList teamInfoList = TeamDBManager.getINSTANCE().searchTeam(memberCode);
		for(Team teamInfo : teamInfoList.getList()){
			if(!this.teamMap.containsKey(teamInfo.getCode())){
				System.out.println("oh..what????????????????\n\n");
				this.teamMap.put(teamInfo.getCode(), teamInfo);
			}
		}
		return teamInfoList;
	}

	
// *******************************************************************************************************	
	
	public boolean modifyTeamCooper(String teamCode, String memberCode) throws DAOException, SftpException, JSchException, ParseException, FolderException, ProjectException, IOException{
		this.teamMap.get(teamCode).addCooperator(memberCode);
		return TeamDBManager.getINSTANCE().addTeamMember(teamCode, memberCode);
	}
}
