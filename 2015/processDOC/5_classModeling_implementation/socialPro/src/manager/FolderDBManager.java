package manager;

import java.io.File;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;

import model.CommitInfo;
import model.CopiedFolder;
import model.CopiedFolderList;
import model.OriginFolder;
import model.OriginFolderList;
import model.OriginProject;
import socialProExceptions.CommitExcetion;
import socialProExceptions.DAOException;
import socialProExceptions.FolderException;
import action.FolderInsertAction;
import action.FolderSearchAction;

import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.SftpException;

import factory.ActionFactory;


//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : FolderDBManager.java
//  @ Date : 2015-07-28
//  @ Author : 
//
//




public class FolderDBManager {
	
	private static FolderDBManager INSTANCE;
	
	static{
		INSTANCE = new FolderDBManager();
	}
	
	private FolderDBManager(){}	
	
	public static FolderDBManager getINSTANCE() {
		if(INSTANCE==null)INSTANCE = new FolderDBManager();
		return INSTANCE;
	}



	public OriginFolder insertOriginFolderByPFCode(String memberCode,String nickName, String name, String description, String parentFolderCode) throws DAOException, ParseException, SftpException, JSchException, FolderException {
		
		StringTokenizer tokens = new StringTokenizer(parentFolderCode,"_");
		if(tokens.nextElement().equals("project")){
			OriginProject project=ProjectDBManager.getINSTANCE().justSearchProjectCode(parentFolderCode);
			if(project!=null){
				//manager.searchFolderPath(project.getPath())
				parentFolderCode = project.getParentFolder();
				System.out.println(parentFolderCode);
			}
		}
		
		OriginFolder oriFolder=((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).justSearchOriginFolderCode(parentFolderCode);
		if(oriFolder==null)return null;
		
		OriginFolder folder = new OriginFolder(oriFolder.getPath()+"\\"+name);
		folder.setName(name);
		folder.setDescription(description);
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
		GregorianCalendar cal = new GregorianCalendar();
		df.setTimeZone(cal.getTimeZone());
		folder.setMakeDate(df.format(cal.getTime()));
		folder.setSize(0);
		folder.setParentFolder(parentFolderCode);
		
		System.out.println("parent folderCode  : "+folder.getParentFolder()+"   path  : "+folder.getPath());
		return ((FolderInsertAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).insertOriginFolder(folder,memberCode);
	}
	
	/*public OriginFolder insertOriginTeamCooperFolderByPFCode(String memberCode,String nickName, String name, String description, String parentFolderCode) throws DAOException, ParseException, SftpException, JSchException, FolderException {
		
		StringTokenizer tokens = new StringTokenizer(parentFolderCode,"_");
		if(tokens.nextElement().equals("project")){
			OriginProject project=ProjectDBManager.getINSTANCE().searchOriginProject(parentFolderCode);
			if(project!=null){
				//manager.searchFolderPath(project.getPath())
				parentFolderCode = project.getParentFolder();
				System.out.println(parentFolderCode);
			}
		}
		
		OriginFolder oriFolder=((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).searchFolderCode(parentFolderCode);
		if(oriFolder==null)return null;
		
		OriginFolder folder = new OriginFolder(oriFolder.getPath()+"\\"+name);
		folder.setName(name);
		folder.setDescription(description);
		folder.setMakeDate(new GregorianCalendar());
		folder.setSize(0);
		folder.setParentFolder(parentFolderCode);
		
		System.out.println("parent folderCode  : "+folder.getParentFolder()+"   path  : "+folder.getPath());
		return ((FolderInsertAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).insertOriginFolder(folder,memberCode);
	}*/
	
	public OriginFolder insertOriginTeamFolderByPFCode(OriginFolder parentInfo,String ownerCode,String ownerName, String name, String description, String path) throws DAOException, SftpException, JSchException, FolderException {
		
		OriginFolder folder = new OriginFolder(path);
		folder.setName(name);
		folder.setDescription(description);
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
		GregorianCalendar cal = new GregorianCalendar();
		df.setTimeZone(cal.getTimeZone());
		folder.setMakeDate(df.format(cal.getTime()));
		folder.setSize(0);
		folder.setParentFolder(parentInfo.getCode());
		System.out.println("parent code   ::::::    "+folder.getParentFolder());
		return ((FolderInsertAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).insertOriginFolder(folder, ownerCode);
	}
	
	public OriginFolder insertOriginFolder(String memberCode,String nickName, String name, String description, String path) throws DAOException, SftpException, JSchException, FolderException {
		
		OriginFolder folder = new OriginFolder(path);
		folder.setName(name);
		folder.setDescription(description);
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
		GregorianCalendar cal = new GregorianCalendar();
		df.setTimeZone(cal.getTimeZone());
		folder.setMakeDate(df.format(cal.getTime()));
		folder.setSize(0);
		return ((FolderInsertAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).insertOriginFolder(folder,memberCode);
	}
	
	public Map<String,CopiedFolder> insertTeamFolder(OriginFolder parentInfo,String teamCode,String teamName, String name, String description, String path) throws DAOException, SftpException, JSchException, FolderException {
		
		OriginFolder folder = new OriginFolder(path);
		folder.setName(name);
		folder.setDescription(description);
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
		GregorianCalendar cal = new GregorianCalendar();
		df.setTimeZone(cal.getTimeZone());
		folder.setMakeDate(df.format(cal.getTime()));
		folder.setSize(0);
		folder.setParentFolder(parentInfo.getCode());
		System.out.println("parent code   ::::::    "+folder.getParentFolder());
		return ((FolderInsertAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).insertTeamFolder(folder, teamCode);
	}
	
	public OriginFolder insertOriginFolder(String memberCode,String nickName, String name, String path) throws DAOException, SftpException, JSchException, CommitExcetion, FolderException {
	
		return this.insertOriginFolder(memberCode, nickName, nickName, "", path);
	}
	
	public CopiedFolderList insertCopiedFolder(String oriFolderCode,String parentFolderCode,String ownerCode,String ownerName, String name, String path,String commitTitle,String commitContent) throws DAOException, SftpException, JSchException, CommitExcetion, FolderException {
		
		return null;
	}
	public Map<OriginFolder,CommitInfo> copyFolder(String oriFolderCode, String commitCode, String folderPath, String memberCode) throws DAOException, ParseException, FolderException, CommitExcetion, SftpException, JSchException{
		
		return ((FolderInsertAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).copyFolder(oriFolderCode, commitCode, folderPath, memberCode);
		
	}
	
/////////////////////////////////////////////////////  search	
	
//////////doesn't matter folder is copied or origin just search
	public OriginFolder justSearchOriginFolderPath(String folderPath)throws DAOException, ParseException, FolderException{
		
		return ((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).justSearchOriginFolderPath(folderPath);
	}
	public OriginFolder justSearchOriginFolderCode(String folderCode)throws DAOException, ParseException, FolderException{
		
		return ((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).justSearchOriginFolderCode(folderCode);
	}
	public OriginFolderList justSearchOriginChFoldersByPFCode(String parentFolderCode)throws DAOException, ParseException, FolderException{
		
		return ((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).justSearchOriginChFoldersByPFCode(parentFolderCode);
	}
	public OriginFolderList justSearchOriginChFoldersByPFPath(String parentFolderPath)throws DAOException, ParseException, FolderException{
		
		return ((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).justSearchOriginChFoldersByPFPath(parentFolderPath);
	}
	public OriginFolderList justSearchSiblingOriginFolderCode(String folderCode)throws DAOException, ParseException, FolderException{
		
		return ((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).justSearchSiblingOriginFolderCode(folderCode);
	}
	public OriginFolderList justSearchSiblingOriginFolderPath(String folderPath)throws DAOException, ParseException, FolderException{
		
		return ((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).justSearchSiblingOriginFolderPath(folderPath);
	}
	public OriginFolderList justSearchAllOriginFoldersByOriPFCode(String parentFolderCode)throws DAOException, ParseException, FolderException{
		
		return ((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).justSearchAllOriginFoldersByOriPFCode(parentFolderCode);
	}
	public OriginFolderList justSearchAllOriginFoldersByOriPFPath(String parentFolderPath)throws DAOException, ParseException, FolderException{
		
		return ((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).justSearchAllOriginFoldersByOriPFPath(parentFolderPath);
	}
	
	
	
	
////////////return only originFolder or null
	public OriginFolder searchOnlyOriginFolderPath(String folderPath)throws DAOException, ParseException, FolderException{
		
		return ((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).searchOnlyOriginFolderPath(folderPath);
	}
	public OriginFolder searchOnlyOriginFolderCode(String folderCode)throws DAOException, ParseException, FolderException{
		
		return ((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).searchOnlyOriginFolderCode(folderCode);
	}
	public OriginFolderList searchOriginChFoldersByOriPFCode(String oriParentFolderCode)throws DAOException, ParseException, FolderException{
		
		return ((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).searchOriginChFoldersByOriPFCode(oriParentFolderCode);
	}
	public OriginFolderList searchOriginChFoldersByOriPFPath(String oriParentFolderPath)throws DAOException, ParseException, FolderException{
		
		return ((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).searchOriginChFoldersByOriPFPath(oriParentFolderPath);
	}
	public OriginFolderList searchSiblingOnlyOriginFolderCode(String oriFolderCode)throws DAOException, ParseException, FolderException{
		
		return ((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).searchSiblingOnlyOriginFolderCode(oriFolderCode);
	}
	public OriginFolderList searchSiblingOnlyOriginFolderPath(String oriFolderPath)throws DAOException, ParseException, FolderException{
		
		return ((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).searchSiblingOnlyOriginFolderPath(oriFolderPath);
	}
	public OriginFolderList searchAllOriginFoldersByOriPFCode(String oriParentFolderCode)throws DAOException, ParseException, FolderException{
		
		return ((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).searchAllOriginFoldersByOriPFCode(oriParentFolderCode);
	}
	public OriginFolderList searchAllOriginFoldersByOriPFPath(String oriParentFolderPath)throws DAOException, ParseException, FolderException{
		
		return ((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).searchAllOriginFoldersByOriPFPath(oriParentFolderPath);
	}
	
	
///////////return only CopiedFolder or null
	public CopiedFolder searchOnlyCopiedFolderPath(String folderPath)throws DAOException, ParseException, FolderException{
		
		return ((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).searchOnlyCopiedFolderPath(folderPath);
	}
	public CopiedFolder searchOnlyCopiedFolderCode(String folderCode)throws DAOException, ParseException, FolderException{
		
		return ((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).searchOnlyCopiedFolderCode(folderCode);
	}
	
		
	
/////////////search exactlly
	public File searchFolderByFolderPath(String folderPath) throws DAOException, ParseException, FolderException{
		
		return ((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).searchFolderByFolderPath(folderPath);
	}
	public File searchFolderByFolderCode(String folderCode) throws DAOException, ParseException, FolderException{
		
		return ((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).searchFolderByFolderCode(folderCode);
	}
	public List<File> searchFolderByPFolderPath(String parentFolderPath) throws DAOException, ParseException, FolderException{
		
		return ((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).searchFolderByPFolderPath(parentFolderPath);
	}
	public List<File> searchFolderByPFolderCode(String parentFolderCode) throws DAOException, ParseException, FolderException{
		
		return ((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).searchFolderByPFolderCode(parentFolderCode);
	}
	public List<File> searchSiblingFolderByPFolderPath(String folderPath) throws DAOException, ParseException, FolderException{
		
		return ((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).searchSiblingFolderByPFolderPath(folderPath);
	}
	public List<File> searchSiblingFolderByPFolderCode(String folderCode) throws DAOException, ParseException, FolderException{
		
		return ((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).searchSiblingFolderByPFolderCode(folderCode);
	}
	public List<File> searchAllFoldersByPFCode(String parentFolderCode)throws DAOException, ParseException, FolderException{
		return ((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).searchAllFoldersByPFCode(parentFolderCode);
	}
	public List<File> searchAllFoldersByPFPath(String parentFolderPath)throws DAOException, ParseException, FolderException{
		return ((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).searchAllFoldersByPFPath(parentFolderPath);
	}
		
	
	public boolean checkFolderNameByPath(String folderName, String parentFolderPath) throws DAOException, ParseException, FolderException {
		
		OriginFolder folder=((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).justSearchFolderNameByPath(folderName, parentFolderPath);
		if(folder==null)return false;
		return false;
	}
	
	public boolean checkFolderNameByPCode(String folderName, String parentFolderCode) throws DAOException, ParseException, FolderException {
	
		OriginFolder folder=((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).justSearchFolderNameByCode(folderName, parentFolderCode);
		if(folder==null)return false;
		return false;
	}
	
	public boolean checkFolderPath(String folderPath) throws DAOException, ParseException, FolderException {
	
		OriginFolder folder=((FolderSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("folderActionImpl")).justSearchOriginFolderPath(folderPath);
		if(folder==null)return false;
		
		return true;
	}
}
