package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import socialProExceptions.DAOException;
import dto.CommitDTO;
import dto.FileDTO;
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : CommitInfoDAO.java
//  @ Date : 2015-07-28
//  @ Author : 
//
//




public class CommitDAO extends BaseDAO{
	
	private static final String COMMIT_SEQ = 
			"select commit_seq.nextval from dual";
	private static final String INSERT_COMMIT_SQL = 
			"insert into commit_tb(COMMITCODE, TITLE, ownercode, INSERTDATE, SetCode, CONTENT, MERGE,type ) values(?,?,?, to_timestamp(?,'yyyy-mm-dd hh24:mi:ss.ff3'),?,?,?,?)";
	
	private static final String UPDATE_COMMIT_SQL2481 = "update commit_tb set TITLE=?, DESCRIPTION=?, MERGE=? where COMMITCODE=?";
	private static final String UPDATE_COMMIT_SQL71 = "update commit_tb set MERGE=? where commitCode=?";
	private static final String UPDATE_COMMIT_SQL7 = "update commit_tb set MERGE=? where ";
	
	private static final String SELECT_COMMIT_SQL0 = "select COMMITCODE, TITLE, ownerCode, to_char(INSERTDATE,'yyyy-mm-dd hh24:mi:ss.ff3') as INSERTDATE, setcode, CONTENT, MERGE,TYPE FROM commit_tb";
	private static final String SELECT_COMMIT_SQL1 = "select COMMITCODE, TITLE, ownerCode, to_char(INSERTDATE,'yyyy-mm-dd hh24:mi:ss.ff3') as INSERTDATE, setcode, CONTENT, MERGE,TYPE FROM commit_tb where COMMITCODE=?";
	private static final String SELECT_COMMIT_SQL3 = "select COMMITCODE, TITLE, ownerCode, to_char(INSERTDATE,'yyyy-mm-dd hh24:mi:ss.ff3') as INSERTDATE, setcode, CONTENT, MERGE,TYPE FROM commit_tb where ownerCode=? order by insertDate desc";
	private static final String SELECT_COMMIT_SQL5 = "select COMMITCODE, TITLE, ownerCode, to_char(INSERTDATE,'yyyy-mm-dd hh24:mi:ss.ff3') as INSERTDATE, setcode, CONTENT, MERGE,TYPE FROM commit_tb where setcode=? order by insertDate desc";
	private static final String SELECT_COMMIT_SQL57 = "select COMMITCODE, TITLE, ownerCode, to_char(INSERTDATE,'yyyy-mm-dd hh24:mi:ss.ff3') as INSERTDATE, setcode, CONTENT, MERGE,TYPE FROM commit_tb where setcode=? and merge=? order by insertDate desc";
	private static final String SELECT_COMMIT_SQL574 = "select COMMITCODE, TITLE, ownerCode, to_char(INSERTDATE,'yyyy-mm-dd hh24:mi:ss.ff3') as INSERTDATE, setcode, CONTENT, MERGE,TYPE FROM commit_tb where setcode=? and merge=? and insertdate<=to_timestamp(?,'yyyy-mm-dd hh24:mi:ss.ff3') order by insertDate desc";
	private static final String SELECT_COMMIT_SQL57_ = "select COMMITCODE, TITLE, ownerCode, to_char(INSERTDATE,'yyyy-mm-dd hh24:mi:ss.ff3') as INSERTDATE, setcode, CONTENT, MERGE,TYPE FROM commit_tb where setcode=? and insertdate>=to_timestamp(?,'yyyy-mm-dd hh24:mi:ss.ff3') order by insertDate desc";
	private static final String SELECT_COMMIT_SQL58 = "select COMMITCODE, TITLE, ownerCode, to_char(INSERTDATE,'yyyy-mm-dd hh24:mi:ss.ff3') as INSERTDATE, setcode, CONTENT, MERGE,TYPE FROM commit_tb where setcode=? and type=?";
	private static final String SELECT_COMMIT_SQL7 = "select COMMITCODE, TITLE, ownerCode, to_char(INSERTDATE,'yyyy-mm-dd hh24:mi:ss.ff3') as INSERTDATE, setcode, CONTENT, MERGE,TYPE FROM commit_tb where MERGE=? order by insertDate desc";
	
	private static final String DELETE_COMMIT_SQL1 = "DELETE FROM commit_tb WHERE  COMMITCODE=?";
	private static final String DELETE_COMMIT_SQL3 = "DELETE FROM commit_tb WHERE  ownerCode=?";
	private static final String DELETE_COMMIT_SQL6 = "DELETE FROM commit_tb WHERE  setcode=?";
	private static final String DELETE_COMMIT_SQL68 = "DELETE FROM commit_tb WHERE  setcode=? and merge=?";
	private static final String DELETE_COMMIT_SQL8 = "DELETE FROM commit_tb WHERE  merge=?";
	
	
	private String makeCode() throws DAOException {
		// TODO Auto-generated method stub
		Connection connection = null;
		PreparedStatement pStatement = null;
		String code=null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(COMMIT_SEQ);
			ResultSet rs = pStatement.executeQuery();
			if(rs.next()){
				code=new String();
				code="commit_"+rs.getString("nextval");
			}
			System.out.println(code);
		
		} catch (SQLException e) {
			throw new DAOException("Error makeCode FileDAO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
		return code;
	}
	
	//COMMITCODE, TITLE, MEMBERCODE, INSERTDATE, setcode, CONTENT, MERGE
	public String insertCommit(CommitDTO dto) throws DAOException {
	
		Connection connection = null;
		PreparedStatement pStatement = null;
		String code=this.makeCode();
		System.out.println("insertFile start : "+code);
		try {
			//COMMITCODE, TITLE, MEMBERCODE, INSERTDATE, setcode, CONTENT, MERGE 
			connection = getConnection();
			pStatement = connection.prepareStatement(INSERT_COMMIT_SQL);
			pStatement.setString(1, code);
			pStatement.setString(2, dto.getTitle());
			pStatement.setString(3, dto.getOwnerCode());
			pStatement.setString(4, dto.getInsertDate());
			pStatement.setString(5, dto.getSetCode());
			pStatement.setString(6, dto.getContent());
			pStatement.setInt(7, dto.getMerge());
			pStatement.setInt(8, dto.getType());
			if(pStatement.executeUpdate()==1)return code;
		} catch (SQLException e) {
			throw new DAOException("Error adding CommitDAO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
		return null;
	}
	
	public CommitDTO searchCommitCode(String commitCode) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		CommitDTO dto =null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_COMMIT_SQL1);
			pStatement.setString(1,commitCode);
			ResultSet rs = pStatement.executeQuery();
			
			return this.makeDTO(rs, dto);
			
		} catch (SQLException e) {
			throw new DAOException("Error search CommitDAO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}

	public List<CommitDTO> searchCommitCode(List<String> commitCodeList) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		List<CommitDTO> dtoList = new ArrayList<CommitDTO>();
		String sql = SELECT_COMMIT_SQL0+" where commitCode in (";
		int size = commitCodeList.size()-1;
		for(int i=0;i<size;i++){
			sql+="'"+commitCodeList.get(i)+"', ";
		}sql+="'"+commitCodeList.get(size)+"' ) order by insertDate desc";
		System.out.println(sql);
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(sql);
			ResultSet rs = pStatement.executeQuery();
			
			return this.makeDTOList(rs, dtoList);
			
		} catch (SQLException e) {
			throw new DAOException("Error search CommitDAO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}
	
	public List<CommitDTO> searchCommitMCode(String memberCode) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		List<CommitDTO> dtoList = new ArrayList<CommitDTO>();
		ResultSet rs=null;
		
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_COMMIT_SQL3);
			pStatement.setString(1,memberCode);
			rs = pStatement.executeQuery();

			return this.makeDTOList(rs, dtoList);
			
		} catch (SQLException e) {
			throw new DAOException("Error search CommitDAO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
	}
	
	public List<CommitDTO> searchCommitsCode(String setcode) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		List<CommitDTO> dtoList = new ArrayList<CommitDTO>();
		ResultSet rs=null;
		
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_COMMIT_SQL5);
			pStatement.setString(1,setcode);
			rs = pStatement.executeQuery();

			return this.makeDTOList(rs, dtoList);
			
		} catch (SQLException e) {
			throw new DAOException("Error search CommitDAO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
	}
	
	public List<CommitDTO> searchCommitsCode(List<String> setcodeList) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		List<CommitDTO> dtoList = new ArrayList<CommitDTO>();
		ResultSet rs=null;
		
		int size = setcodeList.size();
		String sql = SELECT_COMMIT_SQL0+" where setCode in ( ";
		
		for(int i=0;i<size-1;i++){
			sql+="'"+setcodeList.get(i)+"', ";
		}sql+="'"+setcodeList.get(size-1)+"' ) order by insertDate desc ";
		System.out.println(sql);
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(sql);
			rs = pStatement.executeQuery();

			return this.makeDTOList(rs, dtoList);
			
		} catch (SQLException e) {
			throw new DAOException("Error search CommitDAO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
	}
	
	public List<CommitDTO> searchCommitsCode(String setcode,int merge) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		List<CommitDTO> dtoList = new ArrayList<CommitDTO>();
		ResultSet rs=null;
		
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_COMMIT_SQL57);
			pStatement.setString(1,setcode);
			pStatement.setInt(2,merge);
			rs = pStatement.executeQuery();

			return this.makeDTOList(rs, dtoList);
			
		} catch (SQLException e) {
			throw new DAOException("Error search CommitDAO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
	}
	
	public CommitDTO searchCommitBySetCode(String setcode,int type) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		CommitDTO dto = null;
		ResultSet rs=null;
		System.out.println(SELECT_COMMIT_SQL58);
		System.out.println(setcode);
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_COMMIT_SQL58);
			pStatement.setString(1,setcode);
			pStatement.setInt(2,type);
			rs = pStatement.executeQuery();

			return this.makeDTO(rs, dto);
			
		} catch (SQLException e) {
			throw new DAOException("Error search CommitDAO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
	}

	public List<CommitDTO> searchCommitsCode(String setcode,String insertDate) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		List<CommitDTO> dtoList = new ArrayList<CommitDTO>();
		ResultSet rs=null;
		
		System.out.println(SELECT_COMMIT_SQL57_+"    : "+setcode+insertDate);
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_COMMIT_SQL57_);
			pStatement.setString(1,setcode);
			pStatement.setString(2,insertDate);
			rs = pStatement.executeQuery();

			return this.makeDTOList(rs, dtoList);
			
		} catch (SQLException e) {
			throw new DAOException("Error search CommitDAO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
	}
	

	public List<CommitDTO> searchCommitsCode(String setcode,int merge,String insertDate) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		List<CommitDTO> dtoList = new ArrayList<CommitDTO>();
		ResultSet rs=null;
		
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_COMMIT_SQL574);
			pStatement.setString(1,setcode);
			pStatement.setInt(2,merge);
			pStatement.setString(3,insertDate);
			rs = pStatement.executeQuery();

			return this.makeDTOList(rs, dtoList);
			
		} catch (SQLException e) {
			throw new DAOException("Error search CommitDAO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
	}
	
	public List<CommitDTO> searchCommitMerge(int merge) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		List<CommitDTO> dtoList = new ArrayList<CommitDTO>();
		ResultSet rs=null;
		
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_COMMIT_SQL7);
			pStatement.setInt(1,merge);
			rs = pStatement.executeQuery();

			return this.makeDTOList(rs, dtoList);
			
		} catch (SQLException e) {
			throw new DAOException("Error search CommitDAO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
	}
	

	public boolean updateCommitMerge(List<String> commitList, int merge)throws DAOException {
		Connection connection = null;
		PreparedStatement pStatement = null;
		
		int size = commitList.size();
		String sql = UPDATE_COMMIT_SQL7+" commitCode in (";
		for(int i=0;i<size-1;i++){
			sql+="'"+commitList.get(i)+"', ";
		}sql+="'"+commitList.get(size-1)+"' )";
		System.out.println(sql);
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(sql);
			pStatement.setInt(1, merge);
			if(pStatement.executeUpdate()==0)return false;
			return true;
		} catch (SQLException e) {
			throw new DAOException("Error updating commitMerge. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}
	
	public boolean updateCommitMerge(String commit, int merge)throws DAOException {
		Connection connection = null;
		PreparedStatement pStatement = null;
		System.out.println(UPDATE_COMMIT_SQL71);
		System.out.println(commit);
		
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(UPDATE_COMMIT_SQL71);
			pStatement.setInt(1, merge);
			pStatement.setString(2, commit);
			if(pStatement.executeUpdate()==0)return false;
			return true;
		} catch (SQLException e) {
			throw new DAOException("Error updating commitMerge. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}
	
	
////////////////////////////////////////////	
	
	private CommitDTO makeDTO(ResultSet rs,CommitDTO dto) throws SQLException{
		
		while(rs.next()){
			String commitCode = rs.getString("CommitCode");
			if(rs.wasNull()){
				if(dto==null)System.out.println("Result commitDTo is null...........  T_T");
				else System.out.println("Result commitDTo is NNOOTT null...........  :)  ");
				return dto;
			}
			dto = new CommitDTO(commitCode,rs.getString("title"),rs.getString("ownerCode"),rs.getString("insertDate"),rs.getString("setcode"),rs.getString("Content"),rs.getInt("merge"));
			dto.setType(rs.getInt("type"));
		}
		return dto;
	}
	
	private List<CommitDTO> makeDTOList(ResultSet rs,List<CommitDTO> dtoList) throws SQLException{
		
		while(rs.next()){
			String commitCode = rs.getString("CommitCode");
			if(rs.wasNull())return dtoList;
			CommitDTO dto = new CommitDTO(commitCode,rs.getString("title"),rs.getString("ownerCode"),rs.getString("insertDate"),rs.getString("setcode"),rs.getString("Content"),rs.getInt("merge"));
			dto.setType(rs.getInt("type"));
			dtoList.add(dto);
		}
		return dtoList;
	}
	
}
