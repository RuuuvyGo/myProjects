package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import dto.FileDTO;
import dto.LogDTO;

import socialProExceptions.DAOException;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : LogInfoDAO.java
//  @ Date : 2015-07-28
//  @ Author : 
//
//




public class LogDAO extends BaseDAO{
	
	private static final String LOG_SEQ = 
			"select Log_seq.nextval from dual";
	private static final String INSERT_LOG_SQL = 
			"insert into LOG_TB (LOGCODE, SETCODE,KIND, LOGDATE) values (?,?,?,to_timestamp(?,'yyyy-mm-dd hh24:mi:ss.ff3'))";
	
	//private static final String UPDATE_LOG_SQL13 = "update LOG_TB set KIND=? where LOGCODE=?";
	
	private static final String SELECT_LOG_SQL1 = "select LOGCODE, SETCODE,KIND,to_char(logdate,'yyyy-mm-dd hh24:mi:ss.ff3') as logDate FROM LOG_TB where LOGCODE=?";
	private static final String SELECT_LOG_SQL2 = "select LOGCODE, SETCODE,KIND,to_char(logdate,'yyyy-mm-dd hh24:mi:ss.ff3') as logDate FROM LOG_TB where FILECODE=?";
	private static final String SELECT_LOG_SQL23 = "select LOGCODE, SETCODE,KIND,to_char(logdate,'yyyy-mm-dd hh24:mi:ss.ff3') as logDate FROM LOG_TB where FILECODE=? and KIND=?";
		
	private static final String DELETE_LOG_SQL1 = "DELETE FROM LOG_TB WHERE  LOGCODE=?";
	private static final String DELETE_LOG_SQL2 = "DELETE FROM LOG_TB WHERE  FILECODE=?";
	//private static final String DELETE_LOG_SQL24 = "DELETE FROM LOG_TB WHERE  FILECODE=? and LOGDATE=?";
	
	
	private String makeCode() throws DAOException {
		// TODO Auto-generated method stub
		Connection connection = null;
		PreparedStatement pStatement = null;
		String code=null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(LOG_SEQ);
			ResultSet rs = pStatement.executeQuery();
			if(rs.next()){
				code=new String();
				code="log_"+rs.getString("nextval");
			}
			System.out.println(code);
		
		} catch (SQLException e) {
			throw new DAOException("Error makeCode LogDAO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
		return code;
	}
	
	
	public String insertLog(LogDTO dto) throws DAOException {
	
		System.out.println("insertFile start");
		Connection connection = null;
		PreparedStatement pStatement = null;
		String code=this.makeCode();
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(INSERT_LOG_SQL);
			pStatement.setString(1, code);
			pStatement.setString(2, dto.getSetCode());
			pStatement.setString(3, dto.getKind());
			pStatement.setString(4, dto.getLogDate());
			
			if(pStatement.executeUpdate()==1)return code;
		} catch (SQLException e) {
			throw new DAOException("Error adding LogDAO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
		return null;
	}
	
	public LogDTO searchLogCode(String logCode) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		LogDTO dto = null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_LOG_SQL1);
			pStatement.setString(1,logCode);
			ResultSet rs = pStatement.executeQuery();
			
			while(rs.next()){
				dto = new LogDTO();
				dto.setCode(rs.getString("LogCode"));
				if(rs.wasNull())return null;
				dto.setKind(rs.getString("kind"));
				dto.setLogDate(rs.getString("logDate"));
				dto.setSetCode(rs.getString("setCode"));
			}
			return dto;
			
		} catch (SQLException e) {
			throw new DAOException("Error search LogDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}
	
	
	public List<LogDTO> searchsetCode(String setCode) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		List<LogDTO> dtoList = new ArrayList<LogDTO>();
		ResultSet rs=null;
		
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_LOG_SQL2);
			pStatement.setString(1,setCode);
			rs = pStatement.executeQuery();

			while(rs.next()){
				LogDTO dto = new LogDTO();
				dto.setCode(rs.getString("LogCode"));
				if(rs.wasNull())return dtoList;
				dto.setKind(rs.getString("kind"));
				dto.setLogDate(rs.getString("logDate"));
				dto.setSetCode(rs.getString("setCode"));
				dtoList.add(dto);
			}
			return dtoList;
			
		} catch (SQLException e) {
			throw new DAOException("Error search LogDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
	}
	
	public List<LogDTO> searchsetCode(String setCode,String kind) throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		List<LogDTO> dtoList = new ArrayList<LogDTO>();
		ResultSet rs=null;
		
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_LOG_SQL23);
			pStatement.setString(1,setCode);
			pStatement.setString(2,kind);
			rs = pStatement.executeQuery();

			while(rs.next()){
				LogDTO dto = new LogDTO();
				dto.setCode(rs.getString("LogCode"));
				if(rs.wasNull())return dtoList;
				dto.setKind(rs.getString("kind"));
				dto.setLogDate(rs.getString("logDate"));
				dto.setSetCode(rs.getString("setCode"));
				dtoList.add(dto);
			}
			return dtoList;
			
		} catch (SQLException e) {
			throw new DAOException("Error search LogDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
	}
	
	/*public int updateLogCode(String fileCode,String newFolderCode, String newPath)throws DAOException{
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(UPDATE_LOG_SQL13);
			pStatement.setString(1, newFolderCode);
			pStatement.setString(2, newPath);
			pStatement.setString(3, fileCode);
			return pStatement.executeUpdate();
		} catch (SQLException e) {
			throw new DAOException("Error updating FileDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}*/
	
}
