package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import dto.ProjectDTO;

import socialProExceptions.DAOException;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : ProjectDAO.java
//  @ Date : 2015-07-28
//  @ Author : 
//
//




public class ProjectDAO extends BaseDAO{
	
	private static final String INSERT_PROJECT_SQL = 
			"insert into project_tb(projectCode, folderCode, ownerCode) "+ "values(?, ?, ?)";
	private static final String PROJECT_SEQ = 
			"select project_seq.nextval from dual";
	
	private static final String UPDATE_PROJECT_SQL13 = "update project_tb set ownerCode=? "+ "where projectCode=?";
	
	private static final String SELECT_PROJECT_SQL1 = "select * FROM project_tb where projectCode=?";
	private static final String SELECT_PROJECT_SQL13 = "select * FROM project_tb where projectCode=? and ownerCode=?";
	private static final String SELECT_PROJECT_SQL2 = "select * FROM project_tb where folderCode=?";
	private static final String SELECT_PROJECT_SQL3 = "select * FROM project_tb where ownerCode=?";

	private static final String DELETE_PROJECT_SQL1 = "DELETE FROM project_tb WHERE  projectCode=?";
	private static final String DELETE_PROJECT_SQL2 = "DELETE FROM project_tb WHERE  folderCode=?";
	private static final String DELETE_PROJECT_SQL3 = "DELETE FROM project_tb WHERE  ownerCode=?";
	
	
	public String insertProject (ProjectDTO dto)throws DAOException {
	
		Connection connection = null;
		PreparedStatement pStatement = null;
		String code=this.makeCode();
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(INSERT_PROJECT_SQL);
			pStatement.setString(1, code);
			pStatement.setString(2, dto.getFolderCode());
			pStatement.setString(3, dto.getOwner());
			if(pStatement.executeUpdate()==1)return code;
		} catch (SQLException e) {
			throw new DAOException("Error adding proejctDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
		return code;
	}
	
	public String makeCode() throws DAOException {
		// TODO Auto-generated method stub
		Connection connection = null;
		PreparedStatement pStatement = null;
		String code=new String();
		ResultSet rs=null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(PROJECT_SEQ);
			rs = pStatement.executeQuery();
			if(rs.next()){
				code=new String();
				code="project_"+rs.getString("nextval");
			}
		
		} catch (SQLException e) {
			throw new DAOException("Error makeCode ProjectDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
		return code;
	}
	
	public List<ProjectDTO> searchProjectOwner(String ownerCode) throws DAOException {
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		List<ProjectDTO> dtoList = new ArrayList<ProjectDTO>();
		ResultSet rs=null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_PROJECT_SQL3);
			pStatement.setString(1,ownerCode);
			rs = pStatement.executeQuery();
			return this.makeDTOList(rs, dtoList);	
			
		} catch (SQLException e) {
			System.out.println("???");
			throw new DAOException("Error search ProjectDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
	}
	
	public ProjectDTO searchProjectCode(String proejectCode) throws DAOException {
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		ProjectDTO dto=null;
		ResultSet rs=null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_PROJECT_SQL1);
			pStatement.setString(1,proejectCode);
			rs = pStatement.executeQuery();
			return this.makeDTO(rs, dto);
			
		} catch (SQLException e) {
			throw new DAOException("Error search ProjectDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
	}
	
	public ProjectDTO searchProjectCode(String ownerCode,String proejectCode) throws DAOException {
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		ProjectDTO dto=null;
		ResultSet rs=null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_PROJECT_SQL13);
			pStatement.setString(1,proejectCode);
			pStatement.setString(2,ownerCode);
			rs = pStatement.executeQuery();
			return this.makeDTO(rs, dto);
			
		} catch (SQLException e) {
			throw new DAOException("Error search ProjectDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
	}
	
	public ProjectDTO searchProjectFCode(String folderCode) throws DAOException {
		
		Connection connection = null;
		PreparedStatement pStatement = null;
		ProjectDTO dto=null;
		ResultSet rs=null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(SELECT_PROJECT_SQL2);
			pStatement.setString(1,folderCode);
			rs = pStatement.executeQuery();
			return this.makeDTO(rs, dto);
		} catch (SQLException e) {
			throw new DAOException("Error search ProjectDTO. "+ e.getMessage());
		} finally {
			closeDBObjects(rs, pStatement, connection);
		}
	}
	
	public boolean deleteProjectCode(String projectCode)throws DAOException {
		Connection connection = null;
		PreparedStatement pStatement = null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(DELETE_PROJECT_SQL1);
			pStatement.setString(1, projectCode);
			if(pStatement.executeUpdate()==0)return false;
			return true;
		} catch (SQLException e) {
			throw new DAOException("Error Delete Project. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}
	
	public boolean deleteProjectFCode(String folderCode)throws DAOException {
		Connection connection = null;
		PreparedStatement pStatement = null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(DELETE_PROJECT_SQL2);
			pStatement.setString(1, folderCode);
			if(pStatement.executeUpdate()==0)return false;
			return true;
		} catch (SQLException e) {
			throw new DAOException("Error Delete Project. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}
	
	public int deleteProjectOwner(String ownerCode)throws DAOException {
		Connection connection = null;
		PreparedStatement pStatement = null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(DELETE_PROJECT_SQL3);
			pStatement.setString(1, ownerCode);
			return pStatement.executeUpdate();
		} catch (SQLException e) {
			throw new DAOException("Error Delete Project. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}
	
	public boolean updateProjectOwner(String projectCode,String newOwnerCode)throws DAOException {
		Connection connection = null;
		PreparedStatement pStatement = null;
		try {
			connection = getConnection();
			pStatement = connection.prepareStatement(UPDATE_PROJECT_SQL13);
			pStatement.setString(1, newOwnerCode);
			pStatement.setString(2, projectCode);
			if(pStatement.executeUpdate()==0)return false;
			return true;
		} catch (SQLException e) {
			throw new DAOException("Error updating Project. "+ e.getMessage());
		} finally {
			closeDBObjects(null, pStatement, connection);
		}
	}
	
	private ProjectDTO makeDTO(ResultSet rs,ProjectDTO dto) throws SQLException{
		
		System.out.println("projectDAO makeDTO");
		while(rs.next())
		{
			String code = rs.getString("projectCode");
			if(rs.wasNull())return dto;
			dto = new ProjectDTO(code, rs.getString("folderCode"), rs.getString("ownerCode"));
		}
		return dto;
	}
	
	private List<ProjectDTO> makeDTOList(ResultSet rs,List<ProjectDTO> dtoList) throws SQLException{
		System.out.println("this is makeDTOList");
		while(rs.next())
		{
			String code = rs.getString("projectCode");
			if(rs.wasNull()){
				if(dtoList.isEmpty())System.out.println("return emtpy list   : projectDAO");
				else System.out.println("return not empty list  : projectDAO");
				return dtoList;
			}
			dtoList.add(new ProjectDTO(code, rs.getString("folderCode"), rs.getString("ownerCode")));
		}
		return dtoList;
	}
	

}
