package model;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.StringTokenizer;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : OriginFolderList.java
//  @ Date : 2015-07-28
//  @ Author : 
//
//




public class OriginFolderList {
	private List<OriginFolder> list;
	
	public OriginFolderList() {
		this.list = new ArrayList<OriginFolder>();
	}
	/*public OriginFolderList(String name, String description, String path,
			GregorianCalendar makeDate, String parentFolder,
			List<String> childFolderList) {
		this.list = new ArrayList<OriginFolder>();
		this.list.add(new OriginFolder(name,description,path,makeDate,parentFolder,childFolderList));
	}
	public OriginFolderList(String code,String name, String description, String path,
			GregorianCalendar makeDate, String parentFolder,
			List<String> childFolderList) {
		this.list = new ArrayList<OriginFolder>();
		this.list.add(new OriginFolder(code,name,description,path,makeDate,parentFolder,childFolderList));
	}
	
	public OriginFolderList(String name, String description, String path,
			GregorianCalendar makeDate,
			List<String> childFolderList) {
		this.list = new ArrayList<OriginFolder>();
		this.list.add(new OriginFolder(name,description,path,makeDate,childFolderList));
	}
	public OriginFolderList(String code,String name, String description, String path,
			GregorianCalendar makeDate,
			List<String> childFolderList) {
		this.list = new ArrayList<OriginFolder>();
		this.list.add(new OriginFolder(code,name,description,path,makeDate,childFolderList));
	}
	
	public OriginFolderList(String name, String description, String path,
			GregorianCalendar makeDate, String parentFolder) {
		this.list = new ArrayList<OriginFolder>();
		this.list.add(new OriginFolder(name,description,path,makeDate,parentFolder));
	}
	public OriginFolderList(String code,String name, String description, String path,
			GregorianCalendar makeDate, String parentFolder) {
		this.list = new ArrayList<OriginFolder>();
		this.list.add(new OriginFolder(code,name,description,path,makeDate,parentFolder));
	}
	public OriginFolderList(String name, String description, String path,
			GregorianCalendar makeDate) {
		this.list = new ArrayList<OriginFolder>();
		this.list.add(new OriginFolder(name,description,path,makeDate));
	}
	public OriginFolderList(String code,String name, String description, String path,
			GregorianCalendar makeDate) {
		this.list = new ArrayList<OriginFolder>();
		this.list.add(new OriginFolder(code,name,description,path,makeDate));
	}
	
	public OriginFolderList(OriginFolder originFolder) {
		this.list = new ArrayList<OriginFolder>();
		this.list.add(originFolder);
	}
	///
	public OriginFolderList(String name, String path,
			GregorianCalendar makeDate, String parentFolder,
			List<String> childFolderList){
		this.list = new ArrayList<OriginFolder>();
		this.list.add(new OriginFolder(name,path,makeDate,parentFolder,childFolderList));
	}
	public OriginFolderList(String code,String name, String path,
			List<String> childFolderList,GregorianCalendar makeDate, String parentFolder){
		this.list = new ArrayList<OriginFolder>();
		this.list.add(new OriginFolder(code,name,path,makeDate,parentFolder,childFolderList));
	}
	public OriginFolderList(String name, String path,
			GregorianCalendar makeDate,
			List<String> childFolderList) {
		this.list = new ArrayList<OriginFolder>();
		this.list.add(new OriginFolder(name,path,makeDate,childFolderList));
	}
	public OriginFolderList(String code,String name,String path,
			List<String> childFolderList,GregorianCalendar makeDate) {
		this.list = new ArrayList<OriginFolder>();
		this.list.add(new OriginFolder(code,name,path,childFolderList,makeDate));
	}
	public OriginFolderList(String name,String path,
			GregorianCalendar makeDate, String parentFolder) {
		this.list = new ArrayList<OriginFolder>();
		this.list.add(new OriginFolder(name,path,makeDate,parentFolder));
	}
	public OriginFolderList(GregorianCalendar makeDate,String code,String name,String path,
			String parentFolder) {
		this.list = new ArrayList<OriginFolder>();
		this.list.add(new OriginFolder(makeDate,code,name,path,parentFolder));
	}
	
	public OriginFolderList(String name,String path,
			GregorianCalendar makeDate) {
		this.list = new ArrayList<OriginFolder>();
		this.list.add(new OriginFolder(name,path,makeDate));
	}
	public OriginFolderList(GregorianCalendar makeDate,String code,String name,String path) {
		this.list = new ArrayList<OriginFolder>();
		this.list.add(new OriginFolder(makeDate,code,name,path));
	}*/
	public boolean addOriginFolder(OriginFolder originFolder) {
	
		return this.list.add(originFolder);
	}
	
	public boolean addOriginFolder(OriginFolderList originFolderList) {
		int cnt=originFolderList.getList().size();
		for(int i=0;i<cnt;i++){
			if(!this.list.add(originFolderList.getList().get(i)))return false;
		}
		return true;
	}
	
	
	public boolean deleteOriginFoldersByName(String name) {
	
		OriginFolderList folderList = this.searchOriginFolderName(name);
		if(folderList.getList().isEmpty())return false;
		for(OriginFolder folder : folderList.getList()){
			if(!this.list.remove(folder))return false;
		}return true;
	}
	
	public boolean deleteOriginFoldersByPath(String path) {
	
		OriginFolder folder = this.searchOriginFolderPath(path);
		if(folder==null)return false;
		return this.list.remove(folder);
	}
	
	public boolean deleteOriginFoldersByCode(String code) {
	
		OriginFolder folder = this.searchOriginFolderCode(code);
		if(folder==null)return false;
		return this.list.remove(folder);
	}
	
	public boolean deleteOriginFoldersByPCode(String parentFolder) {
	
		OriginFolderList folderList = this.searchOriginFolderPFolder(parentFolder);
		if(folderList.getList().isEmpty())return false;
		for(OriginFolder folder : folderList.getList()){
			if(!this.list.remove(folder))return false;
		}return true;
	}
	
	public boolean modifyOriginFolderByCodeName(String code, String newName) {
		
		OriginFolder folder = this.searchOriginFolderCode(code);
		if(folder==null)return false;
		folder.setName(newName);
		StringTokenizer tokens = new StringTokenizer(folder.getParent(),"\\");
		int cnt = tokens.countTokens();
		String newPath = new String();
		for(int i=0;i<cnt-1;i++){
			newPath+=tokens.nextToken()+"\\";
		}
		newPath+=newName;
		folder.setPath(newPath);
		return true;
	}
	
	public boolean modifyOriginFolderByCodeDes(String code, String newDescription) {
		OriginFolder folder = this.searchOriginFolderCode(code);
		if(folder==null)return false;
		folder.setDescription(newDescription);
		return true;
	}
	
	public boolean modifyOriginFolderByCodePath(String code, String newParentPath, String newParentFolder) {
	
		OriginFolder folder = this.searchOriginFolderCode(code);
		if(folder==null)return false;
		folder.setParentFolder(newParentFolder);
		folder.setPath(newParentPath+"\\"+folder.getName());
		return true;
	}
	
	public boolean modifyOriginFolderByCodePath(String code, String newPath) {
	
		OriginFolder folder = this.searchOriginFolderCode(code);
		if(folder==null)return false;
		folder.setPath(newPath);
		return true;
	}
	
	public boolean modifyOriginFolderByCodeAlter(String code, GregorianCalendar newAlterDate) {
	
		OriginFolder folder = this.searchOriginFolderCode(code);
		
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
		GregorianCalendar cal = new GregorianCalendar();
		df.setTimeZone(cal.getTimeZone());
		
		if(folder==null)return false;
		folder.setMakeDate(df.format(cal.getTime()));
		return true;
	}
	
	public boolean modifyOriginFolderByCodeSize(String code, double newSize) {
	
		OriginFolder folder = this.searchOriginFolderCode(code);
		if(folder==null)return false;
		folder.setSize(newSize);
		return true;
	}
	
	public boolean modifyOriginFolderByCodeChFolders(String code, List<String> newChildFolderList) {
	
		OriginFolder folder = this.searchOriginFolderCode(code);
		if(folder==null)return false;
		folder.setChildFolderList(newChildFolderList);
		return true;
	}
	
	public boolean modifyOriginFolderByPFolderPath(String parentFolder, String newPath) {
	
		OriginFolderList folderList = this.searchOriginFolderPFolder(parentFolder);
		if(folderList.getList().isEmpty())return false;
		for(OriginFolder folder:folderList.getList()){
			folder.setPath(newPath+"\\"+folder.getName());
		}
		return true;
	}
	
	public boolean modifyOriginFolderByPFolderName(String parentFolder, String newName) {
		OriginFolderList folderList = this.searchOriginFolderPFolder(parentFolder);
		if(folderList.getList().isEmpty())return false;
		for(OriginFolder folder:folderList.getList()){
			folder.setName(newName);
			StringTokenizer tokens = new StringTokenizer(folder.getParent(),"\\");
			int cnt = tokens.countTokens();
			String newPath = new String();
			for(int i=0;i<cnt-1;i++){
				newPath+=tokens.nextToken()+"\\";
			}
			newPath+=newName;
			folder.setPath(newPath);
		}
		return true;
	
	}
	
	public boolean modifyOriginFolderByPFolderChFolders(String parentFolder, List<String> newChildFolderList) {
	
		OriginFolderList folderList = this.searchOriginFolderPFolder(parentFolder);
		if(folderList.getList().isEmpty())return false;
		for(OriginFolder folder:folderList.getList()){
			folder.setChildFolderList(newChildFolderList);
		}
		return true;
	}
	
	public OriginFolder searchOriginFolderCode(String code) {
	
		for(OriginFolder folder:this.list){
			if(folder.getCode().equals(code))return folder;
		}return null;
	}
	
	public OriginFolderList searchOriginFolderName(String name) {
	
		OriginFolderList folderList = new OriginFolderList();
		for(OriginFolder folder:this.list){
			if(folder.getName().equals(name))folderList.addOriginFolder(folder);
		}return null;
	}
	
	public OriginFolder searchOriginFolderName(String name, String parentFolder) {
	
		OriginFolderList folderList = new OriginFolderList();
		for(OriginFolder folder:this.list){
			if(folder.getName().equals(name))
				if(folder.getParentFolder().equals(parentFolder))folderList.addOriginFolder(folder);
		}return null;
	}
	
	public OriginFolderList searchOriginFolderDes(String description) {
	
		OriginFolderList folderList = new OriginFolderList();
		for(OriginFolder folder:this.list){
			if(folder.getDescription().equals(description))folderList.addOriginFolder(folder);
		}return null;
	}
	
	public OriginFolder searchOriginFolderPath(String path) {
	
		for(OriginFolder folder:this.list){
			if(folder.getPath().equals(path))return folder;
		}return null;
	}
	
	public OriginFolderList searchOriginFolderPFolder(String parentFolder) {
	
		OriginFolderList folderList = new OriginFolderList();
		for(OriginFolder folder:this.list){
			if(folder.getParentFolder().equals(parentFolder))folderList.addOriginFolder(folder);
		}return null;
	}
	public List<OriginFolder> getList() {
		return list;
	}
	public void setList(List<OriginFolder> list) {
		this.list = list;
	}
	
}
