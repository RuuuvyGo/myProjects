package manager;

import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import model.Alarm;
import model.CommitMessage;
import model.CooperatorMessage;
import model.CopiedProject;
import model.CopiedProjectList;
import model.FileNode;
import model.GroupAlarm;
import model.OriginProject;
import model.OriginProjectList;
import model.Team;
import model.TeamList;
import socialProExceptions.DAOException;
import socialProExceptions.FileException;
import socialProExceptions.FolderException;
import socialProExceptions.MemberException;
import socialProExceptions.ProjectException;
import socialProExceptions.TeamException;
import action.AlarmInsertAction;
import action.CommitMessageInsertAction;
import action.CommitMessageSearchAction;
import action.CommitMessageUpdateAction;
import action.CooperatorMessageInsertAction;
import action.CooperatorMessageSearchAction;
import action.GroupAlarmInsertAction;
import factory.ActionFactory;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : MessageDBManager.java
//  @ Date : 2015-07-28
//  @ Author : 
//
//




public class MessageDBManager {
	
	private static MessageDBManager INSTANCE;
	
	static{INSTANCE = new MessageDBManager();}
	private MessageDBManager(){}
	
	public static MessageDBManager getINSTANCE() {
		return INSTANCE;
	}

	
	public Map<String,Map<String,Map<Alarm,CooperatorMessage>>> checkUnReadTeamCooperMsg(String memberCode) throws DAOException, ParseException{
		
		//when member is manager of team
		Map<String, Map<String, Map<Alarm, CooperatorMessage>>> resMap = new HashMap<String, Map<String, Map<Alarm, CooperatorMessage>>>();
		
		//get teamList
		TeamList teamInfoList = TeamManager.getINSTANCE().searchTeamManager(memberCode);
		if(!teamInfoList.getList().isEmpty()){
			
			List<String> teamCodeList = new ArrayList<String>();
			for(Team teamInfo : teamInfoList.getList()){
				teamCodeList.add(teamInfo.getCode());
			}
			Map<String, Map<String, Map<Alarm, CooperatorMessage>>> val1 = ((CooperatorMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).loadUnReadTeamCooperMsgManagerRec(teamCodeList, memberCode);
			if(!val1.isEmpty()) resMap.putAll(val1);
		}
		
		//get teamList
		teamInfoList.getList().clear();
		teamInfoList = TeamManager.getINSTANCE().searchTeamCooper(memberCode);
		if(!teamInfoList.getList().isEmpty()){
			
			List<String> teamCodeList = new ArrayList<String>();
			for(Team teamInfo : teamInfoList.getList()){
				teamCodeList.add(teamInfo.getCode());
			}
			Map<String, Map<String, Map<Alarm, CooperatorMessage>>> val1 = ((CooperatorMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).loadUnReadTeamCooperMsgMemRec(memberCode);
			if(!val1.isEmpty()) resMap.putAll(val1);
		}
		return resMap;
	}

	public Map<String,Map<String,Map<Alarm,CooperatorMessage>>> loadUnReadTeamCooperMsgManagerSend(String memberCode) throws DAOException, ParseException{
		
		//when member is manager of team
		//teamCode, memberCode
		Map<String, Map<String, Map<Alarm, CooperatorMessage>>> resMap = new HashMap<String, Map<String, Map<Alarm, CooperatorMessage>>>();
		
		//get teamList
		TeamList teamInfoList = TeamManager.getINSTANCE().searchTeamManager(memberCode);
		if(!teamInfoList.getList().isEmpty()){
			
			List<String> teamCodeList = new ArrayList<String>();
			for(Team teamInfo : teamInfoList.getList()){
				teamCodeList.add(teamInfo.getCode());
			}
			Map<String, Map<String, Map<Alarm, CooperatorMessage>>> val2 = ((CooperatorMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).loadUnReadTeamCooperMsgManagerSend(teamCodeList, memberCode);
			if(!val2.isEmpty()) resMap.putAll(val2);
		}
		return resMap;
	}
	
	public Map<String,Map<String,Map<Alarm,CooperatorMessage>>> loadUnReadTeamCooperMsgMemSend(String memberCode) throws DAOException, ParseException{	
		//get teamList
		//teamCode, managerCode
		//member(cooperator)->manager
		Map<String, Map<String, Map<Alarm, CooperatorMessage>>> resMap = new HashMap<String, Map<String, Map<Alarm, CooperatorMessage>>>();
		
		TeamList teamInfoList = TeamManager.getINSTANCE().searchTeamCooper(memberCode);
		if(!teamInfoList.getList().isEmpty()){
			
			List<String> teamCodeList = new ArrayList<String>();
			for(Team teamInfo : teamInfoList.getList()){
				teamCodeList.add(teamInfo.getCode());
			}
			Map<String, Map<String, Map<Alarm, CooperatorMessage>>> val2 = ((CooperatorMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).loadUnReadTeamCooperMsgMemSend(memberCode);
			if(!val2.isEmpty()) resMap.putAll(val2);
		}
		return resMap;
	}

	public Map<String,Map<String,Map<Alarm,CooperatorMessage>>> loadUnReadTeamCooperMsgManagerRec(String memberCode) throws DAOException, ParseException{
		
		//when member is manager of team
		//teamCode, memberCode
		Map<String, Map<String, Map<Alarm, CooperatorMessage>>> resMap = new HashMap<String, Map<String, Map<Alarm, CooperatorMessage>>>();
		
		//get teamList
		TeamList teamInfoList = TeamManager.getINSTANCE().searchTeamManager(memberCode);
		if(!teamInfoList.getList().isEmpty()){
			
			List<String> teamCodeList = new ArrayList<String>();
			for(Team teamInfo : teamInfoList.getList()){
				teamCodeList.add(teamInfo.getCode());
			}
			Map<String, Map<String, Map<Alarm, CooperatorMessage>>> val1 = ((CooperatorMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).loadUnReadTeamCooperMsgManagerRec(teamCodeList, memberCode);
			if(!val1.isEmpty()) resMap.putAll(val1);
		}
		return resMap;
	}
	
	public Map<String,Map<String,Map<Alarm,CooperatorMessage>>> loadUnReadTeamCooperMsgMemRec(String memberCode) throws DAOException, ParseException{	
		//get teamList
		//teamCode, memberCode
		Map<String, Map<String, Map<Alarm, CooperatorMessage>>> resMap = new HashMap<String, Map<String, Map<Alarm, CooperatorMessage>>>();
				
		 TeamList teamInfoList = TeamManager.getINSTANCE().searchTeamCooper(memberCode);
		if(!teamInfoList.getList().isEmpty()){
			
			List<String> teamCodeList = new ArrayList<String>();
			for(Team teamInfo : teamInfoList.getList()){
				teamCodeList.add(teamInfo.getCode());
			}
			Map<String, Map<String, Map<Alarm, CooperatorMessage>>> val1 = ((CooperatorMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).loadUnReadTeamCooperMsgMemRec(memberCode);
			if(!val1.isEmpty()) resMap.putAll(val1);
		}
		return resMap;
	}

	public Map<String,Map<String,Map<Alarm,CooperatorMessage>>> loadReadTeamCooperMsg(String memberCode) throws DAOException, ParseException{
		
		//when member is manager of team
		Map<String, Map<String, Map<Alarm, CooperatorMessage>>> resMap = new HashMap<String, Map<String, Map<Alarm, CooperatorMessage>>>();
		
		//get teamList
		TeamList teamInfoList = TeamManager.getINSTANCE().searchTeamManager(memberCode);
		if(!teamInfoList.getList().isEmpty()){
			
			List<String> teamCodeList = new ArrayList<String>();
			for(Team teamInfo : teamInfoList.getList()){
				teamCodeList.add(teamInfo.getCode());
			}
			Map<String, Map<String, Map<Alarm, CooperatorMessage>>> val1 = ((CooperatorMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).loadReadTeamCooperMsgManagerRec(teamCodeList, memberCode);
			if(!val1.isEmpty()) resMap.putAll(val1);
			
			Map<String, Map<String, Map<Alarm, CooperatorMessage>>> val2 = ((CooperatorMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).loadReadTeamCooperMsgManagerSend(teamCodeList, memberCode);
			if(!val2.isEmpty()) resMap.putAll(val2);
		}
		
		//get teamList
		teamInfoList.getList().clear();
		teamInfoList = TeamManager.getINSTANCE().searchTeamCooper(memberCode);
		if(!teamInfoList.getList().isEmpty()){
			
			List<String> teamCodeList = new ArrayList<String>();
			for(Team teamInfo : teamInfoList.getList()){
				teamCodeList.add(teamInfo.getCode());
			}
			Map<String, Map<String, Map<Alarm, CooperatorMessage>>> val1 = ((CooperatorMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).loadReadTeamCooperMsgMemRec(memberCode);
			if(!val1.isEmpty()) resMap.putAll(val1);
			Map<String, Map<String, Map<Alarm, CooperatorMessage>>> val2 = ((CooperatorMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).loadReadTeamCooperMsgMemSend( memberCode);
			if(!val2.isEmpty()) resMap.putAll(val2);
		}
		return resMap;
	}

	public Map<String,Map<String,Map<Alarm,CooperatorMessage>>> loadReadTeamCooperMsgManagerRec(String memberCode) throws DAOException, ParseException{
		
		//when member is manager of team
		Map<String, Map<String, Map<Alarm, CooperatorMessage>>> resMap = new HashMap<String, Map<String, Map<Alarm, CooperatorMessage>>>();
		
		//get teamList
		TeamList teamInfoList = TeamManager.getINSTANCE().searchTeamManager(memberCode);
		if(!teamInfoList.getList().isEmpty()){
			
			List<String> teamCodeList = new ArrayList<String>();
			for(Team teamInfo : teamInfoList.getList()){
				teamCodeList.add(teamInfo.getCode());
			}
			Map<String, Map<String, Map<Alarm, CooperatorMessage>>> val1 = ((CooperatorMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).loadReadTeamCooperMsgManagerRec(teamCodeList, memberCode);
			if(!val1.isEmpty()) resMap.putAll(val1);
		}
		return resMap;
	}
	public Map<String,Map<String,Map<Alarm,CooperatorMessage>>> loadReadTeamCooperMsgMemRec(String memberCode) throws DAOException, ParseException{		
		//get teamList

		//when member is manager of team
		Map<String, Map<String, Map<Alarm, CooperatorMessage>>> resMap = new HashMap<String, Map<String, Map<Alarm, CooperatorMessage>>>();
		
		//get teamList
		TeamList teamInfoList = TeamManager.getINSTANCE().searchTeamCooper(memberCode);
		if(!teamInfoList.getList().isEmpty()){
			
			List<String> teamCodeList = new ArrayList<String>();
			for(Team teamInfo : teamInfoList.getList()){
				teamCodeList.add(teamInfo.getCode());
			}
			Map<String, Map<String, Map<Alarm, CooperatorMessage>>> val1 = ((CooperatorMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).loadReadTeamCooperMsgMemRec(memberCode);
			if(!val1.isEmpty()) resMap.putAll(val1);
		}
		return resMap;
	}
	
	public Map<String,Map<String,Map<Alarm,CooperatorMessage>>> loadReadTeamCooperMsgRec(String memberCode) throws DAOException, ParseException{
		
		//when member is manager of team
		Map<String, Map<String, Map<Alarm, CooperatorMessage>>> resMap = new HashMap<String, Map<String, Map<Alarm, CooperatorMessage>>>();
		
		//get teamList
		TeamList teamInfoList = TeamManager.getINSTANCE().searchTeamManager(memberCode);
		if(!teamInfoList.getList().isEmpty()){
			
			List<String> teamCodeList = new ArrayList<String>();
			for(Team teamInfo : teamInfoList.getList()){
				teamCodeList.add(teamInfo.getCode());
			}
			Map<String, Map<String, Map<Alarm, CooperatorMessage>>> val1 = ((CooperatorMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).loadReadTeamCooperMsgManagerRec(teamCodeList, memberCode);
			if(!val1.isEmpty()) resMap.putAll(val1);
		}
		
		//get teamList
		teamInfoList.getList().clear();
		teamInfoList = TeamManager.getINSTANCE().searchTeamCooper(memberCode);
		if(!teamInfoList.getList().isEmpty()){
			
			List<String> teamCodeList = new ArrayList<String>();
			for(Team teamInfo : teamInfoList.getList()){
				teamCodeList.add(teamInfo.getCode());
			}
			Map<String, Map<String, Map<Alarm, CooperatorMessage>>> val1 = ((CooperatorMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).loadReadTeamCooperMsgMemRec(memberCode);
			if(!val1.isEmpty()) resMap.putAll(val1);
		}
		return resMap;
	}

	public Map<String,Map<String,Map<Alarm,CooperatorMessage>>> loadReadTeamCooperMsgManagerSend(String memberCode) throws DAOException, ParseException{
		
		//when member is manager of team
		Map<String, Map<String, Map<Alarm, CooperatorMessage>>> resMap = new HashMap<String, Map<String, Map<Alarm, CooperatorMessage>>>();
		
		//get teamList
		TeamList teamInfoList = TeamManager.getINSTANCE().searchTeamManager(memberCode);
		if(!teamInfoList.getList().isEmpty()){
			
			List<String> teamCodeList = new ArrayList<String>();
			for(Team teamInfo : teamInfoList.getList()){
				teamCodeList.add(teamInfo.getCode());
			}
			Map<String, Map<String, Map<Alarm, CooperatorMessage>>> val2 = ((CooperatorMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).loadReadTeamCooperMsgManagerSend(teamCodeList, memberCode);
			if(!val2.isEmpty()) resMap.putAll(val2);
		}
		return resMap;
	}
	
	public Map<String,Map<String,Map<Alarm,CooperatorMessage>>> loadReadTeamCooperMsgMemSend(String memberCode) throws DAOException, ParseException{
		//get teamList
		//when member is manager of team
		Map<String, Map<String, Map<Alarm, CooperatorMessage>>> resMap = new HashMap<String, Map<String, Map<Alarm, CooperatorMessage>>>();
				
		TeamList teamInfoList = TeamManager.getINSTANCE().searchTeamCooper(memberCode);
		if(!teamInfoList.getList().isEmpty()){
			
			List<String> teamCodeList = new ArrayList<String>();
			for(Team teamInfo : teamInfoList.getList()){
				teamCodeList.add(teamInfo.getCode());
			}
			Map<String, Map<String, Map<Alarm, CooperatorMessage>>> val2 = ((CooperatorMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).loadReadTeamCooperMsgMemSend( memberCode);
			if(!val2.isEmpty()) resMap.putAll(val2);
		}
		return resMap;
	}
	
	public Map<String,Map<String,Map<Alarm,CooperatorMessage>>> loadReadTeamCooperMsgSend(String memberCode) throws DAOException, ParseException{
		
		//when member is manager of team
		Map<String, Map<String, Map<Alarm, CooperatorMessage>>> resMap = new HashMap<String, Map<String, Map<Alarm, CooperatorMessage>>>();
		
		//get teamList
		TeamList teamInfoList = TeamManager.getINSTANCE().searchTeamManager(memberCode);
		if(!teamInfoList.getList().isEmpty()){
			
			List<String> teamCodeList = new ArrayList<String>();
			for(Team teamInfo : teamInfoList.getList()){
				teamCodeList.add(teamInfo.getCode());
			}
			Map<String, Map<String, Map<Alarm, CooperatorMessage>>> val2 = ((CooperatorMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).loadReadTeamCooperMsgManagerSend(teamCodeList, memberCode);
			if(!val2.isEmpty()) resMap.putAll(val2);
		}
		
		//get teamList
		teamInfoList.getList().clear();
		teamInfoList = TeamManager.getINSTANCE().searchTeamCooper(memberCode);
		if(!teamInfoList.getList().isEmpty()){
			
			List<String> teamCodeList = new ArrayList<String>();
			for(Team teamInfo : teamInfoList.getList()){
				teamCodeList.add(teamInfo.getCode());
			}
			Map<String, Map<String, Map<Alarm, CooperatorMessage>>> val2 = ((CooperatorMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).loadReadTeamCooperMsgMemSend( memberCode);
			if(!val2.isEmpty()) resMap.putAll(val2);
		}
		return resMap;
	}

	public Map<String,Map<String,Map<Alarm,CooperatorMessage>>> checkUnReadProCooperMsg(String memberCode) throws DAOException, ParseException, FolderException, ProjectException{
		
		//when member is manager of team
		Map<String, Map<String, Map<Alarm, CooperatorMessage>>> resMap = new HashMap<String, Map<String, Map<Alarm, CooperatorMessage>>>();
		
		//get oriProjectList
		List<String> pathList = FileNodeManager.getINSTANCE().searchMemberProjectPathList(memberCode);
		if(!pathList.isEmpty()){
			OriginProjectList oriProList = ProjectManager.getINSTANCE().searchASelectOriginProject(pathList);
			if(!oriProList.getList().isEmpty()){
				
				List<String> teamCodeList = new ArrayList<String>();
				for(OriginProject oriPro : oriProList.getList()){
					teamCodeList.add(oriPro.getCode());
				}
				return ((CooperatorMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).loadUnReadProCooperMsgOwnerRec(teamCodeList, memberCode);
			}
		}
		return resMap;
	}

	public Map<String,Map<String,Map<Alarm,CooperatorMessage>>> loadUnReadProCooperMsgSend(String memberCode) throws DAOException, ParseException, FolderException, ProjectException{
		
		//when member is manager of team
		Map<String, Map<String, Map<Alarm, CooperatorMessage>>> resMap = new HashMap<String, Map<String, Map<Alarm, CooperatorMessage>>>();
		
		//get copiedProList
		List<String> codeList = FileNodeManager.getINSTANCE().searchMemberProjectPathList(memberCode);
		if(!codeList.isEmpty()){
			CopiedProjectList cpProList = ProjectManager.getINSTANCE().searchASelectCopiedProject(codeList);
			if(!cpProList.getList().isEmpty()){
				
				List<String> teamCodeList = new ArrayList<String>();
				for(CopiedProject cpPro : cpProList.getList()){
					System.out.println(memberCode+"   cpPro (origin) : "+cpPro.getOriginCode());
					teamCodeList.add(cpPro.getOriginCode());
				}
				Map<String, Map<String, Map<Alarm, CooperatorMessage>>> val1 = ((CooperatorMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).loadUnReadProCooperMsgMemSend(teamCodeList, memberCode);
				if(!val1.isEmpty()) resMap.putAll(val1);
			}
		}
		return resMap;
	}
	
	public Map<String,Map<String,Map<Alarm,CooperatorMessage>>> loadUnReadProCooperMsgRec(String memberCode) throws DAOException, ParseException, FolderException, ProjectException{
		
		//when member is manager of team
		Map<String, Map<String, Map<Alarm, CooperatorMessage>>> resMap = new HashMap<String, Map<String, Map<Alarm, CooperatorMessage>>>();
		
		//get oriProjectList
		List<String> pathList = FileNodeManager.getINSTANCE().searchMemberProjectPathList(memberCode);
		if(!pathList.isEmpty()){
			OriginProjectList oriProList = ProjectManager.getINSTANCE().searchASelectOriginProject(pathList);
			if(!oriProList.getList().isEmpty()){
				
				List<String> teamCodeList = new ArrayList<String>();
				for(OriginProject oriPro : oriProList.getList()){
					System.out.println("oriPro : "+oriPro.getCode());
					teamCodeList.add(oriPro.getCode());
				}
				Map<String, Map<String, Map<Alarm, CooperatorMessage>>> val1 = ((CooperatorMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).loadUnReadProCooperMsgOwnerRec(teamCodeList, memberCode);
				if(!val1.isEmpty()) resMap.putAll(val1);
			}
		}
		return resMap;
	}
	
	public Map<String,Map<String,Map<Alarm,CooperatorMessage>>> loadUnReadProCooperMsg(String memberCode) throws DAOException, ParseException, FolderException, ProjectException{
		
		//when member is manager of team
		Map<String, Map<String, Map<Alarm, CooperatorMessage>>> resMap = new HashMap<String, Map<String, Map<Alarm, CooperatorMessage>>>();
		
		//get oriProjectList
		List<String> pathList = FileNodeManager.getINSTANCE().searchMemberProjectPathList(memberCode);
		if(!pathList.isEmpty()){
			OriginProjectList oriProList = ProjectManager.getINSTANCE().searchASelectOriginProject(pathList);
			if(!oriProList.getList().isEmpty()){
				
				List<String> teamCodeList = new ArrayList<String>();
				for(OriginProject oriPro : oriProList.getList()){
					teamCodeList.add(oriPro.getCode());
				}
				Map<String, Map<String, Map<Alarm, CooperatorMessage>>> val1 = ((CooperatorMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).loadUnReadProCooperMsgOwnerRec(teamCodeList, memberCode);
				if(!val1.isEmpty()) resMap.putAll(val1);
			}

			CopiedProjectList cpProList = ProjectManager.getINSTANCE().searchASelectCopiedProject(pathList);
			if(!cpProList.getList().isEmpty()){
				
				List<String> teamCodeList = new ArrayList<String>();
				for(CopiedProject cpPro : cpProList.getList()){
					teamCodeList.add(cpPro.getCode());
				}
				Map<String, Map<String, Map<Alarm, CooperatorMessage>>> val1 = ((CooperatorMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).loadUnReadProCooperMsgMemSend(teamCodeList, memberCode);
				if(!val1.isEmpty()) resMap.putAll(val1);
			}
		}
		return resMap;
	}

	public Map<String,Map<String,Map<Alarm,CooperatorMessage>>> loadReadProCooperMsg(String memberCode) throws DAOException, ParseException, FolderException, ProjectException{
		
		//when member is manager of team
		Map<String, Map<String, Map<Alarm, CooperatorMessage>>> resMap = new HashMap<String, Map<String, Map<Alarm, CooperatorMessage>>>();
		
		//get teamList
		List<String> pathList = FileNodeManager.getINSTANCE().searchMemberProjectPathList(memberCode);
		if(!pathList.isEmpty()){
			OriginProjectList oriProList = ProjectManager.getINSTANCE().searchASelectOriginProject(pathList);
			if(!oriProList.getList().isEmpty()){
				
				List<String> teamCodeList = new ArrayList<String>();
				for(OriginProject oriPro : oriProList.getList()){
					teamCodeList.add(oriPro.getCode());
				}
				Map<String, Map<String, Map<Alarm, CooperatorMessage>>> val1 = ((CooperatorMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).loadReadProCooperMsgOwnerRec(teamCodeList, memberCode);
				if(!val1.isEmpty()) resMap.putAll(val1);
			}
			
			CopiedProjectList cpProList = ProjectManager.getINSTANCE().searchASelectCopiedProject(pathList);
			if(!cpProList.getList().isEmpty()){
				
				List<String> teamCodeList = new ArrayList<String>();
				for(CopiedProject cpPro : cpProList.getList()){
					teamCodeList.add(cpPro.getCode());
				}
				Map<String, Map<String, Map<Alarm, CooperatorMessage>>> val1 = ((CooperatorMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).loadReadProCooperMsgMemSend(teamCodeList, memberCode);
				if(!val1.isEmpty()) resMap.putAll(val1);
			}
		}
	
		return resMap;
	}
	
	public Map<String,Map<String,Map<Alarm,CooperatorMessage>>> loadReadProCooperMsgRec(String memberCode) throws DAOException, ParseException, FolderException, ProjectException{
		
		//when member is manager of team
		Map<String, Map<String, Map<Alarm, CooperatorMessage>>> resMap = new HashMap<String, Map<String, Map<Alarm, CooperatorMessage>>>();
		
		//get teamList
		List<String> pathList = FileNodeManager.getINSTANCE().searchMemberProjectPathList(memberCode);
		if(!pathList.isEmpty()){
			OriginProjectList oriProList = ProjectManager.getINSTANCE().searchASelectOriginProject(pathList);
			if(!oriProList.getList().isEmpty()){
				
				List<String> teamCodeList = new ArrayList<String>();
				for(OriginProject oriPro : oriProList.getList()){
					teamCodeList.add(oriPro.getCode());
				}
				Map<String, Map<String, Map<Alarm, CooperatorMessage>>> val1 = ((CooperatorMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).loadReadProCooperMsgOwnerRec(teamCodeList, memberCode);
				if(!val1.isEmpty()) resMap.putAll(val1);
			}
		}
	
		return resMap;
	}
	

	public Map<String,Map<String,Map<Alarm,CooperatorMessage>>> loadReadProCooperMsgSend(String memberCode) throws DAOException, ParseException, FolderException, ProjectException{
		
		//when member is manager of team
		Map<String, Map<String, Map<Alarm, CooperatorMessage>>> resMap = new HashMap<String, Map<String, Map<Alarm, CooperatorMessage>>>();
		
		//get teamList
		List<String> pathList = FileNodeManager.getINSTANCE().searchMemberProjectPathList(memberCode);
		if(!pathList.isEmpty()){
			
			CopiedProjectList cpProList = ProjectManager.getINSTANCE().searchASelectCopiedProject(pathList);
			if(!cpProList.getList().isEmpty()){
				
				List<String> teamCodeList = new ArrayList<String>();
				for(CopiedProject cpPro : cpProList.getList()){
					teamCodeList.add(cpPro.getCode());
				}
				Map<String, Map<String, Map<Alarm, CooperatorMessage>>> val1 = ((CooperatorMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).loadReadProCooperMsgMemSend(teamCodeList, memberCode);
				if(!val1.isEmpty()) resMap.putAll(val1);
			}
		}
	
		return resMap;
	}
	
	///////////////////////////////////////////////////////////////////////////  cooper end
	
	///////////////  load start
	
	public Map<String,Map<Alarm,CommitMessage>> loadReadSharedProjectListCommitMsgForOwner(String oriProCode,String ownerCode,Map<String,Map<String,List<String>>> cooperProjectMap) throws DAOException, ParseException{
		
		//if member is project Owner(Owner Rec)
		return ((CommitMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).loadReadSharedProListCommitMsgOwnerRec(cooperProjectMap, ownerCode,oriProCode);
	}

	public Map<String,Map<Alarm,CommitMessage>> loadUnReadSharedProjectListCommitMsgForOwner(String oriProCode,String ownerCode,Map<String,Map<String,List<String>>> cooperProjectMap) throws DAOException, ParseException{
		
		//if member is project Owner(Owner Rec)
		return ((CommitMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).loadUnReadSharedProListCommitMsgOwnerRec(cooperProjectMap, ownerCode,oriProCode);
	}

	public Map<Alarm,CommitMessage> loadReadSharedProjectCommitMsgForOwner(String ownerCode,Map<String,List<String>> originProjectMap) throws DAOException, ParseException{
		
		//if member is project Owner(Owner Rec)
		return ((CommitMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).loadReadSharedProCommitMsgOwnerRec(originProjectMap, ownerCode);
	}

	public Map<Alarm,CommitMessage> loadUnReadSharedProjectCommitMsgForOwner(String ownerCode,Map<String,List<String>> originProjectMap) throws DAOException, ParseException{
		
		//if member is project Owner(Owner Rec)
		return ((CommitMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).loadUnReadSharedProCommitMsgOwnerRec(originProjectMap, ownerCode);
	}

	public Map<String,Map<Alarm,CommitMessage>> loadReadSharedProjectListCommitMsgForCooperator(String cooperatorCode, Map<String, Map<String, Map<String, List<String>>>> cooperCpMap) throws DAOException, ParseException{
		
		//if memberis cooperator of Shared Project(cooper send)
		return ((CommitMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).loadReadSharedProListCommitMsgCooperSend(cooperCpMap, cooperatorCode);
	}

	public Map<String,Map<Alarm,CommitMessage>> loadUnReadSharedProjectListCommitMsgForCooperator(String cooperatorCode, Map<String, Map<String, Map<String, List<String>>>> cooperCpMap) throws DAOException, ParseException{
		
		//if memberis cooperator of Shared Project(cooper send)
		return ((CommitMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).loadUnReadSharedProListCommitMsgCooperSend(cooperCpMap, cooperatorCode);
	}

	public Map<Alarm,CommitMessage> loadReadSharedProjectCommitMsgForCooperator(String cooperatorCode, String ownerCode,Map<String, List<String>> originProjectMap) throws DAOException, ParseException{
		
		//if memberis cooperator of Shared Project(cooper send)
		return ((CommitMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).loadReadSharedProCommitMsgCooperSend(originProjectMap, ownerCode, cooperatorCode);
	}

	public Map<Alarm,CommitMessage> loadUnReadSharedProjectCommitMsgForCooperator(String cooperatorCode, String ownerCode,Map<String, List<String>> originProjectMap) throws DAOException, ParseException{
		
		//if memberis cooperator of Shared Project(cooper send)
		return ((CommitMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).loadUnReadSharedProCommitMsgCooperSend(originProjectMap, ownerCode, cooperatorCode);
	}

	public Map<String, Map<String,Map<Alarm, CommitMessage>>> loadReadTeamListProjectCommitMsgForOwner(String managerCode, Map<String, Map<String, Map<String, List<String>>>> originTeamProjectMap) throws DAOException, ParseException{
		
		//if member is team Manager of team Project(manager rec)
		return ((CommitMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).loadReadTeamListCommitMsgManagerRec(originTeamProjectMap, managerCode);
	}

	public Map<String, Map<String,Map<Alarm, CommitMessage>>> loadUnReadTeamListProjectCommitMsgForOwner(String managerCode, Map<String, Map<String, Map<String, List<String>>>> originTeamProjectMap) throws DAOException, ParseException{
		
		//if member is team Manager of team Project(manager rec)
		return ((CommitMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).loadUnReadTeamListCommitMsgManagerRec(originTeamProjectMap, managerCode);
	}

	public Map<String, Map<String,Map<Alarm, CommitMessage>>> loadReadTeamProjectListCommitMsgForOwner(String teamCode,String managerCode, Map<String, Map<String, List<String>>> originTeamProjectMap) throws DAOException, ParseException{
		
		//if member is team Manager of team Project(manager rec)
		return ((CommitMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).loadReadTeamProjectListCommitMsgManagerRec(originTeamProjectMap,teamCode, managerCode);
	}

	public Map<String, Map<String,Map<Alarm, CommitMessage>>> loadUnReadTeamProjectListCommitMsgForOwner(String teamCode,String managerCode, Map<String, Map<String, List<String>>> originTeamProjectMap) throws DAOException, ParseException{
		
		//if member is team Manager of team Project(manager rec)
		return ((CommitMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).loadUnReadTeamProjectListCommitMsgManagerRec(originTeamProjectMap,teamCode, managerCode);
	}

	public Map<String, Map<String,Map<Alarm, CommitMessage>>> loadReadTeamProjectCommitMsgForOwner(String teamCode,String managerCode,String oriProCode, Map<String,Map<String, List<String>>> cpProjectMap) throws DAOException, ParseException{
		
		//if member is team Manager of team Project(manager rec)
		return ((CommitMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).loadReadTeamProjectCommitMsgManagerRec(cpProjectMap, teamCode, managerCode, oriProCode);
	}

	public Map<String, Map<String,Map<Alarm, CommitMessage>>> loadUnReadTeamProjectCommitMsgForOwner(String teamCode,String managerCode,String oriProCode ,Map<String,Map<String, List<String>>> cpProjectMap) throws DAOException, ParseException{
		
		//if member is team Manager of team Project(manager rec)
		return ((CommitMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).loadUnReadTeamProjectCommitMsgManagerRec(cpProjectMap, teamCode, managerCode, oriProCode);
	}

	public Map<String, Map<String,Map<Alarm, CommitMessage>>> loadReadTeamListProjectCommitMsgForCooper(String cooperatorCode, Map<String, Map<String, Map<String, List<String>>>> originTeamProjectMap) throws DAOException, ParseException{
		
		//if member is team Manager of team Project(manager rec)
		return ((CommitMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).loadReadTeamListCommitMsgCooperSend(originTeamProjectMap, cooperatorCode);
	}

	public Map<String, Map<String,Map<Alarm, CommitMessage>>> loadUnReadTeamListProjectCommitMsgForCooper(String cooperatorCode, Map<String, Map<String, Map<String, List<String>>>> originTeamProjectMap) throws DAOException, ParseException{
		
		//if member is team Manager of team Project(manager rec)
		return ((CommitMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).loadUnReadTeamListCommitMsgCooperSend(originTeamProjectMap, cooperatorCode);
	}
public Map<String, Map<String,Map<Alarm, CommitMessage>>> loadReadTeamProjectListCommitMsgForCooper(String teamCode,String cooperatorCode, Map<String, Map<String, List<String>>> originTeamProjectMap) throws DAOException, ParseException{
		
		//if member is team Manager of team Project(manager rec)
		return ((CommitMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).loadReadTeamProjectListCommitMsgCooperSend(originTeamProjectMap, teamCode, cooperatorCode);
	}

	public Map<String, Map<String,Map<Alarm, CommitMessage>>> loadUnReadTeamProjectListCommitMsgForCooper(String teamCode,String cooperatorCode, Map<String, Map<String, List<String>>> originTeamProjectMap) throws DAOException, ParseException{
		
		//if member is team Manager of team Project(manager rec)
		return ((CommitMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).loadUnReadTeamProjectListCommitMsgCooperSend(originTeamProjectMap, teamCode, cooperatorCode);
	}
	
public Map<String, Map<String,Map<Alarm, CommitMessage>>> loadReadTeamProjectCommitMsgForCooper(String teamCode, String manager,String cooperatorCode, String oirProCode, Map<String, List<String>> cooperCpChildren) throws DAOException, ParseException{
		
		//if member is team Manager of team Project(manager rec)
		return ((CommitMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).loadReadTeamProjectCommitMsgCooperSend(cooperCpChildren, teamCode, manager, cooperatorCode, oirProCode);
	}

	public Map<String, Map<String,Map<Alarm, CommitMessage>>> loadUnReadTeamProjectCommitMsgForCooper(String teamCode,String manager,String cooperatorCode, String oirProCode, Map<String, List<String>> cooperCpChildren) throws DAOException, ParseException{
		
		//if member is team Manager of team Project(manager rec)
		return ((CommitMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).loadUnReadTeamProjectCommitMsgCooperSend(cooperCpChildren, teamCode, manager, cooperatorCode, oirProCode);
	}

	public Map<String, Map<String, Map<GroupAlarm, CommitMessage>>> loadReadTeamProjectCommitMessageForTeam(String cooperatorCode, Map<String,List<String>> originTeamProChildren) throws DAOException, ParseException{
		
		return ((CommitMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).loadReadTeamProjectMsgTeamSend(originTeamProChildren, cooperatorCode);
	}
	
	public Map<String, Map<String, Map<GroupAlarm, CommitMessage>>> loadUnReadTeamProjectCommitMessageForTeam(String cooperatorCode, Map<String,List<String>> originTeamProChildren) throws DAOException, ParseException{
		
		return ((CommitMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).loadUnReadTeamProjectMsgTeamSend(originTeamProChildren, cooperatorCode);
	}
	

	public Map<String, Map<String, Map<GroupAlarm, CommitMessage>>> loadReadTeamProjectListCommitMessageForTeam(Map<String,List<String>> originTeamProChildren) throws DAOException, ParseException{
		
		return ((CommitMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).loadReadTeamProjectListMsgTeamSend(originTeamProChildren);
	}
	
	public Map<String, Map<String, Map<GroupAlarm, CommitMessage>>> loadUnReadTeamProjectListCommitMessageForTeam(Map<String,List<String>> originTeamProChildren) throws DAOException, ParseException{
		
		return ((CommitMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).loadUnReadTeamProjectListMsgTeamSend(originTeamProChildren);
	}
	

	public Map<String, Map<String, Map<GroupAlarm, CommitMessage>>> loadReadTeamProjectCommitMessageForTeam(String teamCode,String originTeamPro) throws DAOException, ParseException{
		
		return ((CommitMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).loadReadTeamProjectMsgTeamSend(teamCode, originTeamPro);
	}
	
	public Map<String, Map<String, Map<GroupAlarm, CommitMessage>>> loadUnReadTeamProjectCommitMessageForTeam(String teamCode,String originTeamPro) throws DAOException, ParseException{
		
		return ((CommitMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).loadUnReadTeamProjectMsgTeamSend(teamCode, originTeamPro);
	}
	
	///////////////////////////////////////////////////////////////////////////  new version of owner project commit end
	
	
	///////////////////////////////////////////////////////////////////////////  search
	
	
	public Map<Alarm,CommitMessage> searchCommitMessage(String msgCode) throws DAOException, ParseException{
		
		return ((CommitMessageSearchAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).searchCommitMessageCode(msgCode);
	}
	
	
	///////////////////////////////////////////////////////////////////////////  insert

	public Map<GroupAlarm,CommitMessage> insertTeamCommitMessageFromOwner(CommitMessage commitMsg) throws DAOException, TeamException{
		
		Map<GroupAlarm,CommitMessage> resMap = new HashMap<GroupAlarm, CommitMessage>();
		
		commitMsg = ((CommitMessageInsertAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).insertTeamCommitMsgFromOwner(commitMsg);
		if(commitMsg!=null){
			String teamCode = commitMsg.getSenderCode();
			List<String> cooperCodeList = TeamManager.getINSTANCE().searchTeamCode(teamCode).getCooperatorList();
			GroupAlarm gAlarm = ((GroupAlarmInsertAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("GroupAlarmActionImpl")).insertGroupAlarm(commitMsg.getMessageCode(), cooperCodeList);
			if(gAlarm!=null)resMap.put(gAlarm, commitMsg);
		}
		
		return resMap;
	}
	
	public Map<Alarm,CommitMessage> insertTeamCommitMessageSendToOwner(CommitMessage commitMsg) throws DAOException{
		
		return ((CommitMessageInsertAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).insertTeamCommitMessageSendToOwner(commitMsg);
	}

	public Map<CommitMessage,List<GroupAlarm>> insertSharedProCommitMsgFromOwner(CommitMessage commitMsg) throws DAOException, ParseException, FolderException, IOException, FileException, ProjectException{
		
		if(commitMsg==null)System.out.println("insertSharedProCommitMsgFromOwner   commitMsg is null.....");
		String owner = commitMsg.getSenderCode();
		String oriProCode = commitMsg.getReceiverCode();
		List<String> cooperList= FileNodeManager.getINSTANCE().searchMemberProject(owner, oriProCode).getSharedMemberList();
		return ((CommitMessageInsertAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).insertSharedProCommitMsgFromOwner(commitMsg, cooperList);
	}
	
	public Map<Alarm,CommitMessage> insertSharedProjectCommitMessageSendToOwner(CommitMessage commitMsg) throws DAOException{
		
		Map<Alarm,CommitMessage> resMap = new HashMap<Alarm, CommitMessage>();
		commitMsg = ((CommitMessageInsertAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).insertSharedProjectCommitMessageSendToOwner(commitMsg);
		if(commitMsg!=null){
			(()ActionFactory.getACTIONFACTORY_INSTANCE().create("commitActionImpl")
			Alarm alarm = ((AlarmInsertAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("alarmActionImpl")).insertAlarm(commitMsg.getMessageCode());
			if(alarm!=null)resMap.put(alarm, commitMsg);
		}
		return resMap;
		
	}
	
	public Map<Alarm,CooperatorMessage> insertTeamCooperatorInviteMsg(String teamCode, List<String> cooperList) throws DAOException, TeamException, MemberException, ParseException{
		
		Team teamInfo = TeamManager.getINSTANCE().searchTeamCode(teamCode);
		return ((CooperatorMessageInsertAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).insertTeamCooperatorInviteMsg(teamCode, teamInfo.getName(), teamInfo.getManager(), cooperList);
	}
	
	public Map<Alarm,CooperatorMessage> insertProjectCooperatorMsg(String oriProOwnerCode, String oriProCode, String cooperCode) throws DAOException, TeamException, MemberException, ParseException, FolderException, IOException, FileException, ProjectException{
		
		FileNode projectNode = FileNodeManager.getINSTANCE().searchProject(oriProOwnerCode, oriProCode);
		String cooperNick = MemberManager.getINSTANCE().searchMemberCode(cooperCode).getNickName();
		return ((CooperatorMessageInsertAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("cooperatorMessageActionImpl")).insertProjectCooperatorMsg(oriProCode, projectNode.getName(), oriProOwnerCode, cooperCode, cooperNick);
				//(oriProCode, projectNode.getName(), oriProOwnerCode, cooperCode, cooperNick);
	}
	
	
/////////////////////////////////////////////////////////////////////  modify
	
	public String checkCommitMessageAlarm(String messageCode, String alarmCode) throws DAOException{
		
		return ((CommitMessageUpdateAction)ActionFactory.getACTIONFACTORY_INSTANCE().create("commitMessageActionImpl")).updateAlarmCheckDate(messageCode, alarmCode);
	}
}
